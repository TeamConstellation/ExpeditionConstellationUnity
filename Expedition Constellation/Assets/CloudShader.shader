// Compiled shader for PC, Mac & Linux Standalone, uncompressed size: 1192.1KB

// Skipping shader variants that would not be included into build of current scene.

Shader "Standard" {
Properties {
 _Color ("Color", Color) = (1,1,1,1)
 _MainTex ("Albedo", 2D) = "white" { }
 _Cutoff ("Alpha Cutoff", Range(0,1)) = 0.5
 _Glossiness ("Smoothness", Range(0,1)) = 0.5
[Gamma]  _Metallic ("Metallic", Range(0,1)) = 0
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
 _BumpScale ("Scale", Float) = 1
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _Parallax ("Height Scale", Range(0.005,0.08)) = 0.02
 _ParallaxMap ("Height Map", 2D) = "black" { }
 _OcclusionStrength ("Strength", Range(0,1)) = 1
 _OcclusionMap ("Occlusion", 2D) = "white" { }
 _EmissionColor ("Color", Color) = (0,0,0,1)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DetailMask ("Detail Mask", 2D) = "white" { }
 _DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
 _DetailNormalMapScale ("Scale", Float) = 1
 _DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)]  _UVSec ("UV Set for secondary textures", Float) = 0
[HideInInspector]  _EmissionScaleUI ("Scale", Float) = 0
[HideInInspector]  _EmissionColorUI ("Color", Color) = (1,1,1,1)
[HideInInspector]  _Mode ("__mode", Float) = 0
[HideInInspector]  _SrcBlend ("__src", Float) = 1
[HideInInspector]  _DstBlend ("__dst", Float) = 0
[HideInInspector]  _ZWrite ("__zw", Float) = 1
}
SubShader { 
 LOD 300
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //      opengl : 159 avg math (154..167), 5 avg texture (4..7), 9 branch
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 35871
Program "vp" {
SubProgram "opengl " {
// Stats: 154 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_2;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_8);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  vec3 viewDir_38;
  viewDir_38 = -(tmpvar_3);
  float tmpvar_39;
  tmpvar_39 = (1.0 - _Glossiness);
  vec3 tmpvar_40;
  tmpvar_40 = normalize((_WorldSpaceLightPos0.xyz + viewDir_38));
  float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_2, viewDir_38));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_40));
  float tmpvar_43;
  tmpvar_43 = ((tmpvar_39 * tmpvar_39) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = (10.0 / log2((
    ((1.0 - tmpvar_39) * 0.968)
   + 0.03)));
  tmpvar_44 = (tmpvar_45 * tmpvar_45);
  float x_46;
  x_46 = (1.0 - tmpvar_9);
  float x_47;
  x_47 = (1.0 - tmpvar_41);
  float tmpvar_48;
  tmpvar_48 = (0.5 + ((
    (2.0 * tmpvar_42)
   * tmpvar_42) * tmpvar_39));
  float x_49;
  x_49 = (1.0 - tmpvar_42);
  float x_50;
  x_50 = (1.0 - tmpvar_41);
  vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_5 * 
    (tmpvar_10 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_48 - 1.0) * ((
        ((x_46 * x_46) * x_46)
       * x_46) * x_46)))
     * 
      (1.0 + ((tmpvar_48 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
    ) * tmpvar_9)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_9 * (1.0 - tmpvar_43)) + tmpvar_43)
       * 
        ((tmpvar_41 * (1.0 - tmpvar_43)) + tmpvar_43)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_40)
      ), tmpvar_44) * ((tmpvar_44 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_9) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_6 + ((1.0 - tmpvar_6) * ((
      ((x_49 * x_49) * x_49)
     * x_49) * x_49)))
  )) + (tmpvar_11 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), vec3(
    ((((x_50 * x_50) * x_50) * x_50) * x_50)
  ))));
  vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = tmpvar_51;
  c_1.w = tmpvar_52.w;
  c_1.xyz = tmpvar_51;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 155 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_2;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  vec3 viewDir_39;
  viewDir_39 = -(tmpvar_3);
  float tmpvar_40;
  tmpvar_40 = (1.0 - _Glossiness);
  vec3 tmpvar_41;
  tmpvar_41 = normalize((_WorldSpaceLightPos0.xyz + viewDir_39));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_2, viewDir_39));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_41));
  float tmpvar_44;
  tmpvar_44 = ((tmpvar_40 * tmpvar_40) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (10.0 / log2((
    ((1.0 - tmpvar_40) * 0.968)
   + 0.03)));
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  float x_47;
  x_47 = (1.0 - tmpvar_9);
  float x_48;
  x_48 = (1.0 - tmpvar_42);
  float tmpvar_49;
  tmpvar_49 = (0.5 + ((
    (2.0 * tmpvar_43)
   * tmpvar_43) * tmpvar_40));
  float x_50;
  x_50 = (1.0 - tmpvar_43);
  float x_51;
  x_51 = (1.0 - tmpvar_42);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_5 * 
    (tmpvar_11 + (tmpvar_10 * ((
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
     * 
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
    ) * tmpvar_9)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_9 * (1.0 - tmpvar_44)) + tmpvar_44)
       * 
        ((tmpvar_42 * (1.0 - tmpvar_44)) + tmpvar_44)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_41)
      ), tmpvar_45) * ((tmpvar_45 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_9) * unity_LightGammaCorrectionConsts.x)) * tmpvar_10)
   * 
    (tmpvar_6 + ((1.0 - tmpvar_6) * ((
      ((x_50 * x_50) * x_50)
     * x_50) * x_50)))
  )) + (tmpvar_12 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), vec3(
    ((((x_51 * x_51) * x_51) * x_51) * x_51)
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = tmpvar_52;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 154 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_21;
  tmpvar_21 = (((tmpvar_18 * tmpvar_18) + (tmpvar_19 * tmpvar_19)) + (tmpvar_20 * tmpvar_20));
  vec4 tmpvar_22;
  tmpvar_22 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_18 * tmpvar_15.x) + (tmpvar_19 * tmpvar_15.y)) + (tmpvar_20 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_21)
  )) * (1.0/((1.0 + 
    (tmpvar_21 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_22.x) + (unity_LightColor[1].xyz * tmpvar_22.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_22.z)
  ) + (unity_LightColor[3].xyz * tmpvar_22.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_2;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_8);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  vec3 viewDir_38;
  viewDir_38 = -(tmpvar_3);
  float tmpvar_39;
  tmpvar_39 = (1.0 - _Glossiness);
  vec3 tmpvar_40;
  tmpvar_40 = normalize((_WorldSpaceLightPos0.xyz + viewDir_38));
  float tmpvar_41;
  tmpvar_41 = max (0.0, dot (tmpvar_2, viewDir_38));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_40));
  float tmpvar_43;
  tmpvar_43 = ((tmpvar_39 * tmpvar_39) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = (10.0 / log2((
    ((1.0 - tmpvar_39) * 0.968)
   + 0.03)));
  tmpvar_44 = (tmpvar_45 * tmpvar_45);
  float x_46;
  x_46 = (1.0 - tmpvar_9);
  float x_47;
  x_47 = (1.0 - tmpvar_41);
  float tmpvar_48;
  tmpvar_48 = (0.5 + ((
    (2.0 * tmpvar_42)
   * tmpvar_42) * tmpvar_39));
  float x_49;
  x_49 = (1.0 - tmpvar_42);
  float x_50;
  x_50 = (1.0 - tmpvar_41);
  vec3 tmpvar_51;
  tmpvar_51 = (((tmpvar_5 * 
    (tmpvar_10 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_48 - 1.0) * ((
        ((x_46 * x_46) * x_46)
       * x_46) * x_46)))
     * 
      (1.0 + ((tmpvar_48 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
    ) * tmpvar_9)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_9 * (1.0 - tmpvar_43)) + tmpvar_43)
       * 
        ((tmpvar_41 * (1.0 - tmpvar_43)) + tmpvar_43)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_40)
      ), tmpvar_44) * ((tmpvar_44 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_9) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_6 + ((1.0 - tmpvar_6) * ((
      ((x_49 * x_49) * x_49)
     * x_49) * x_49)))
  )) + (tmpvar_11 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), vec3(
    ((((x_50 * x_50) * x_50) * x_50) * x_50)
  ))));
  vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = tmpvar_51;
  c_1.w = tmpvar_52.w;
  c_1.xyz = tmpvar_51;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 155 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_24;
  tmpvar_24 = (((tmpvar_21 * tmpvar_21) + (tmpvar_22 * tmpvar_22)) + (tmpvar_23 * tmpvar_23));
  vec4 tmpvar_25;
  tmpvar_25 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_21 * tmpvar_15.x) + (tmpvar_22 * tmpvar_15.y)) + (tmpvar_23 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_24)
  )) * (1.0/((1.0 + 
    (tmpvar_24 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_25.x) + (unity_LightColor[1].xyz * tmpvar_25.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_25.z)
  ) + (unity_LightColor[3].xyz * tmpvar_25.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_2;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_10 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_11 = (tmpvar_11 * tmpvar_8);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_8);
  vec3 viewDir_39;
  viewDir_39 = -(tmpvar_3);
  float tmpvar_40;
  tmpvar_40 = (1.0 - _Glossiness);
  vec3 tmpvar_41;
  tmpvar_41 = normalize((_WorldSpaceLightPos0.xyz + viewDir_39));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_2, viewDir_39));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_41));
  float tmpvar_44;
  tmpvar_44 = ((tmpvar_40 * tmpvar_40) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (10.0 / log2((
    ((1.0 - tmpvar_40) * 0.968)
   + 0.03)));
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  float x_47;
  x_47 = (1.0 - tmpvar_9);
  float x_48;
  x_48 = (1.0 - tmpvar_42);
  float tmpvar_49;
  tmpvar_49 = (0.5 + ((
    (2.0 * tmpvar_43)
   * tmpvar_43) * tmpvar_40));
  float x_50;
  x_50 = (1.0 - tmpvar_43);
  float x_51;
  x_51 = (1.0 - tmpvar_42);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_5 * 
    (tmpvar_11 + (tmpvar_10 * ((
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
     * 
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
    ) * tmpvar_9)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_9 * (1.0 - tmpvar_44)) + tmpvar_44)
       * 
        ((tmpvar_42 * (1.0 - tmpvar_44)) + tmpvar_44)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_41)
      ), tmpvar_45) * ((tmpvar_45 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_9) * unity_LightGammaCorrectionConsts.x)) * tmpvar_10)
   * 
    (tmpvar_6 + ((1.0 - tmpvar_6) * ((
      ((x_50 * x_50) * x_50)
     * x_50) * x_50)))
  )) + (tmpvar_12 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), vec3(
    ((((x_51 * x_51) * x_51) * x_51) * x_51)
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = tmpvar_52;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 154 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_4;
  tmpvar_4 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_4.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_4.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_2;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_9);
  vec3 viewDir_39;
  viewDir_39 = -(tmpvar_3);
  float tmpvar_40;
  tmpvar_40 = (1.0 - tmpvar_4.y);
  vec3 tmpvar_41;
  tmpvar_41 = normalize((_WorldSpaceLightPos0.xyz + viewDir_39));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_2, viewDir_39));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_41));
  float tmpvar_44;
  tmpvar_44 = ((tmpvar_40 * tmpvar_40) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (10.0 / log2((
    ((1.0 - tmpvar_40) * 0.968)
   + 0.03)));
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  float x_47;
  x_47 = (1.0 - tmpvar_10);
  float x_48;
  x_48 = (1.0 - tmpvar_42);
  float tmpvar_49;
  tmpvar_49 = (0.5 + ((
    (2.0 * tmpvar_43)
   * tmpvar_43) * tmpvar_40));
  float x_50;
  x_50 = (1.0 - tmpvar_43);
  float x_51;
  x_51 = (1.0 - tmpvar_42);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_6 * 
    (tmpvar_11 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
     * 
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
    ) * tmpvar_10)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_10 * (1.0 - tmpvar_44)) + tmpvar_44)
       * 
        ((tmpvar_42 * (1.0 - tmpvar_44)) + tmpvar_44)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_41)
      ), tmpvar_45) * ((tmpvar_45 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_10) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_50 * x_50) * x_50)
     * x_50) * x_50)))
  )) + (tmpvar_12 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_4.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_51 * x_51) * x_51) * x_51) * x_51)
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = tmpvar_52;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 155 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_4;
  tmpvar_4 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_4.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_4.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_2;
  vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  tmpvar_12 = (xlv_TEXCOORD5.xyz + x1_15);
  tmpvar_11 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_12 = (tmpvar_12 * tmpvar_9);
  vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_17;
  worldNormal_17 = tmpvar_16;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_18;
    tmpvar_18 = normalize(tmpvar_16);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_18);
    vec3 tmpvar_20;
    tmpvar_20 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_18);
    bvec3 tmpvar_21;
    tmpvar_21 = greaterThan (tmpvar_18, vec3(0.0, 0.0, 0.0));
    float tmpvar_22;
    if (tmpvar_21.x) {
      tmpvar_22 = tmpvar_19.x;
    } else {
      tmpvar_22 = tmpvar_20.x;
    };
    float tmpvar_23;
    if (tmpvar_21.y) {
      tmpvar_23 = tmpvar_19.y;
    } else {
      tmpvar_23 = tmpvar_20.y;
    };
    float tmpvar_24;
    if (tmpvar_21.z) {
      tmpvar_24 = tmpvar_19.z;
    } else {
      tmpvar_24 = tmpvar_20.z;
    };
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_17 = (((
      (tmpvar_25 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_18 * 
      min (min (tmpvar_22, tmpvar_23), tmpvar_24)
    )) - tmpvar_25);
  };
  vec4 tmpvar_26;
  tmpvar_26.xyz = worldNormal_17;
  tmpvar_26.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
  vec4 tmpvar_27;
  tmpvar_27 = textureCubeLod (unity_SpecCube0, worldNormal_17, tmpvar_26.w);
  vec3 tmpvar_28;
  tmpvar_28 = ((unity_SpecCube0_HDR.x * pow (tmpvar_27.w, unity_SpecCube0_HDR.y)) * tmpvar_27.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_29;
    worldNormal_29 = tmpvar_16;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_30;
      tmpvar_30 = normalize(tmpvar_16);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_30);
      vec3 tmpvar_32;
      tmpvar_32 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_30);
      bvec3 tmpvar_33;
      tmpvar_33 = greaterThan (tmpvar_30, vec3(0.0, 0.0, 0.0));
      float tmpvar_34;
      if (tmpvar_33.x) {
        tmpvar_34 = tmpvar_31.x;
      } else {
        tmpvar_34 = tmpvar_32.x;
      };
      float tmpvar_35;
      if (tmpvar_33.y) {
        tmpvar_35 = tmpvar_31.y;
      } else {
        tmpvar_35 = tmpvar_32.y;
      };
      float tmpvar_36;
      if (tmpvar_33.z) {
        tmpvar_36 = tmpvar_31.z;
      } else {
        tmpvar_36 = tmpvar_32.z;
      };
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_29 = (((
        (tmpvar_37 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_30 * 
        min (min (tmpvar_34, tmpvar_35), tmpvar_36)
      )) - tmpvar_37);
    };
    vec4 tmpvar_38;
    tmpvar_38.xyz = worldNormal_29;
    tmpvar_38.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
    vec4 tmpvar_39;
    tmpvar_39 = textureCubeLod (unity_SpecCube1, worldNormal_29, tmpvar_38.w);
    tmpvar_13 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_39.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_39.xyz), tmpvar_28, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_13 = tmpvar_28;
  };
  tmpvar_13 = (tmpvar_13 * tmpvar_9);
  vec3 viewDir_40;
  viewDir_40 = -(tmpvar_3);
  float tmpvar_41;
  tmpvar_41 = (1.0 - tmpvar_4.y);
  vec3 tmpvar_42;
  tmpvar_42 = normalize((_WorldSpaceLightPos0.xyz + viewDir_40));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_2, viewDir_40));
  float tmpvar_44;
  tmpvar_44 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_42));
  float tmpvar_45;
  tmpvar_45 = ((tmpvar_41 * tmpvar_41) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_46;
  float tmpvar_47;
  tmpvar_47 = (10.0 / log2((
    ((1.0 - tmpvar_41) * 0.968)
   + 0.03)));
  tmpvar_46 = (tmpvar_47 * tmpvar_47);
  float x_48;
  x_48 = (1.0 - tmpvar_10);
  float x_49;
  x_49 = (1.0 - tmpvar_43);
  float tmpvar_50;
  tmpvar_50 = (0.5 + ((
    (2.0 * tmpvar_44)
   * tmpvar_44) * tmpvar_41));
  float x_51;
  x_51 = (1.0 - tmpvar_44);
  float x_52;
  x_52 = (1.0 - tmpvar_43);
  vec3 tmpvar_53;
  tmpvar_53 = (((tmpvar_6 * 
    (tmpvar_12 + (tmpvar_11 * ((
      (1.0 + ((tmpvar_50 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
     * 
      (1.0 + ((tmpvar_50 - 1.0) * ((
        ((x_49 * x_49) * x_49)
       * x_49) * x_49)))
    ) * tmpvar_10)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_10 * (1.0 - tmpvar_45)) + tmpvar_45)
       * 
        ((tmpvar_43 * (1.0 - tmpvar_45)) + tmpvar_45)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_42)
      ), tmpvar_46) * ((tmpvar_46 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_10) * unity_LightGammaCorrectionConsts.x)) * tmpvar_11)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_51 * x_51) * x_51)
     * x_51) * x_51)))
  )) + (tmpvar_13 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_4.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_52 * x_52) * x_52) * x_52) * x_52)
  ))));
  vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = tmpvar_53;
  c_1.w = tmpvar_54.w;
  c_1.xyz = tmpvar_53;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_55;
  xlat_varoutput_55.xyz = c_1.xyz;
  xlat_varoutput_55.w = 1.0;
  gl_FragData[0] = xlat_varoutput_55;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 154 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_21;
  tmpvar_21 = (((tmpvar_18 * tmpvar_18) + (tmpvar_19 * tmpvar_19)) + (tmpvar_20 * tmpvar_20));
  vec4 tmpvar_22;
  tmpvar_22 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_18 * tmpvar_15.x) + (tmpvar_19 * tmpvar_15.y)) + (tmpvar_20 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_21)
  )) * (1.0/((1.0 + 
    (tmpvar_21 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_22.x) + (unity_LightColor[1].xyz * tmpvar_22.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_22.z)
  ) + (unity_LightColor[3].xyz * tmpvar_22.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_4;
  tmpvar_4 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_4.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_4.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_2;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_9);
  vec3 viewDir_39;
  viewDir_39 = -(tmpvar_3);
  float tmpvar_40;
  tmpvar_40 = (1.0 - tmpvar_4.y);
  vec3 tmpvar_41;
  tmpvar_41 = normalize((_WorldSpaceLightPos0.xyz + viewDir_39));
  float tmpvar_42;
  tmpvar_42 = max (0.0, dot (tmpvar_2, viewDir_39));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_41));
  float tmpvar_44;
  tmpvar_44 = ((tmpvar_40 * tmpvar_40) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (10.0 / log2((
    ((1.0 - tmpvar_40) * 0.968)
   + 0.03)));
  tmpvar_45 = (tmpvar_46 * tmpvar_46);
  float x_47;
  x_47 = (1.0 - tmpvar_10);
  float x_48;
  x_48 = (1.0 - tmpvar_42);
  float tmpvar_49;
  tmpvar_49 = (0.5 + ((
    (2.0 * tmpvar_43)
   * tmpvar_43) * tmpvar_40));
  float x_50;
  x_50 = (1.0 - tmpvar_43);
  float x_51;
  x_51 = (1.0 - tmpvar_42);
  vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_6 * 
    (tmpvar_11 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_47 * x_47) * x_47)
       * x_47) * x_47)))
     * 
      (1.0 + ((tmpvar_49 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
    ) * tmpvar_10)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_10 * (1.0 - tmpvar_44)) + tmpvar_44)
       * 
        ((tmpvar_42 * (1.0 - tmpvar_44)) + tmpvar_44)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_41)
      ), tmpvar_45) * ((tmpvar_45 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_10) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_50 * x_50) * x_50)
     * x_50) * x_50)))
  )) + (tmpvar_12 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_4.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_51 * x_51) * x_51) * x_51) * x_51)
  ))));
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = tmpvar_52;
  c_1.w = tmpvar_53.w;
  c_1.xyz = tmpvar_52;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = c_1.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 155 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_24;
  tmpvar_24 = (((tmpvar_21 * tmpvar_21) + (tmpvar_22 * tmpvar_22)) + (tmpvar_23 * tmpvar_23));
  vec4 tmpvar_25;
  tmpvar_25 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_21 * tmpvar_15.x) + (tmpvar_22 * tmpvar_15.y)) + (tmpvar_23 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_24)
  )) * (1.0/((1.0 + 
    (tmpvar_24 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_25.x) + (unity_LightColor[1].xyz * tmpvar_25.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_25.z)
  ) + (unity_LightColor[3].xyz * tmpvar_25.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_4;
  tmpvar_4 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_4.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_4.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_2;
  vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  tmpvar_12 = (xlv_TEXCOORD5.xyz + x1_15);
  tmpvar_11 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_12 = (tmpvar_12 * tmpvar_9);
  vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_3 - (2.0 * (
    dot (tmpvar_2, tmpvar_3)
   * tmpvar_2)));
  vec3 worldNormal_17;
  worldNormal_17 = tmpvar_16;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_18;
    tmpvar_18 = normalize(tmpvar_16);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_18);
    vec3 tmpvar_20;
    tmpvar_20 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_18);
    bvec3 tmpvar_21;
    tmpvar_21 = greaterThan (tmpvar_18, vec3(0.0, 0.0, 0.0));
    float tmpvar_22;
    if (tmpvar_21.x) {
      tmpvar_22 = tmpvar_19.x;
    } else {
      tmpvar_22 = tmpvar_20.x;
    };
    float tmpvar_23;
    if (tmpvar_21.y) {
      tmpvar_23 = tmpvar_19.y;
    } else {
      tmpvar_23 = tmpvar_20.y;
    };
    float tmpvar_24;
    if (tmpvar_21.z) {
      tmpvar_24 = tmpvar_19.z;
    } else {
      tmpvar_24 = tmpvar_20.z;
    };
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_17 = (((
      (tmpvar_25 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_18 * 
      min (min (tmpvar_22, tmpvar_23), tmpvar_24)
    )) - tmpvar_25);
  };
  vec4 tmpvar_26;
  tmpvar_26.xyz = worldNormal_17;
  tmpvar_26.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
  vec4 tmpvar_27;
  tmpvar_27 = textureCubeLod (unity_SpecCube0, worldNormal_17, tmpvar_26.w);
  vec3 tmpvar_28;
  tmpvar_28 = ((unity_SpecCube0_HDR.x * pow (tmpvar_27.w, unity_SpecCube0_HDR.y)) * tmpvar_27.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_29;
    worldNormal_29 = tmpvar_16;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_30;
      tmpvar_30 = normalize(tmpvar_16);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_30);
      vec3 tmpvar_32;
      tmpvar_32 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_30);
      bvec3 tmpvar_33;
      tmpvar_33 = greaterThan (tmpvar_30, vec3(0.0, 0.0, 0.0));
      float tmpvar_34;
      if (tmpvar_33.x) {
        tmpvar_34 = tmpvar_31.x;
      } else {
        tmpvar_34 = tmpvar_32.x;
      };
      float tmpvar_35;
      if (tmpvar_33.y) {
        tmpvar_35 = tmpvar_31.y;
      } else {
        tmpvar_35 = tmpvar_32.y;
      };
      float tmpvar_36;
      if (tmpvar_33.z) {
        tmpvar_36 = tmpvar_31.z;
      } else {
        tmpvar_36 = tmpvar_32.z;
      };
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_29 = (((
        (tmpvar_37 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_30 * 
        min (min (tmpvar_34, tmpvar_35), tmpvar_36)
      )) - tmpvar_37);
    };
    vec4 tmpvar_38;
    tmpvar_38.xyz = worldNormal_29;
    tmpvar_38.w = (pow ((1.0 - tmpvar_4.y), 0.75) * 7.0);
    vec4 tmpvar_39;
    tmpvar_39 = textureCubeLod (unity_SpecCube1, worldNormal_29, tmpvar_38.w);
    tmpvar_13 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_39.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_39.xyz), tmpvar_28, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_13 = tmpvar_28;
  };
  tmpvar_13 = (tmpvar_13 * tmpvar_9);
  vec3 viewDir_40;
  viewDir_40 = -(tmpvar_3);
  float tmpvar_41;
  tmpvar_41 = (1.0 - tmpvar_4.y);
  vec3 tmpvar_42;
  tmpvar_42 = normalize((_WorldSpaceLightPos0.xyz + viewDir_40));
  float tmpvar_43;
  tmpvar_43 = max (0.0, dot (tmpvar_2, viewDir_40));
  float tmpvar_44;
  tmpvar_44 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_42));
  float tmpvar_45;
  tmpvar_45 = ((tmpvar_41 * tmpvar_41) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_46;
  float tmpvar_47;
  tmpvar_47 = (10.0 / log2((
    ((1.0 - tmpvar_41) * 0.968)
   + 0.03)));
  tmpvar_46 = (tmpvar_47 * tmpvar_47);
  float x_48;
  x_48 = (1.0 - tmpvar_10);
  float x_49;
  x_49 = (1.0 - tmpvar_43);
  float tmpvar_50;
  tmpvar_50 = (0.5 + ((
    (2.0 * tmpvar_44)
   * tmpvar_44) * tmpvar_41));
  float x_51;
  x_51 = (1.0 - tmpvar_44);
  float x_52;
  x_52 = (1.0 - tmpvar_43);
  vec3 tmpvar_53;
  tmpvar_53 = (((tmpvar_6 * 
    (tmpvar_12 + (tmpvar_11 * ((
      (1.0 + ((tmpvar_50 - 1.0) * ((
        ((x_48 * x_48) * x_48)
       * x_48) * x_48)))
     * 
      (1.0 + ((tmpvar_50 - 1.0) * ((
        ((x_49 * x_49) * x_49)
       * x_49) * x_49)))
    ) * tmpvar_10)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_10 * (1.0 - tmpvar_45)) + tmpvar_45)
       * 
        ((tmpvar_43 * (1.0 - tmpvar_45)) + tmpvar_45)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_42)
      ), tmpvar_46) * ((tmpvar_46 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_10) * unity_LightGammaCorrectionConsts.x)) * tmpvar_11)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_51 * x_51) * x_51)
     * x_51) * x_51)))
  )) + (tmpvar_13 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_4.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_52 * x_52) * x_52) * x_52) * x_52)
  ))));
  vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = tmpvar_53;
  c_1.w = tmpvar_54.w;
  c_1.xyz = tmpvar_53;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_55;
  xlat_varoutput_55.xyz = c_1.xyz;
  xlat_varoutput_55.w = 1.0;
  gl_FragData[0] = xlat_varoutput_55;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 158 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_6 * tmpvar_8) * tmpvar_3);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - tmpvar_8) + (tmpvar_3 * tmpvar_8));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_2;
  vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_13 = (xlv_TEXCOORD5.xyz + x1_16);
  tmpvar_13 = (tmpvar_13 * tmpvar_11);
  vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 - (2.0 * (
    dot (tmpvar_2, tmpvar_5)
   * tmpvar_2)));
  vec3 worldNormal_18;
  worldNormal_18 = tmpvar_17;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_19;
    tmpvar_19 = normalize(tmpvar_17);
    vec3 tmpvar_20;
    tmpvar_20 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_19);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_19);
    bvec3 tmpvar_22;
    tmpvar_22 = greaterThan (tmpvar_19, vec3(0.0, 0.0, 0.0));
    float tmpvar_23;
    if (tmpvar_22.x) {
      tmpvar_23 = tmpvar_20.x;
    } else {
      tmpvar_23 = tmpvar_21.x;
    };
    float tmpvar_24;
    if (tmpvar_22.y) {
      tmpvar_24 = tmpvar_20.y;
    } else {
      tmpvar_24 = tmpvar_21.y;
    };
    float tmpvar_25;
    if (tmpvar_22.z) {
      tmpvar_25 = tmpvar_20.z;
    } else {
      tmpvar_25 = tmpvar_21.z;
    };
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_18 = (((
      (tmpvar_26 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_19 * 
      min (min (tmpvar_23, tmpvar_24), tmpvar_25)
    )) - tmpvar_26);
  };
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldNormal_18;
  tmpvar_27.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldNormal_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_30;
    worldNormal_30 = tmpvar_17;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_31;
      tmpvar_31 = normalize(tmpvar_17);
      vec3 tmpvar_32;
      tmpvar_32 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_31);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_31);
      bvec3 tmpvar_34;
      tmpvar_34 = greaterThan (tmpvar_31, vec3(0.0, 0.0, 0.0));
      float tmpvar_35;
      if (tmpvar_34.x) {
        tmpvar_35 = tmpvar_32.x;
      } else {
        tmpvar_35 = tmpvar_33.x;
      };
      float tmpvar_36;
      if (tmpvar_34.y) {
        tmpvar_36 = tmpvar_32.y;
      } else {
        tmpvar_36 = tmpvar_33.y;
      };
      float tmpvar_37;
      if (tmpvar_34.z) {
        tmpvar_37 = tmpvar_32.z;
      } else {
        tmpvar_37 = tmpvar_33.z;
      };
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_30 = (((
        (tmpvar_38 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_31 * 
        min (min (tmpvar_35, tmpvar_36), tmpvar_37)
      )) - tmpvar_38);
    };
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldNormal_30;
    tmpvar_39.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldNormal_30, tmpvar_39.w);
    tmpvar_14 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_14 = tmpvar_29;
  };
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_5);
  float tmpvar_42;
  tmpvar_42 = (1.0 - _Glossiness);
  vec3 tmpvar_43;
  tmpvar_43 = normalize((_WorldSpaceLightPos0.xyz + viewDir_41));
  float tmpvar_44;
  tmpvar_44 = max (0.0, dot (tmpvar_2, viewDir_41));
  float tmpvar_45;
  tmpvar_45 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_43));
  float tmpvar_46;
  tmpvar_46 = ((tmpvar_42 * tmpvar_42) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (10.0 / log2((
    ((1.0 - tmpvar_42) * 0.968)
   + 0.03)));
  tmpvar_47 = (tmpvar_48 * tmpvar_48);
  float x_49;
  x_49 = (1.0 - tmpvar_12);
  float x_50;
  x_50 = (1.0 - tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (0.5 + ((
    (2.0 * tmpvar_45)
   * tmpvar_45) * tmpvar_42));
  float x_52;
  x_52 = (1.0 - tmpvar_45);
  float x_53;
  x_53 = (1.0 - tmpvar_44);
  vec3 tmpvar_54;
  tmpvar_54 = (((tmpvar_9 * 
    (tmpvar_13 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_51 - 1.0) * ((
        ((x_49 * x_49) * x_49)
       * x_49) * x_49)))
     * 
      (1.0 + ((tmpvar_51 - 1.0) * ((
        ((x_50 * x_50) * x_50)
       * x_50) * x_50)))
    ) * tmpvar_12)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_12 * (1.0 - tmpvar_46)) + tmpvar_46)
       * 
        ((tmpvar_44 * (1.0 - tmpvar_46)) + tmpvar_46)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_43)
      ), tmpvar_47) * ((tmpvar_47 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_12) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_52 * x_52) * x_52)
     * x_52) * x_52)))
  )) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_53 * x_53) * x_53) * x_53) * x_53)
  ))));
  vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = tmpvar_54;
  c_1.w = tmpvar_55.w;
  c_1.xyz = tmpvar_54;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = tmpvar_10;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 159 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_6 * tmpvar_8) * tmpvar_3);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - tmpvar_8) + (tmpvar_3 * tmpvar_8));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_2;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_14 = (xlv_TEXCOORD5.xyz + x1_17);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_5 - (2.0 * (
    dot (tmpvar_2, tmpvar_5)
   * tmpvar_2)));
  vec3 worldNormal_19;
  worldNormal_19 = tmpvar_18;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_18);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    vec3 tmpvar_27;
    tmpvar_27 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_19 = (((
      (tmpvar_27 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_20 * 
      min (min (tmpvar_24, tmpvar_25), tmpvar_26)
    )) - tmpvar_27);
  };
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_19;
  tmpvar_28.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldNormal_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_31;
    worldNormal_31 = tmpvar_18;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(tmpvar_18);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      vec3 tmpvar_39;
      tmpvar_39 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_31 = (((
        (tmpvar_39 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_32 * 
        min (min (tmpvar_36, tmpvar_37), tmpvar_38)
      )) - tmpvar_39);
    };
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldNormal_31;
    tmpvar_40.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldNormal_31, tmpvar_40.w);
    tmpvar_15 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_15 = tmpvar_30;
  };
  tmpvar_15 = (tmpvar_15 * tmpvar_11);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_5);
  float tmpvar_43;
  tmpvar_43 = (1.0 - _Glossiness);
  vec3 tmpvar_44;
  tmpvar_44 = normalize((_WorldSpaceLightPos0.xyz + viewDir_42));
  float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_2, viewDir_42));
  float tmpvar_46;
  tmpvar_46 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_44));
  float tmpvar_47;
  tmpvar_47 = ((tmpvar_43 * tmpvar_43) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_48;
  float tmpvar_49;
  tmpvar_49 = (10.0 / log2((
    ((1.0 - tmpvar_43) * 0.968)
   + 0.03)));
  tmpvar_48 = (tmpvar_49 * tmpvar_49);
  float x_50;
  x_50 = (1.0 - tmpvar_12);
  float x_51;
  x_51 = (1.0 - tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (0.5 + ((
    (2.0 * tmpvar_46)
   * tmpvar_46) * tmpvar_43));
  float x_53;
  x_53 = (1.0 - tmpvar_46);
  float x_54;
  x_54 = (1.0 - tmpvar_45);
  vec3 tmpvar_55;
  tmpvar_55 = (((tmpvar_9 * 
    (tmpvar_14 + (tmpvar_13 * ((
      (1.0 + ((tmpvar_52 - 1.0) * ((
        ((x_50 * x_50) * x_50)
       * x_50) * x_50)))
     * 
      (1.0 + ((tmpvar_52 - 1.0) * ((
        ((x_51 * x_51) * x_51)
       * x_51) * x_51)))
    ) * tmpvar_12)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_12 * (1.0 - tmpvar_47)) + tmpvar_47)
       * 
        ((tmpvar_45 * (1.0 - tmpvar_47)) + tmpvar_47)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_44)
      ), tmpvar_48) * ((tmpvar_48 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_12) * unity_LightGammaCorrectionConsts.x)) * tmpvar_13)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_53 * x_53) * x_53)
     * x_53) * x_53)))
  )) + (tmpvar_15 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_54 * x_54) * x_54) * x_54) * x_54)
  ))));
  vec4 tmpvar_56;
  tmpvar_56.w = 1.0;
  tmpvar_56.xyz = tmpvar_55;
  c_1.w = tmpvar_56.w;
  c_1.xyz = tmpvar_55;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = tmpvar_10;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 158 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_21;
  tmpvar_21 = (((tmpvar_18 * tmpvar_18) + (tmpvar_19 * tmpvar_19)) + (tmpvar_20 * tmpvar_20));
  vec4 tmpvar_22;
  tmpvar_22 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_18 * tmpvar_15.x) + (tmpvar_19 * tmpvar_15.y)) + (tmpvar_20 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_21)
  )) * (1.0/((1.0 + 
    (tmpvar_21 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_22.x) + (unity_LightColor[1].xyz * tmpvar_22.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_22.z)
  ) + (unity_LightColor[3].xyz * tmpvar_22.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_6 * tmpvar_8) * tmpvar_3);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - tmpvar_8) + (tmpvar_3 * tmpvar_8));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_2;
  vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_13 = (xlv_TEXCOORD5.xyz + x1_16);
  tmpvar_13 = (tmpvar_13 * tmpvar_11);
  vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_5 - (2.0 * (
    dot (tmpvar_2, tmpvar_5)
   * tmpvar_2)));
  vec3 worldNormal_18;
  worldNormal_18 = tmpvar_17;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_19;
    tmpvar_19 = normalize(tmpvar_17);
    vec3 tmpvar_20;
    tmpvar_20 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_19);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_19);
    bvec3 tmpvar_22;
    tmpvar_22 = greaterThan (tmpvar_19, vec3(0.0, 0.0, 0.0));
    float tmpvar_23;
    if (tmpvar_22.x) {
      tmpvar_23 = tmpvar_20.x;
    } else {
      tmpvar_23 = tmpvar_21.x;
    };
    float tmpvar_24;
    if (tmpvar_22.y) {
      tmpvar_24 = tmpvar_20.y;
    } else {
      tmpvar_24 = tmpvar_21.y;
    };
    float tmpvar_25;
    if (tmpvar_22.z) {
      tmpvar_25 = tmpvar_20.z;
    } else {
      tmpvar_25 = tmpvar_21.z;
    };
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_18 = (((
      (tmpvar_26 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_19 * 
      min (min (tmpvar_23, tmpvar_24), tmpvar_25)
    )) - tmpvar_26);
  };
  vec4 tmpvar_27;
  tmpvar_27.xyz = worldNormal_18;
  tmpvar_27.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_28;
  tmpvar_28 = textureCubeLod (unity_SpecCube0, worldNormal_18, tmpvar_27.w);
  vec3 tmpvar_29;
  tmpvar_29 = ((unity_SpecCube0_HDR.x * pow (tmpvar_28.w, unity_SpecCube0_HDR.y)) * tmpvar_28.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_30;
    worldNormal_30 = tmpvar_17;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_31;
      tmpvar_31 = normalize(tmpvar_17);
      vec3 tmpvar_32;
      tmpvar_32 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_31);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_31);
      bvec3 tmpvar_34;
      tmpvar_34 = greaterThan (tmpvar_31, vec3(0.0, 0.0, 0.0));
      float tmpvar_35;
      if (tmpvar_34.x) {
        tmpvar_35 = tmpvar_32.x;
      } else {
        tmpvar_35 = tmpvar_33.x;
      };
      float tmpvar_36;
      if (tmpvar_34.y) {
        tmpvar_36 = tmpvar_32.y;
      } else {
        tmpvar_36 = tmpvar_33.y;
      };
      float tmpvar_37;
      if (tmpvar_34.z) {
        tmpvar_37 = tmpvar_32.z;
      } else {
        tmpvar_37 = tmpvar_33.z;
      };
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_30 = (((
        (tmpvar_38 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_31 * 
        min (min (tmpvar_35, tmpvar_36), tmpvar_37)
      )) - tmpvar_38);
    };
    vec4 tmpvar_39;
    tmpvar_39.xyz = worldNormal_30;
    tmpvar_39.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_40;
    tmpvar_40 = textureCubeLod (unity_SpecCube1, worldNormal_30, tmpvar_39.w);
    tmpvar_14 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_40.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_40.xyz), tmpvar_29, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_14 = tmpvar_29;
  };
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  vec3 viewDir_41;
  viewDir_41 = -(tmpvar_5);
  float tmpvar_42;
  tmpvar_42 = (1.0 - _Glossiness);
  vec3 tmpvar_43;
  tmpvar_43 = normalize((_WorldSpaceLightPos0.xyz + viewDir_41));
  float tmpvar_44;
  tmpvar_44 = max (0.0, dot (tmpvar_2, viewDir_41));
  float tmpvar_45;
  tmpvar_45 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_43));
  float tmpvar_46;
  tmpvar_46 = ((tmpvar_42 * tmpvar_42) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_47;
  float tmpvar_48;
  tmpvar_48 = (10.0 / log2((
    ((1.0 - tmpvar_42) * 0.968)
   + 0.03)));
  tmpvar_47 = (tmpvar_48 * tmpvar_48);
  float x_49;
  x_49 = (1.0 - tmpvar_12);
  float x_50;
  x_50 = (1.0 - tmpvar_44);
  float tmpvar_51;
  tmpvar_51 = (0.5 + ((
    (2.0 * tmpvar_45)
   * tmpvar_45) * tmpvar_42));
  float x_52;
  x_52 = (1.0 - tmpvar_45);
  float x_53;
  x_53 = (1.0 - tmpvar_44);
  vec3 tmpvar_54;
  tmpvar_54 = (((tmpvar_9 * 
    (tmpvar_13 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_51 - 1.0) * ((
        ((x_49 * x_49) * x_49)
       * x_49) * x_49)))
     * 
      (1.0 + ((tmpvar_51 - 1.0) * ((
        ((x_50 * x_50) * x_50)
       * x_50) * x_50)))
    ) * tmpvar_12)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_12 * (1.0 - tmpvar_46)) + tmpvar_46)
       * 
        ((tmpvar_44 * (1.0 - tmpvar_46)) + tmpvar_46)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_43)
      ), tmpvar_47) * ((tmpvar_47 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_12) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_52 * x_52) * x_52)
     * x_52) * x_52)))
  )) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_53 * x_53) * x_53) * x_53) * x_53)
  ))));
  vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = tmpvar_54;
  c_1.w = tmpvar_55.w;
  c_1.xyz = tmpvar_54;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = tmpvar_10;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 159 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec4 o_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_9 * 0.5);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_9.zw;
  vec3 x2_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_20);
  x2_19.y = dot (unity_SHBg, tmpvar_20);
  x2_19.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_6.xyz = (x2_19 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_24;
  tmpvar_24 = (((tmpvar_21 * tmpvar_21) + (tmpvar_22 * tmpvar_22)) + (tmpvar_23 * tmpvar_23));
  vec4 tmpvar_25;
  tmpvar_25 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_21 * tmpvar_15.x) + (tmpvar_22 * tmpvar_15.y)) + (tmpvar_23 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_24)
  )) * (1.0/((1.0 + 
    (tmpvar_24 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_25.x) + (unity_LightColor[1].xyz * tmpvar_25.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_25.z)
  ) + (unity_LightColor[3].xyz * tmpvar_25.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_16;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_6, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_6 * tmpvar_8) * tmpvar_3);
  float tmpvar_10;
  tmpvar_10 = ((1.0 - tmpvar_8) + (tmpvar_3 * tmpvar_8));
  float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_2, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_13;
  vec3 tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_15 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_2;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_14 = (xlv_TEXCOORD5.xyz + x1_17);
  tmpvar_13 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_14 = (tmpvar_14 * tmpvar_11);
  vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_5 - (2.0 * (
    dot (tmpvar_2, tmpvar_5)
   * tmpvar_2)));
  vec3 worldNormal_19;
  worldNormal_19 = tmpvar_18;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_20;
    tmpvar_20 = normalize(tmpvar_18);
    vec3 tmpvar_21;
    tmpvar_21 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_20);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_20);
    bvec3 tmpvar_23;
    tmpvar_23 = greaterThan (tmpvar_20, vec3(0.0, 0.0, 0.0));
    float tmpvar_24;
    if (tmpvar_23.x) {
      tmpvar_24 = tmpvar_21.x;
    } else {
      tmpvar_24 = tmpvar_22.x;
    };
    float tmpvar_25;
    if (tmpvar_23.y) {
      tmpvar_25 = tmpvar_21.y;
    } else {
      tmpvar_25 = tmpvar_22.y;
    };
    float tmpvar_26;
    if (tmpvar_23.z) {
      tmpvar_26 = tmpvar_21.z;
    } else {
      tmpvar_26 = tmpvar_22.z;
    };
    vec3 tmpvar_27;
    tmpvar_27 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_19 = (((
      (tmpvar_27 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_20 * 
      min (min (tmpvar_24, tmpvar_25), tmpvar_26)
    )) - tmpvar_27);
  };
  vec4 tmpvar_28;
  tmpvar_28.xyz = worldNormal_19;
  tmpvar_28.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_29;
  tmpvar_29 = textureCubeLod (unity_SpecCube0, worldNormal_19, tmpvar_28.w);
  vec3 tmpvar_30;
  tmpvar_30 = ((unity_SpecCube0_HDR.x * pow (tmpvar_29.w, unity_SpecCube0_HDR.y)) * tmpvar_29.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_31;
    worldNormal_31 = tmpvar_18;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_32;
      tmpvar_32 = normalize(tmpvar_18);
      vec3 tmpvar_33;
      tmpvar_33 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_32);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_32);
      bvec3 tmpvar_35;
      tmpvar_35 = greaterThan (tmpvar_32, vec3(0.0, 0.0, 0.0));
      float tmpvar_36;
      if (tmpvar_35.x) {
        tmpvar_36 = tmpvar_33.x;
      } else {
        tmpvar_36 = tmpvar_34.x;
      };
      float tmpvar_37;
      if (tmpvar_35.y) {
        tmpvar_37 = tmpvar_33.y;
      } else {
        tmpvar_37 = tmpvar_34.y;
      };
      float tmpvar_38;
      if (tmpvar_35.z) {
        tmpvar_38 = tmpvar_33.z;
      } else {
        tmpvar_38 = tmpvar_34.z;
      };
      vec3 tmpvar_39;
      tmpvar_39 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_31 = (((
        (tmpvar_39 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_32 * 
        min (min (tmpvar_36, tmpvar_37), tmpvar_38)
      )) - tmpvar_39);
    };
    vec4 tmpvar_40;
    tmpvar_40.xyz = worldNormal_31;
    tmpvar_40.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_41;
    tmpvar_41 = textureCubeLod (unity_SpecCube1, worldNormal_31, tmpvar_40.w);
    tmpvar_15 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_41.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_41.xyz), tmpvar_30, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_15 = tmpvar_30;
  };
  tmpvar_15 = (tmpvar_15 * tmpvar_11);
  vec3 viewDir_42;
  viewDir_42 = -(tmpvar_5);
  float tmpvar_43;
  tmpvar_43 = (1.0 - _Glossiness);
  vec3 tmpvar_44;
  tmpvar_44 = normalize((_WorldSpaceLightPos0.xyz + viewDir_42));
  float tmpvar_45;
  tmpvar_45 = max (0.0, dot (tmpvar_2, viewDir_42));
  float tmpvar_46;
  tmpvar_46 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_44));
  float tmpvar_47;
  tmpvar_47 = ((tmpvar_43 * tmpvar_43) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_48;
  float tmpvar_49;
  tmpvar_49 = (10.0 / log2((
    ((1.0 - tmpvar_43) * 0.968)
   + 0.03)));
  tmpvar_48 = (tmpvar_49 * tmpvar_49);
  float x_50;
  x_50 = (1.0 - tmpvar_12);
  float x_51;
  x_51 = (1.0 - tmpvar_45);
  float tmpvar_52;
  tmpvar_52 = (0.5 + ((
    (2.0 * tmpvar_46)
   * tmpvar_46) * tmpvar_43));
  float x_53;
  x_53 = (1.0 - tmpvar_46);
  float x_54;
  x_54 = (1.0 - tmpvar_45);
  vec3 tmpvar_55;
  tmpvar_55 = (((tmpvar_9 * 
    (tmpvar_14 + (tmpvar_13 * ((
      (1.0 + ((tmpvar_52 - 1.0) * ((
        ((x_50 * x_50) * x_50)
       * x_50) * x_50)))
     * 
      (1.0 + ((tmpvar_52 - 1.0) * ((
        ((x_51 * x_51) * x_51)
       * x_51) * x_51)))
    ) * tmpvar_12)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_12 * (1.0 - tmpvar_47)) + tmpvar_47)
       * 
        ((tmpvar_45 * (1.0 - tmpvar_47)) + tmpvar_47)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_2, tmpvar_44)
      ), tmpvar_48) * ((tmpvar_48 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_12) * unity_LightGammaCorrectionConsts.x)) * tmpvar_13)
   * 
    (tmpvar_7 + ((1.0 - tmpvar_7) * ((
      ((x_53 * x_53) * x_53)
     * x_53) * x_53)))
  )) + (tmpvar_15 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_54 * x_54) * x_54) * x_54) * x_54)
  ))));
  vec4 tmpvar_56;
  tmpvar_56.w = 1.0;
  tmpvar_56.xyz = tmpvar_55;
  c_1.w = tmpvar_56.w;
  c_1.xyz = tmpvar_55;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = tmpvar_10;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 162 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.xy = (normal_6.xy * _BumpScale);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize((normal_6 * tmpvar_5));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_9;
  tmpvar_9 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_9.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_9.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_7;
  vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_16 = (xlv_TEXCOORD5.xyz + x1_19);
  tmpvar_16 = (tmpvar_16 * tmpvar_14);
  vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 worldNormal_21;
  worldNormal_21 = tmpvar_20;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_22;
    tmpvar_22 = normalize(tmpvar_20);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_22);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_22);
    bvec3 tmpvar_25;
    tmpvar_25 = greaterThan (tmpvar_22, vec3(0.0, 0.0, 0.0));
    float tmpvar_26;
    if (tmpvar_25.x) {
      tmpvar_26 = tmpvar_23.x;
    } else {
      tmpvar_26 = tmpvar_24.x;
    };
    float tmpvar_27;
    if (tmpvar_25.y) {
      tmpvar_27 = tmpvar_23.y;
    } else {
      tmpvar_27 = tmpvar_24.y;
    };
    float tmpvar_28;
    if (tmpvar_25.z) {
      tmpvar_28 = tmpvar_23.z;
    } else {
      tmpvar_28 = tmpvar_24.z;
    };
    vec3 tmpvar_29;
    tmpvar_29 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_21 = (((
      (tmpvar_29 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_22 * 
      min (min (tmpvar_26, tmpvar_27), tmpvar_28)
    )) - tmpvar_29);
  };
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_21;
  tmpvar_30.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldNormal_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_33;
    worldNormal_33 = tmpvar_20;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_34;
      tmpvar_34 = normalize(tmpvar_20);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_34);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_34);
      bvec3 tmpvar_37;
      tmpvar_37 = greaterThan (tmpvar_34, vec3(0.0, 0.0, 0.0));
      float tmpvar_38;
      if (tmpvar_37.x) {
        tmpvar_38 = tmpvar_35.x;
      } else {
        tmpvar_38 = tmpvar_36.x;
      };
      float tmpvar_39;
      if (tmpvar_37.y) {
        tmpvar_39 = tmpvar_35.y;
      } else {
        tmpvar_39 = tmpvar_36.y;
      };
      float tmpvar_40;
      if (tmpvar_37.z) {
        tmpvar_40 = tmpvar_35.z;
      } else {
        tmpvar_40 = tmpvar_36.z;
      };
      vec3 tmpvar_41;
      tmpvar_41 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_33 = (((
        (tmpvar_41 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_34 * 
        min (min (tmpvar_38, tmpvar_39), tmpvar_40)
      )) - tmpvar_41);
    };
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldNormal_33;
    tmpvar_42.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldNormal_33, tmpvar_42.w);
    tmpvar_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_17 = tmpvar_32;
  };
  tmpvar_17 = (tmpvar_17 * tmpvar_14);
  vec3 viewDir_44;
  viewDir_44 = -(tmpvar_8);
  float tmpvar_45;
  tmpvar_45 = (1.0 - tmpvar_9.y);
  vec3 tmpvar_46;
  tmpvar_46 = normalize((_WorldSpaceLightPos0.xyz + viewDir_44));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, viewDir_44));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = ((tmpvar_45 * tmpvar_45) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = (10.0 / log2((
    ((1.0 - tmpvar_45) * 0.968)
   + 0.03)));
  tmpvar_50 = (tmpvar_51 * tmpvar_51);
  float x_52;
  x_52 = (1.0 - tmpvar_15);
  float x_53;
  x_53 = (1.0 - tmpvar_47);
  float tmpvar_54;
  tmpvar_54 = (0.5 + ((
    (2.0 * tmpvar_48)
   * tmpvar_48) * tmpvar_45));
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float x_56;
  x_56 = (1.0 - tmpvar_47);
  vec3 tmpvar_57;
  tmpvar_57 = (((tmpvar_11 * 
    (tmpvar_16 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_54 - 1.0) * ((
        ((x_52 * x_52) * x_52)
       * x_52) * x_52)))
     * 
      (1.0 + ((tmpvar_54 - 1.0) * ((
        ((x_53 * x_53) * x_53)
       * x_53) * x_53)))
    ) * tmpvar_15)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_15 * (1.0 - tmpvar_49)) + tmpvar_49)
       * 
        ((tmpvar_47 * (1.0 - tmpvar_49)) + tmpvar_49)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_7, tmpvar_46)
      ), tmpvar_50) * ((tmpvar_50 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_15) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_55 * x_55) * x_55)
     * x_55) * x_55)))
  )) + (tmpvar_17 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_9.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_56 * x_56) * x_56) * x_56) * x_56)
  ))));
  vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = tmpvar_57;
  c_1.w = tmpvar_58.w;
  c_1.xyz = tmpvar_57;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_59;
  xlat_varoutput_59.xyz = c_1.xyz;
  xlat_varoutput_59.w = 1.0;
  gl_FragData[0] = xlat_varoutput_59;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 163 math, 7 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_9 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_9.zw;
  vec3 x2_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_30);
  x2_29.y = dot (unity_SHBg, tmpvar_30);
  x2_29.z = dot (unity_SHBb, tmpvar_30);
  tmpvar_6.xyz = (x2_29 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.xy = (normal_6.xy * _BumpScale);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize((normal_6 * tmpvar_5));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_9;
  tmpvar_9 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_9.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_9.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_18 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_7;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_17 = (xlv_TEXCOORD5.xyz + x1_20);
  tmpvar_16 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_17 = (tmpvar_17 * tmpvar_14);
  vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 worldNormal_22;
  worldNormal_22 = tmpvar_21;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_23;
    tmpvar_23 = normalize(tmpvar_21);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_23);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_23);
    bvec3 tmpvar_26;
    tmpvar_26 = greaterThan (tmpvar_23, vec3(0.0, 0.0, 0.0));
    float tmpvar_27;
    if (tmpvar_26.x) {
      tmpvar_27 = tmpvar_24.x;
    } else {
      tmpvar_27 = tmpvar_25.x;
    };
    float tmpvar_28;
    if (tmpvar_26.y) {
      tmpvar_28 = tmpvar_24.y;
    } else {
      tmpvar_28 = tmpvar_25.y;
    };
    float tmpvar_29;
    if (tmpvar_26.z) {
      tmpvar_29 = tmpvar_24.z;
    } else {
      tmpvar_29 = tmpvar_25.z;
    };
    vec3 tmpvar_30;
    tmpvar_30 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_22 = (((
      (tmpvar_30 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_23 * 
      min (min (tmpvar_27, tmpvar_28), tmpvar_29)
    )) - tmpvar_30);
  };
  vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_22;
  tmpvar_31.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
  vec4 tmpvar_32;
  tmpvar_32 = textureCubeLod (unity_SpecCube0, worldNormal_22, tmpvar_31.w);
  vec3 tmpvar_33;
  tmpvar_33 = ((unity_SpecCube0_HDR.x * pow (tmpvar_32.w, unity_SpecCube0_HDR.y)) * tmpvar_32.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_34;
    worldNormal_34 = tmpvar_21;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_35;
      tmpvar_35 = normalize(tmpvar_21);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
      bvec3 tmpvar_38;
      tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
      float tmpvar_39;
      if (tmpvar_38.x) {
        tmpvar_39 = tmpvar_36.x;
      } else {
        tmpvar_39 = tmpvar_37.x;
      };
      float tmpvar_40;
      if (tmpvar_38.y) {
        tmpvar_40 = tmpvar_36.y;
      } else {
        tmpvar_40 = tmpvar_37.y;
      };
      float tmpvar_41;
      if (tmpvar_38.z) {
        tmpvar_41 = tmpvar_36.z;
      } else {
        tmpvar_41 = tmpvar_37.z;
      };
      vec3 tmpvar_42;
      tmpvar_42 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_34 = (((
        (tmpvar_42 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_35 * 
        min (min (tmpvar_39, tmpvar_40), tmpvar_41)
      )) - tmpvar_42);
    };
    vec4 tmpvar_43;
    tmpvar_43.xyz = worldNormal_34;
    tmpvar_43.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
    vec4 tmpvar_44;
    tmpvar_44 = textureCubeLod (unity_SpecCube1, worldNormal_34, tmpvar_43.w);
    tmpvar_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_44.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_44.xyz), tmpvar_33, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_18 = tmpvar_33;
  };
  tmpvar_18 = (tmpvar_18 * tmpvar_14);
  vec3 viewDir_45;
  viewDir_45 = -(tmpvar_8);
  float tmpvar_46;
  tmpvar_46 = (1.0 - tmpvar_9.y);
  vec3 tmpvar_47;
  tmpvar_47 = normalize((_WorldSpaceLightPos0.xyz + viewDir_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, viewDir_45));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_47));
  float tmpvar_50;
  tmpvar_50 = ((tmpvar_46 * tmpvar_46) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = (10.0 / log2((
    ((1.0 - tmpvar_46) * 0.968)
   + 0.03)));
  tmpvar_51 = (tmpvar_52 * tmpvar_52);
  float x_53;
  x_53 = (1.0 - tmpvar_15);
  float x_54;
  x_54 = (1.0 - tmpvar_48);
  float tmpvar_55;
  tmpvar_55 = (0.5 + ((
    (2.0 * tmpvar_49)
   * tmpvar_49) * tmpvar_46));
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float x_57;
  x_57 = (1.0 - tmpvar_48);
  vec3 tmpvar_58;
  tmpvar_58 = (((tmpvar_11 * 
    (tmpvar_17 + (tmpvar_16 * ((
      (1.0 + ((tmpvar_55 - 1.0) * ((
        ((x_53 * x_53) * x_53)
       * x_53) * x_53)))
     * 
      (1.0 + ((tmpvar_55 - 1.0) * ((
        ((x_54 * x_54) * x_54)
       * x_54) * x_54)))
    ) * tmpvar_15)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_15 * (1.0 - tmpvar_50)) + tmpvar_50)
       * 
        ((tmpvar_48 * (1.0 - tmpvar_50)) + tmpvar_50)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_7, tmpvar_47)
      ), tmpvar_51) * ((tmpvar_51 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_15) * unity_LightGammaCorrectionConsts.x)) * tmpvar_16)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_56 * x_56) * x_56)
     * x_56) * x_56)))
  )) + (tmpvar_18 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_9.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_57 * x_57) * x_57) * x_57) * x_57)
  ))));
  vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = tmpvar_58;
  c_1.w = tmpvar_59.w;
  c_1.xyz = tmpvar_58;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_60;
  xlat_varoutput_60.xyz = c_1.xyz;
  xlat_varoutput_60.w = 1.0;
  gl_FragData[0] = xlat_varoutput_60;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 162 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * tmpvar_15.x) + (tmpvar_29 * tmpvar_15.y)) + (tmpvar_30 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_32.x) + (unity_LightColor[1].xyz * tmpvar_32.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_32.z)
  ) + (unity_LightColor[3].xyz * tmpvar_32.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.xy = (normal_6.xy * _BumpScale);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize((normal_6 * tmpvar_5));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_9;
  tmpvar_9 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_9.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_9.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_7;
  vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_16 = (xlv_TEXCOORD5.xyz + x1_19);
  tmpvar_16 = (tmpvar_16 * tmpvar_14);
  vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 worldNormal_21;
  worldNormal_21 = tmpvar_20;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_22;
    tmpvar_22 = normalize(tmpvar_20);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_22);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_22);
    bvec3 tmpvar_25;
    tmpvar_25 = greaterThan (tmpvar_22, vec3(0.0, 0.0, 0.0));
    float tmpvar_26;
    if (tmpvar_25.x) {
      tmpvar_26 = tmpvar_23.x;
    } else {
      tmpvar_26 = tmpvar_24.x;
    };
    float tmpvar_27;
    if (tmpvar_25.y) {
      tmpvar_27 = tmpvar_23.y;
    } else {
      tmpvar_27 = tmpvar_24.y;
    };
    float tmpvar_28;
    if (tmpvar_25.z) {
      tmpvar_28 = tmpvar_23.z;
    } else {
      tmpvar_28 = tmpvar_24.z;
    };
    vec3 tmpvar_29;
    tmpvar_29 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_21 = (((
      (tmpvar_29 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_22 * 
      min (min (tmpvar_26, tmpvar_27), tmpvar_28)
    )) - tmpvar_29);
  };
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_21;
  tmpvar_30.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldNormal_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_33;
    worldNormal_33 = tmpvar_20;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_34;
      tmpvar_34 = normalize(tmpvar_20);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_34);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_34);
      bvec3 tmpvar_37;
      tmpvar_37 = greaterThan (tmpvar_34, vec3(0.0, 0.0, 0.0));
      float tmpvar_38;
      if (tmpvar_37.x) {
        tmpvar_38 = tmpvar_35.x;
      } else {
        tmpvar_38 = tmpvar_36.x;
      };
      float tmpvar_39;
      if (tmpvar_37.y) {
        tmpvar_39 = tmpvar_35.y;
      } else {
        tmpvar_39 = tmpvar_36.y;
      };
      float tmpvar_40;
      if (tmpvar_37.z) {
        tmpvar_40 = tmpvar_35.z;
      } else {
        tmpvar_40 = tmpvar_36.z;
      };
      vec3 tmpvar_41;
      tmpvar_41 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_33 = (((
        (tmpvar_41 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_34 * 
        min (min (tmpvar_38, tmpvar_39), tmpvar_40)
      )) - tmpvar_41);
    };
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldNormal_33;
    tmpvar_42.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldNormal_33, tmpvar_42.w);
    tmpvar_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_17 = tmpvar_32;
  };
  tmpvar_17 = (tmpvar_17 * tmpvar_14);
  vec3 viewDir_44;
  viewDir_44 = -(tmpvar_8);
  float tmpvar_45;
  tmpvar_45 = (1.0 - tmpvar_9.y);
  vec3 tmpvar_46;
  tmpvar_46 = normalize((_WorldSpaceLightPos0.xyz + viewDir_44));
  float tmpvar_47;
  tmpvar_47 = max (0.0, dot (tmpvar_7, viewDir_44));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_46));
  float tmpvar_49;
  tmpvar_49 = ((tmpvar_45 * tmpvar_45) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = (10.0 / log2((
    ((1.0 - tmpvar_45) * 0.968)
   + 0.03)));
  tmpvar_50 = (tmpvar_51 * tmpvar_51);
  float x_52;
  x_52 = (1.0 - tmpvar_15);
  float x_53;
  x_53 = (1.0 - tmpvar_47);
  float tmpvar_54;
  tmpvar_54 = (0.5 + ((
    (2.0 * tmpvar_48)
   * tmpvar_48) * tmpvar_45));
  float x_55;
  x_55 = (1.0 - tmpvar_48);
  float x_56;
  x_56 = (1.0 - tmpvar_47);
  vec3 tmpvar_57;
  tmpvar_57 = (((tmpvar_11 * 
    (tmpvar_16 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_54 - 1.0) * ((
        ((x_52 * x_52) * x_52)
       * x_52) * x_52)))
     * 
      (1.0 + ((tmpvar_54 - 1.0) * ((
        ((x_53 * x_53) * x_53)
       * x_53) * x_53)))
    ) * tmpvar_15)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_15 * (1.0 - tmpvar_49)) + tmpvar_49)
       * 
        ((tmpvar_47 * (1.0 - tmpvar_49)) + tmpvar_49)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_7, tmpvar_46)
      ), tmpvar_50) * ((tmpvar_50 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_15) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_55 * x_55) * x_55)
     * x_55) * x_55)))
  )) + (tmpvar_17 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_9.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_56 * x_56) * x_56) * x_56) * x_56)
  ))));
  vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = tmpvar_57;
  c_1.w = tmpvar_58.w;
  c_1.xyz = tmpvar_57;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_59;
  xlat_varoutput_59.xyz = c_1.xyz;
  xlat_varoutput_59.w = 1.0;
  gl_FragData[0] = xlat_varoutput_59;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 163 math, 7 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_9 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_9.zw;
  vec3 x2_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_30);
  x2_29.y = dot (unity_SHBg, tmpvar_30);
  x2_29.z = dot (unity_SHBb, tmpvar_30);
  tmpvar_6.xyz = (x2_29 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_31 * tmpvar_15.x) + (tmpvar_32 * tmpvar_15.y)) + (tmpvar_33 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_34)
  )) * (1.0/((1.0 + 
    (tmpvar_34 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_35.z)
  ) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.xy = (normal_6.xy * _BumpScale);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_7;
  tmpvar_7 = normalize((normal_6 * tmpvar_5));
  vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_9;
  tmpvar_9 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_9.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_9.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_7, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_18 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_7;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_17 = (xlv_TEXCOORD5.xyz + x1_20);
  tmpvar_16 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_17 = (tmpvar_17 * tmpvar_14);
  vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_8 - (2.0 * (
    dot (tmpvar_7, tmpvar_8)
   * tmpvar_7)));
  vec3 worldNormal_22;
  worldNormal_22 = tmpvar_21;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_23;
    tmpvar_23 = normalize(tmpvar_21);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_23);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_23);
    bvec3 tmpvar_26;
    tmpvar_26 = greaterThan (tmpvar_23, vec3(0.0, 0.0, 0.0));
    float tmpvar_27;
    if (tmpvar_26.x) {
      tmpvar_27 = tmpvar_24.x;
    } else {
      tmpvar_27 = tmpvar_25.x;
    };
    float tmpvar_28;
    if (tmpvar_26.y) {
      tmpvar_28 = tmpvar_24.y;
    } else {
      tmpvar_28 = tmpvar_25.y;
    };
    float tmpvar_29;
    if (tmpvar_26.z) {
      tmpvar_29 = tmpvar_24.z;
    } else {
      tmpvar_29 = tmpvar_25.z;
    };
    vec3 tmpvar_30;
    tmpvar_30 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_22 = (((
      (tmpvar_30 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_23 * 
      min (min (tmpvar_27, tmpvar_28), tmpvar_29)
    )) - tmpvar_30);
  };
  vec4 tmpvar_31;
  tmpvar_31.xyz = worldNormal_22;
  tmpvar_31.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
  vec4 tmpvar_32;
  tmpvar_32 = textureCubeLod (unity_SpecCube0, worldNormal_22, tmpvar_31.w);
  vec3 tmpvar_33;
  tmpvar_33 = ((unity_SpecCube0_HDR.x * pow (tmpvar_32.w, unity_SpecCube0_HDR.y)) * tmpvar_32.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_34;
    worldNormal_34 = tmpvar_21;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_35;
      tmpvar_35 = normalize(tmpvar_21);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_35);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_35);
      bvec3 tmpvar_38;
      tmpvar_38 = greaterThan (tmpvar_35, vec3(0.0, 0.0, 0.0));
      float tmpvar_39;
      if (tmpvar_38.x) {
        tmpvar_39 = tmpvar_36.x;
      } else {
        tmpvar_39 = tmpvar_37.x;
      };
      float tmpvar_40;
      if (tmpvar_38.y) {
        tmpvar_40 = tmpvar_36.y;
      } else {
        tmpvar_40 = tmpvar_37.y;
      };
      float tmpvar_41;
      if (tmpvar_38.z) {
        tmpvar_41 = tmpvar_36.z;
      } else {
        tmpvar_41 = tmpvar_37.z;
      };
      vec3 tmpvar_42;
      tmpvar_42 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_34 = (((
        (tmpvar_42 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_35 * 
        min (min (tmpvar_39, tmpvar_40), tmpvar_41)
      )) - tmpvar_42);
    };
    vec4 tmpvar_43;
    tmpvar_43.xyz = worldNormal_34;
    tmpvar_43.w = (pow ((1.0 - tmpvar_9.y), 0.75) * 7.0);
    vec4 tmpvar_44;
    tmpvar_44 = textureCubeLod (unity_SpecCube1, worldNormal_34, tmpvar_43.w);
    tmpvar_18 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_44.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_44.xyz), tmpvar_33, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_18 = tmpvar_33;
  };
  tmpvar_18 = (tmpvar_18 * tmpvar_14);
  vec3 viewDir_45;
  viewDir_45 = -(tmpvar_8);
  float tmpvar_46;
  tmpvar_46 = (1.0 - tmpvar_9.y);
  vec3 tmpvar_47;
  tmpvar_47 = normalize((_WorldSpaceLightPos0.xyz + viewDir_45));
  float tmpvar_48;
  tmpvar_48 = max (0.0, dot (tmpvar_7, viewDir_45));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_47));
  float tmpvar_50;
  tmpvar_50 = ((tmpvar_46 * tmpvar_46) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = (10.0 / log2((
    ((1.0 - tmpvar_46) * 0.968)
   + 0.03)));
  tmpvar_51 = (tmpvar_52 * tmpvar_52);
  float x_53;
  x_53 = (1.0 - tmpvar_15);
  float x_54;
  x_54 = (1.0 - tmpvar_48);
  float tmpvar_55;
  tmpvar_55 = (0.5 + ((
    (2.0 * tmpvar_49)
   * tmpvar_49) * tmpvar_46));
  float x_56;
  x_56 = (1.0 - tmpvar_49);
  float x_57;
  x_57 = (1.0 - tmpvar_48);
  vec3 tmpvar_58;
  tmpvar_58 = (((tmpvar_11 * 
    (tmpvar_17 + (tmpvar_16 * ((
      (1.0 + ((tmpvar_55 - 1.0) * ((
        ((x_53 * x_53) * x_53)
       * x_53) * x_53)))
     * 
      (1.0 + ((tmpvar_55 - 1.0) * ((
        ((x_54 * x_54) * x_54)
       * x_54) * x_54)))
    ) * tmpvar_15)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_15 * (1.0 - tmpvar_50)) + tmpvar_50)
       * 
        ((tmpvar_48 * (1.0 - tmpvar_50)) + tmpvar_50)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_7, tmpvar_47)
      ), tmpvar_51) * ((tmpvar_51 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_15) * unity_LightGammaCorrectionConsts.x)) * tmpvar_16)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_56 * x_56) * x_56)
     * x_56) * x_56)))
  )) + (tmpvar_18 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_9.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_57 * x_57) * x_57) * x_57) * x_57)
  ))));
  vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = tmpvar_58;
  c_1.w = tmpvar_59.w;
  c_1.xyz = tmpvar_58;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_60;
  xlat_varoutput_60.xyz = c_1.xyz;
  xlat_varoutput_60.w = 1.0;
  gl_FragData[0] = xlat_varoutput_60;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 166 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.xy = (normal_8.xy * _BumpScale);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_9;
  tmpvar_9 = normalize((normal_8 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_11 * tmpvar_13) * tmpvar_6);
  float tmpvar_15;
  tmpvar_15 = ((1.0 - tmpvar_13) + (tmpvar_6 * tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_9, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_19 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_9;
  vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_18 = (xlv_TEXCOORD5.xyz + x1_21);
  tmpvar_18 = (tmpvar_18 * tmpvar_16);
  vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_10 - (2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  vec3 worldNormal_23;
  worldNormal_23 = tmpvar_22;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_24;
    tmpvar_24 = normalize(tmpvar_22);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_24);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_24);
    bvec3 tmpvar_27;
    tmpvar_27 = greaterThan (tmpvar_24, vec3(0.0, 0.0, 0.0));
    float tmpvar_28;
    if (tmpvar_27.x) {
      tmpvar_28 = tmpvar_25.x;
    } else {
      tmpvar_28 = tmpvar_26.x;
    };
    float tmpvar_29;
    if (tmpvar_27.y) {
      tmpvar_29 = tmpvar_25.y;
    } else {
      tmpvar_29 = tmpvar_26.y;
    };
    float tmpvar_30;
    if (tmpvar_27.z) {
      tmpvar_30 = tmpvar_25.z;
    } else {
      tmpvar_30 = tmpvar_26.z;
    };
    vec3 tmpvar_31;
    tmpvar_31 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_23 = (((
      (tmpvar_31 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_24 * 
      min (min (tmpvar_28, tmpvar_29), tmpvar_30)
    )) - tmpvar_31);
  };
  vec4 tmpvar_32;
  tmpvar_32.xyz = worldNormal_23;
  tmpvar_32.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_33;
  tmpvar_33 = textureCubeLod (unity_SpecCube0, worldNormal_23, tmpvar_32.w);
  vec3 tmpvar_34;
  tmpvar_34 = ((unity_SpecCube0_HDR.x * pow (tmpvar_33.w, unity_SpecCube0_HDR.y)) * tmpvar_33.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_35;
    worldNormal_35 = tmpvar_22;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_36;
      tmpvar_36 = normalize(tmpvar_22);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
      bvec3 tmpvar_39;
      tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
      float tmpvar_40;
      if (tmpvar_39.x) {
        tmpvar_40 = tmpvar_37.x;
      } else {
        tmpvar_40 = tmpvar_38.x;
      };
      float tmpvar_41;
      if (tmpvar_39.y) {
        tmpvar_41 = tmpvar_37.y;
      } else {
        tmpvar_41 = tmpvar_38.y;
      };
      float tmpvar_42;
      if (tmpvar_39.z) {
        tmpvar_42 = tmpvar_37.z;
      } else {
        tmpvar_42 = tmpvar_38.z;
      };
      vec3 tmpvar_43;
      tmpvar_43 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_35 = (((
        (tmpvar_43 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_36 * 
        min (min (tmpvar_40, tmpvar_41), tmpvar_42)
      )) - tmpvar_43);
    };
    vec4 tmpvar_44;
    tmpvar_44.xyz = worldNormal_35;
    tmpvar_44.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_45;
    tmpvar_45 = textureCubeLod (unity_SpecCube1, worldNormal_35, tmpvar_44.w);
    tmpvar_19 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_45.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_45.xyz), tmpvar_34, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_19 = tmpvar_34;
  };
  tmpvar_19 = (tmpvar_19 * tmpvar_16);
  vec3 viewDir_46;
  viewDir_46 = -(tmpvar_10);
  float tmpvar_47;
  tmpvar_47 = (1.0 - _Glossiness);
  vec3 tmpvar_48;
  tmpvar_48 = normalize((_WorldSpaceLightPos0.xyz + viewDir_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_9, viewDir_46));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_48));
  float tmpvar_51;
  tmpvar_51 = ((tmpvar_47 * tmpvar_47) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_52;
  float tmpvar_53;
  tmpvar_53 = (10.0 / log2((
    ((1.0 - tmpvar_47) * 0.968)
   + 0.03)));
  tmpvar_52 = (tmpvar_53 * tmpvar_53);
  float x_54;
  x_54 = (1.0 - tmpvar_17);
  float x_55;
  x_55 = (1.0 - tmpvar_49);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((
    (2.0 * tmpvar_50)
   * tmpvar_50) * tmpvar_47));
  float x_57;
  x_57 = (1.0 - tmpvar_50);
  float x_58;
  x_58 = (1.0 - tmpvar_49);
  vec3 tmpvar_59;
  tmpvar_59 = (((tmpvar_14 * 
    (tmpvar_18 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_56 - 1.0) * ((
        ((x_54 * x_54) * x_54)
       * x_54) * x_54)))
     * 
      (1.0 + ((tmpvar_56 - 1.0) * ((
        ((x_55 * x_55) * x_55)
       * x_55) * x_55)))
    ) * tmpvar_17)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_17 * (1.0 - tmpvar_51)) + tmpvar_51)
       * 
        ((tmpvar_49 * (1.0 - tmpvar_51)) + tmpvar_51)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_9, tmpvar_48)
      ), tmpvar_52) * ((tmpvar_52 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_17) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_57 * x_57) * x_57)
     * x_57) * x_57)))
  )) + (tmpvar_19 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_58 * x_58) * x_58) * x_58) * x_58)
  ))));
  vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = tmpvar_59;
  c_1.w = tmpvar_60.w;
  c_1.xyz = tmpvar_59;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_61;
  xlat_varoutput_61.xyz = c_1.xyz;
  xlat_varoutput_61.w = tmpvar_15;
  gl_FragData[0] = xlat_varoutput_61;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 167 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_9 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_9.zw;
  vec3 x2_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_30);
  x2_29.y = dot (unity_SHBg, tmpvar_30);
  x2_29.z = dot (unity_SHBb, tmpvar_30);
  tmpvar_6.xyz = (x2_29 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.xy = (normal_8.xy * _BumpScale);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_9;
  tmpvar_9 = normalize((normal_8 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_11 * tmpvar_13) * tmpvar_6);
  float tmpvar_15;
  tmpvar_15 = ((1.0 - tmpvar_13) + (tmpvar_6 * tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_9, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_9;
  vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_19 = (xlv_TEXCOORD5.xyz + x1_22);
  tmpvar_18 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_19 = (tmpvar_19 * tmpvar_16);
  vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_10 - (2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  vec3 worldNormal_24;
  worldNormal_24 = tmpvar_23;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_25;
    tmpvar_25 = normalize(tmpvar_23);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_25);
    vec3 tmpvar_27;
    tmpvar_27 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_25);
    bvec3 tmpvar_28;
    tmpvar_28 = greaterThan (tmpvar_25, vec3(0.0, 0.0, 0.0));
    float tmpvar_29;
    if (tmpvar_28.x) {
      tmpvar_29 = tmpvar_26.x;
    } else {
      tmpvar_29 = tmpvar_27.x;
    };
    float tmpvar_30;
    if (tmpvar_28.y) {
      tmpvar_30 = tmpvar_26.y;
    } else {
      tmpvar_30 = tmpvar_27.y;
    };
    float tmpvar_31;
    if (tmpvar_28.z) {
      tmpvar_31 = tmpvar_26.z;
    } else {
      tmpvar_31 = tmpvar_27.z;
    };
    vec3 tmpvar_32;
    tmpvar_32 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_24 = (((
      (tmpvar_32 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_25 * 
      min (min (tmpvar_29, tmpvar_30), tmpvar_31)
    )) - tmpvar_32);
  };
  vec4 tmpvar_33;
  tmpvar_33.xyz = worldNormal_24;
  tmpvar_33.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_34;
  tmpvar_34 = textureCubeLod (unity_SpecCube0, worldNormal_24, tmpvar_33.w);
  vec3 tmpvar_35;
  tmpvar_35 = ((unity_SpecCube0_HDR.x * pow (tmpvar_34.w, unity_SpecCube0_HDR.y)) * tmpvar_34.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_36;
    worldNormal_36 = tmpvar_23;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_37;
      tmpvar_37 = normalize(tmpvar_23);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_37);
      vec3 tmpvar_39;
      tmpvar_39 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_37);
      bvec3 tmpvar_40;
      tmpvar_40 = greaterThan (tmpvar_37, vec3(0.0, 0.0, 0.0));
      float tmpvar_41;
      if (tmpvar_40.x) {
        tmpvar_41 = tmpvar_38.x;
      } else {
        tmpvar_41 = tmpvar_39.x;
      };
      float tmpvar_42;
      if (tmpvar_40.y) {
        tmpvar_42 = tmpvar_38.y;
      } else {
        tmpvar_42 = tmpvar_39.y;
      };
      float tmpvar_43;
      if (tmpvar_40.z) {
        tmpvar_43 = tmpvar_38.z;
      } else {
        tmpvar_43 = tmpvar_39.z;
      };
      vec3 tmpvar_44;
      tmpvar_44 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_36 = (((
        (tmpvar_44 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_37 * 
        min (min (tmpvar_41, tmpvar_42), tmpvar_43)
      )) - tmpvar_44);
    };
    vec4 tmpvar_45;
    tmpvar_45.xyz = worldNormal_36;
    tmpvar_45.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_46;
    tmpvar_46 = textureCubeLod (unity_SpecCube1, worldNormal_36, tmpvar_45.w);
    tmpvar_20 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_46.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_46.xyz), tmpvar_35, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_20 = tmpvar_35;
  };
  tmpvar_20 = (tmpvar_20 * tmpvar_16);
  vec3 viewDir_47;
  viewDir_47 = -(tmpvar_10);
  float tmpvar_48;
  tmpvar_48 = (1.0 - _Glossiness);
  vec3 tmpvar_49;
  tmpvar_49 = normalize((_WorldSpaceLightPos0.xyz + viewDir_47));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_9, viewDir_47));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_49));
  float tmpvar_52;
  tmpvar_52 = ((tmpvar_48 * tmpvar_48) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_53;
  float tmpvar_54;
  tmpvar_54 = (10.0 / log2((
    ((1.0 - tmpvar_48) * 0.968)
   + 0.03)));
  tmpvar_53 = (tmpvar_54 * tmpvar_54);
  float x_55;
  x_55 = (1.0 - tmpvar_17);
  float x_56;
  x_56 = (1.0 - tmpvar_50);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((
    (2.0 * tmpvar_51)
   * tmpvar_51) * tmpvar_48));
  float x_58;
  x_58 = (1.0 - tmpvar_51);
  float x_59;
  x_59 = (1.0 - tmpvar_50);
  vec3 tmpvar_60;
  tmpvar_60 = (((tmpvar_14 * 
    (tmpvar_19 + (tmpvar_18 * ((
      (1.0 + ((tmpvar_57 - 1.0) * ((
        ((x_55 * x_55) * x_55)
       * x_55) * x_55)))
     * 
      (1.0 + ((tmpvar_57 - 1.0) * ((
        ((x_56 * x_56) * x_56)
       * x_56) * x_56)))
    ) * tmpvar_17)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_17 * (1.0 - tmpvar_52)) + tmpvar_52)
       * 
        ((tmpvar_50 * (1.0 - tmpvar_52)) + tmpvar_52)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_9, tmpvar_49)
      ), tmpvar_53) * ((tmpvar_53 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_17) * unity_LightGammaCorrectionConsts.x)) * tmpvar_18)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_58 * x_58) * x_58)
     * x_58) * x_58)))
  )) + (tmpvar_20 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_59 * x_59) * x_59) * x_59) * x_59)
  ))));
  vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = tmpvar_60;
  c_1.w = tmpvar_61.w;
  c_1.xyz = tmpvar_60;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_62;
  xlat_varoutput_62.xyz = c_1.xyz;
  xlat_varoutput_62.w = tmpvar_15;
  gl_FragData[0] = xlat_varoutput_62;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 166 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * tmpvar_15.x) + (tmpvar_29 * tmpvar_15.y)) + (tmpvar_30 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_32.x) + (unity_LightColor[1].xyz * tmpvar_32.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_32.z)
  ) + (unity_LightColor[3].xyz * tmpvar_32.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.xy = (normal_8.xy * _BumpScale);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_9;
  tmpvar_9 = normalize((normal_8 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_11 * tmpvar_13) * tmpvar_6);
  float tmpvar_15;
  tmpvar_15 = ((1.0 - tmpvar_13) + (tmpvar_6 * tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_9, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_19 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_9;
  vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_18 = (xlv_TEXCOORD5.xyz + x1_21);
  tmpvar_18 = (tmpvar_18 * tmpvar_16);
  vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_10 - (2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  vec3 worldNormal_23;
  worldNormal_23 = tmpvar_22;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_24;
    tmpvar_24 = normalize(tmpvar_22);
    vec3 tmpvar_25;
    tmpvar_25 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_24);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_24);
    bvec3 tmpvar_27;
    tmpvar_27 = greaterThan (tmpvar_24, vec3(0.0, 0.0, 0.0));
    float tmpvar_28;
    if (tmpvar_27.x) {
      tmpvar_28 = tmpvar_25.x;
    } else {
      tmpvar_28 = tmpvar_26.x;
    };
    float tmpvar_29;
    if (tmpvar_27.y) {
      tmpvar_29 = tmpvar_25.y;
    } else {
      tmpvar_29 = tmpvar_26.y;
    };
    float tmpvar_30;
    if (tmpvar_27.z) {
      tmpvar_30 = tmpvar_25.z;
    } else {
      tmpvar_30 = tmpvar_26.z;
    };
    vec3 tmpvar_31;
    tmpvar_31 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_23 = (((
      (tmpvar_31 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_24 * 
      min (min (tmpvar_28, tmpvar_29), tmpvar_30)
    )) - tmpvar_31);
  };
  vec4 tmpvar_32;
  tmpvar_32.xyz = worldNormal_23;
  tmpvar_32.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_33;
  tmpvar_33 = textureCubeLod (unity_SpecCube0, worldNormal_23, tmpvar_32.w);
  vec3 tmpvar_34;
  tmpvar_34 = ((unity_SpecCube0_HDR.x * pow (tmpvar_33.w, unity_SpecCube0_HDR.y)) * tmpvar_33.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_35;
    worldNormal_35 = tmpvar_22;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_36;
      tmpvar_36 = normalize(tmpvar_22);
      vec3 tmpvar_37;
      tmpvar_37 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_36);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_36);
      bvec3 tmpvar_39;
      tmpvar_39 = greaterThan (tmpvar_36, vec3(0.0, 0.0, 0.0));
      float tmpvar_40;
      if (tmpvar_39.x) {
        tmpvar_40 = tmpvar_37.x;
      } else {
        tmpvar_40 = tmpvar_38.x;
      };
      float tmpvar_41;
      if (tmpvar_39.y) {
        tmpvar_41 = tmpvar_37.y;
      } else {
        tmpvar_41 = tmpvar_38.y;
      };
      float tmpvar_42;
      if (tmpvar_39.z) {
        tmpvar_42 = tmpvar_37.z;
      } else {
        tmpvar_42 = tmpvar_38.z;
      };
      vec3 tmpvar_43;
      tmpvar_43 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_35 = (((
        (tmpvar_43 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_36 * 
        min (min (tmpvar_40, tmpvar_41), tmpvar_42)
      )) - tmpvar_43);
    };
    vec4 tmpvar_44;
    tmpvar_44.xyz = worldNormal_35;
    tmpvar_44.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_45;
    tmpvar_45 = textureCubeLod (unity_SpecCube1, worldNormal_35, tmpvar_44.w);
    tmpvar_19 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_45.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_45.xyz), tmpvar_34, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_19 = tmpvar_34;
  };
  tmpvar_19 = (tmpvar_19 * tmpvar_16);
  vec3 viewDir_46;
  viewDir_46 = -(tmpvar_10);
  float tmpvar_47;
  tmpvar_47 = (1.0 - _Glossiness);
  vec3 tmpvar_48;
  tmpvar_48 = normalize((_WorldSpaceLightPos0.xyz + viewDir_46));
  float tmpvar_49;
  tmpvar_49 = max (0.0, dot (tmpvar_9, viewDir_46));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_48));
  float tmpvar_51;
  tmpvar_51 = ((tmpvar_47 * tmpvar_47) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_52;
  float tmpvar_53;
  tmpvar_53 = (10.0 / log2((
    ((1.0 - tmpvar_47) * 0.968)
   + 0.03)));
  tmpvar_52 = (tmpvar_53 * tmpvar_53);
  float x_54;
  x_54 = (1.0 - tmpvar_17);
  float x_55;
  x_55 = (1.0 - tmpvar_49);
  float tmpvar_56;
  tmpvar_56 = (0.5 + ((
    (2.0 * tmpvar_50)
   * tmpvar_50) * tmpvar_47));
  float x_57;
  x_57 = (1.0 - tmpvar_50);
  float x_58;
  x_58 = (1.0 - tmpvar_49);
  vec3 tmpvar_59;
  tmpvar_59 = (((tmpvar_14 * 
    (tmpvar_18 + (_LightColor0.xyz * ((
      (1.0 + ((tmpvar_56 - 1.0) * ((
        ((x_54 * x_54) * x_54)
       * x_54) * x_54)))
     * 
      (1.0 + ((tmpvar_56 - 1.0) * ((
        ((x_55 * x_55) * x_55)
       * x_55) * x_55)))
    ) * tmpvar_17)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_17 * (1.0 - tmpvar_51)) + tmpvar_51)
       * 
        ((tmpvar_49 * (1.0 - tmpvar_51)) + tmpvar_51)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_9, tmpvar_48)
      ), tmpvar_52) * ((tmpvar_52 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_17) * unity_LightGammaCorrectionConsts.x)) * _LightColor0.xyz)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_57 * x_57) * x_57)
     * x_57) * x_57)))
  )) + (tmpvar_19 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_58 * x_58) * x_58) * x_58) * x_58)
  ))));
  vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = tmpvar_59;
  c_1.w = tmpvar_60.w;
  c_1.xyz = tmpvar_59;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_61;
  xlat_varoutput_61.xyz = c_1.xyz;
  xlat_varoutput_61.w = tmpvar_15;
  gl_FragData[0] = xlat_varoutput_61;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 167 math, 6 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec4 o_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_9 * 0.5);
  vec2 tmpvar_28;
  tmpvar_28.x = tmpvar_27.x;
  tmpvar_28.y = (tmpvar_27.y * _ProjectionParams.x);
  o_26.xy = (tmpvar_28 + tmpvar_27.w);
  o_26.zw = tmpvar_9.zw;
  vec3 x2_29;
  vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_30);
  x2_29.y = dot (unity_SHBg, tmpvar_30);
  x2_29.z = dot (unity_SHBb, tmpvar_30);
  tmpvar_6.xyz = (x2_29 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_34;
  tmpvar_34 = (((tmpvar_31 * tmpvar_31) + (tmpvar_32 * tmpvar_32)) + (tmpvar_33 * tmpvar_33));
  vec4 tmpvar_35;
  tmpvar_35 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_31 * tmpvar_15.x) + (tmpvar_32 * tmpvar_15.y)) + (tmpvar_33 * tmpvar_15.z))
   * 
    inversesqrt(tmpvar_34)
  )) * (1.0/((1.0 + 
    (tmpvar_34 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_35.x) + (unity_LightColor[1].xyz * tmpvar_35.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_35.z)
  ) + (unity_LightColor[3].xyz * tmpvar_35.w)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_26;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD8;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.xy = (normal_8.xy * _BumpScale);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_9;
  tmpvar_9 = normalize((normal_8 * tmpvar_5));
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_11;
  tmpvar_11 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_11, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_11 * tmpvar_13) * tmpvar_6);
  float tmpvar_15;
  tmpvar_15 = ((1.0 - tmpvar_13) + (tmpvar_6 * tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_9, _WorldSpaceLightPos0.xyz));
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_20 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_9;
  vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_19 = (xlv_TEXCOORD5.xyz + x1_22);
  tmpvar_18 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x);
  tmpvar_19 = (tmpvar_19 * tmpvar_16);
  vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_10 - (2.0 * (
    dot (tmpvar_9, tmpvar_10)
   * tmpvar_9)));
  vec3 worldNormal_24;
  worldNormal_24 = tmpvar_23;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_25;
    tmpvar_25 = normalize(tmpvar_23);
    vec3 tmpvar_26;
    tmpvar_26 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_25);
    vec3 tmpvar_27;
    tmpvar_27 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_25);
    bvec3 tmpvar_28;
    tmpvar_28 = greaterThan (tmpvar_25, vec3(0.0, 0.0, 0.0));
    float tmpvar_29;
    if (tmpvar_28.x) {
      tmpvar_29 = tmpvar_26.x;
    } else {
      tmpvar_29 = tmpvar_27.x;
    };
    float tmpvar_30;
    if (tmpvar_28.y) {
      tmpvar_30 = tmpvar_26.y;
    } else {
      tmpvar_30 = tmpvar_27.y;
    };
    float tmpvar_31;
    if (tmpvar_28.z) {
      tmpvar_31 = tmpvar_26.z;
    } else {
      tmpvar_31 = tmpvar_27.z;
    };
    vec3 tmpvar_32;
    tmpvar_32 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_24 = (((
      (tmpvar_32 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD8) + (tmpvar_25 * 
      min (min (tmpvar_29, tmpvar_30), tmpvar_31)
    )) - tmpvar_32);
  };
  vec4 tmpvar_33;
  tmpvar_33.xyz = worldNormal_24;
  tmpvar_33.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_34;
  tmpvar_34 = textureCubeLod (unity_SpecCube0, worldNormal_24, tmpvar_33.w);
  vec3 tmpvar_35;
  tmpvar_35 = ((unity_SpecCube0_HDR.x * pow (tmpvar_34.w, unity_SpecCube0_HDR.y)) * tmpvar_34.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_36;
    worldNormal_36 = tmpvar_23;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_37;
      tmpvar_37 = normalize(tmpvar_23);
      vec3 tmpvar_38;
      tmpvar_38 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD8) / tmpvar_37);
      vec3 tmpvar_39;
      tmpvar_39 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD8) / tmpvar_37);
      bvec3 tmpvar_40;
      tmpvar_40 = greaterThan (tmpvar_37, vec3(0.0, 0.0, 0.0));
      float tmpvar_41;
      if (tmpvar_40.x) {
        tmpvar_41 = tmpvar_38.x;
      } else {
        tmpvar_41 = tmpvar_39.x;
      };
      float tmpvar_42;
      if (tmpvar_40.y) {
        tmpvar_42 = tmpvar_38.y;
      } else {
        tmpvar_42 = tmpvar_39.y;
      };
      float tmpvar_43;
      if (tmpvar_40.z) {
        tmpvar_43 = tmpvar_38.z;
      } else {
        tmpvar_43 = tmpvar_39.z;
      };
      vec3 tmpvar_44;
      tmpvar_44 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_36 = (((
        (tmpvar_44 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD8) + (tmpvar_37 * 
        min (min (tmpvar_41, tmpvar_42), tmpvar_43)
      )) - tmpvar_44);
    };
    vec4 tmpvar_45;
    tmpvar_45.xyz = worldNormal_36;
    tmpvar_45.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_46;
    tmpvar_46 = textureCubeLod (unity_SpecCube1, worldNormal_36, tmpvar_45.w);
    tmpvar_20 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_46.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_46.xyz), tmpvar_35, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_20 = tmpvar_35;
  };
  tmpvar_20 = (tmpvar_20 * tmpvar_16);
  vec3 viewDir_47;
  viewDir_47 = -(tmpvar_10);
  float tmpvar_48;
  tmpvar_48 = (1.0 - _Glossiness);
  vec3 tmpvar_49;
  tmpvar_49 = normalize((_WorldSpaceLightPos0.xyz + viewDir_47));
  float tmpvar_50;
  tmpvar_50 = max (0.0, dot (tmpvar_9, viewDir_47));
  float tmpvar_51;
  tmpvar_51 = max (0.0, dot (_WorldSpaceLightPos0.xyz, tmpvar_49));
  float tmpvar_52;
  tmpvar_52 = ((tmpvar_48 * tmpvar_48) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_53;
  float tmpvar_54;
  tmpvar_54 = (10.0 / log2((
    ((1.0 - tmpvar_48) * 0.968)
   + 0.03)));
  tmpvar_53 = (tmpvar_54 * tmpvar_54);
  float x_55;
  x_55 = (1.0 - tmpvar_17);
  float x_56;
  x_56 = (1.0 - tmpvar_50);
  float tmpvar_57;
  tmpvar_57 = (0.5 + ((
    (2.0 * tmpvar_51)
   * tmpvar_51) * tmpvar_48));
  float x_58;
  x_58 = (1.0 - tmpvar_51);
  float x_59;
  x_59 = (1.0 - tmpvar_50);
  vec3 tmpvar_60;
  tmpvar_60 = (((tmpvar_14 * 
    (tmpvar_19 + (tmpvar_18 * ((
      (1.0 + ((tmpvar_57 - 1.0) * ((
        ((x_55 * x_55) * x_55)
       * x_55) * x_55)))
     * 
      (1.0 + ((tmpvar_57 - 1.0) * ((
        ((x_56 * x_56) * x_56)
       * x_56) * x_56)))
    ) * tmpvar_17)))
  ) + (
    (max (0.0, ((
      ((1.0/(((
        ((tmpvar_17 * (1.0 - tmpvar_52)) + tmpvar_52)
       * 
        ((tmpvar_50 * (1.0 - tmpvar_52)) + tmpvar_52)
      ) + 0.0001))) * (pow (max (0.0, 
        dot (tmpvar_9, tmpvar_49)
      ), tmpvar_53) * ((tmpvar_53 + 1.0) * unity_LightGammaCorrectionConsts.y)))
     * tmpvar_17) * unity_LightGammaCorrectionConsts.x)) * tmpvar_18)
   * 
    (tmpvar_12 + ((1.0 - tmpvar_12) * ((
      ((x_58 * x_58) * x_58)
     * x_58) * x_58)))
  )) + (tmpvar_20 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_59 * x_59) * x_59) * x_59) * x_59)
  ))));
  vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = tmpvar_60;
  c_1.w = tmpvar_61.w;
  c_1.xyz = tmpvar_60;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_62;
  xlat_varoutput_62.xyz = c_1.xyz;
  xlat_varoutput_62.w = tmpvar_15;
  gl_FragData[0] = xlat_varoutput_62;
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
}
 }


 // Stats for Vertex shader:
 //      opengl : 94 avg math (81..112), 4 avg texture (1..9), 0 avg branch (0..4)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 120105
Program "vp" {
SubProgram "opengl " {
// Stats: 84 math, 2 textures
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(tmpvar_4);
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 81 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = max (0.0, dot (tmpvar_1, tmpvar_4));
  vec3 viewDir_6;
  viewDir_6 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_7;
  tmpvar_7 = (1.0 - _Glossiness);
  vec3 tmpvar_8;
  tmpvar_8 = normalize((tmpvar_4 + viewDir_6));
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, viewDir_6));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_4, tmpvar_8));
  float tmpvar_11;
  tmpvar_11 = ((tmpvar_7 * tmpvar_7) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_12;
  float tmpvar_13;
  tmpvar_13 = (10.0 / log2((
    ((1.0 - tmpvar_7) * 0.968)
   + 0.03)));
  tmpvar_12 = (tmpvar_13 * tmpvar_13);
  float x_14;
  x_14 = (1.0 - tmpvar_5);
  float x_15;
  x_15 = (1.0 - tmpvar_9);
  float tmpvar_16;
  tmpvar_16 = (0.5 + ((
    (2.0 * tmpvar_10)
   * tmpvar_10) * tmpvar_7));
  float x_17;
  x_17 = (1.0 - tmpvar_10);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (_LightColor0.xyz * 
    (((1.0 + (
      (tmpvar_16 - 1.0)
     * 
      ((((x_14 * x_14) * x_14) * x_14) * x_14)
    )) * (1.0 + (
      (tmpvar_16 - 1.0)
     * 
      ((((x_15 * x_15) * x_15) * x_15) * x_15)
    ))) * tmpvar_5)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_5 * (1.0 - tmpvar_11))
       + tmpvar_11) * (
        (tmpvar_9 * (1.0 - tmpvar_11))
       + tmpvar_11)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_8)), tmpvar_12) * ((tmpvar_12 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_5) * unity_LightGammaCorrectionConsts.x))
   * _LightColor0.xyz) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_17 * x_17)
     * x_17) * x_17) * x_17))
  )));
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 3 textures
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(tmpvar_4);
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 85 math, 3 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(tmpvar_4);
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 82 math, 2 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = max (0.0, dot (tmpvar_1, tmpvar_4));
  vec3 tmpvar_6;
  tmpvar_6 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_7;
  viewDir_7 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_8;
  tmpvar_8 = (1.0 - _Glossiness);
  vec3 tmpvar_9;
  tmpvar_9 = normalize((tmpvar_4 + viewDir_7));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_1, viewDir_7));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_9));
  float tmpvar_12;
  tmpvar_12 = ((tmpvar_8 * tmpvar_8) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_13;
  float tmpvar_14;
  tmpvar_14 = (10.0 / log2((
    ((1.0 - tmpvar_8) * 0.968)
   + 0.03)));
  tmpvar_13 = (tmpvar_14 * tmpvar_14);
  float x_15;
  x_15 = (1.0 - tmpvar_5);
  float x_16;
  x_16 = (1.0 - tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (0.5 + ((
    (2.0 * tmpvar_11)
   * tmpvar_11) * tmpvar_8));
  float x_18;
  x_18 = (1.0 - tmpvar_11);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_6 * 
    (((1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_15 * x_15) * x_15) * x_15) * x_15)
    )) * (1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    ))) * tmpvar_5)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_5 * (1.0 - tmpvar_12))
       + tmpvar_12) * (
        (tmpvar_10 * (1.0 - tmpvar_12))
       + tmpvar_12)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_9)), tmpvar_13) * ((tmpvar_13 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_5) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_18 * x_18)
     * x_18) * x_18) * x_18))
  )));
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 4 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(tmpvar_4);
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - _Glossiness);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 82 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = max (0.0, dot (tmpvar_1, tmpvar_4));
  vec3 tmpvar_6;
  tmpvar_6 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_7;
  viewDir_7 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_8;
  tmpvar_8 = (1.0 - _Glossiness);
  vec3 tmpvar_9;
  tmpvar_9 = normalize((tmpvar_4 + viewDir_7));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_1, viewDir_7));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_9));
  float tmpvar_12;
  tmpvar_12 = ((tmpvar_8 * tmpvar_8) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_13;
  float tmpvar_14;
  tmpvar_14 = (10.0 / log2((
    ((1.0 - tmpvar_8) * 0.968)
   + 0.03)));
  tmpvar_13 = (tmpvar_14 * tmpvar_14);
  float x_15;
  x_15 = (1.0 - tmpvar_5);
  float x_16;
  x_16 = (1.0 - tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (0.5 + ((
    (2.0 * tmpvar_11)
   * tmpvar_11) * tmpvar_8));
  float x_18;
  x_18 = (1.0 - tmpvar_11);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_6 * 
    (((1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_15 * x_15) * x_15) * x_15) * x_15)
    )) * (1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    ))) * tmpvar_5)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_5 * (1.0 - tmpvar_12))
       + tmpvar_12) * (
        (tmpvar_10 * (1.0 - tmpvar_12))
       + tmpvar_12)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_9)), tmpvar_13) * ((tmpvar_13 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_5) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_18 * x_18)
     * x_18) * x_18) * x_18))
  )));
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 83 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  float tmpvar_5;
  tmpvar_5 = max (0.0, dot (tmpvar_1, tmpvar_4));
  vec3 tmpvar_6;
  tmpvar_6 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_7;
  viewDir_7 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_8;
  tmpvar_8 = (1.0 - _Glossiness);
  vec3 tmpvar_9;
  tmpvar_9 = normalize((tmpvar_4 + viewDir_7));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_1, viewDir_7));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_9));
  float tmpvar_12;
  tmpvar_12 = ((tmpvar_8 * tmpvar_8) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_13;
  float tmpvar_14;
  tmpvar_14 = (10.0 / log2((
    ((1.0 - tmpvar_8) * 0.968)
   + 0.03)));
  tmpvar_13 = (tmpvar_14 * tmpvar_14);
  float x_15;
  x_15 = (1.0 - tmpvar_5);
  float x_16;
  x_16 = (1.0 - tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (0.5 + ((
    (2.0 * tmpvar_11)
   * tmpvar_11) * tmpvar_8));
  float x_18;
  x_18 = (1.0 - tmpvar_11);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_6 * 
    (((1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_15 * x_15) * x_15) * x_15) * x_15)
    )) * (1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    ))) * tmpvar_5)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_5 * (1.0 - tmpvar_12))
       + tmpvar_12) * (
        (tmpvar_10 * (1.0 - tmpvar_12))
       + tmpvar_12)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_9)), tmpvar_13) * ((tmpvar_13 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_5) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_6) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_18 * x_18)
     * x_18) * x_18) * x_18))
  )));
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 91 math, 3 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_8;
  tmpvar_8 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_10;
  if ((tmpvar_9.x < tmpvar_8)) {
    tmpvar_10 = _LightShadowData.x;
  } else {
    tmpvar_10 = 1.0;
  };
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_6);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * (tmpvar_7.w * tmpvar_10));
  vec3 viewDir_14;
  viewDir_14 = -(tmpvar_2);
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_1, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((tmpvar_4 * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 92 math, 4 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_9;
  tmpvar_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < tmpvar_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_6);
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_1, tmpvar_12));
  vec3 tmpvar_14;
  tmpvar_14 = (_LightColor0.xyz * ((tmpvar_7.w * tmpvar_8.w) * tmpvar_11));
  vec3 viewDir_15;
  viewDir_15 = -(tmpvar_2);
  float tmpvar_16;
  tmpvar_16 = (1.0 - _Glossiness);
  vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_12 + viewDir_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_1, viewDir_15));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = ((tmpvar_16 * tmpvar_16) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = (10.0 / log2((
    ((1.0 - tmpvar_16) * 0.968)
   + 0.03)));
  tmpvar_21 = (tmpvar_22 * tmpvar_22);
  float x_23;
  x_23 = (1.0 - tmpvar_13);
  float x_24;
  x_24 = (1.0 - tmpvar_18);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((
    (2.0 * tmpvar_19)
   * tmpvar_19) * tmpvar_16));
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_4 * (tmpvar_14 * 
    (((1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    )) * (1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_20))
       + tmpvar_20) * (
        (tmpvar_18 * (1.0 - tmpvar_20))
       + tmpvar_20)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_17)), tmpvar_21) * ((tmpvar_21 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_14) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_26 * x_26)
     * x_26) * x_26) * x_26))
  )));
  vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_5;
  vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_5.x = shadow2D (_ShadowMapTexture, (tmpvar_6 + _ShadowOffsets[0].xyz)).x;
  shadows_5.y = shadow2D (_ShadowMapTexture, (tmpvar_6 + _ShadowOffsets[1].xyz)).x;
  shadows_5.z = shadow2D (_ShadowMapTexture, (tmpvar_6 + _ShadowOffsets[2].xyz)).x;
  shadows_5.w = shadow2D (_ShadowMapTexture, (tmpvar_6 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_7;
  tmpvar_7 = (_LightShadowData.xxxx + (shadows_5 * (1.0 - _LightShadowData.xxxx)));
  shadows_5 = tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_8 = normalize(tmpvar_4);
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (tmpvar_7, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_12;
  tmpvar_12 = (1.0 - _Glossiness);
  vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_8 + viewDir_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, viewDir_11));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_8, tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * tmpvar_12) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = (10.0 / log2((
    ((1.0 - tmpvar_12) * 0.968)
   + 0.03)));
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  float x_19;
  x_19 = (1.0 - tmpvar_9);
  float x_20;
  x_20 = (1.0 - tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((
    (2.0 * tmpvar_15)
   * tmpvar_15) * tmpvar_12));
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (((tmpvar_2 * 
    (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_10 * 
    (((1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    )) * (1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    ))) * tmpvar_9)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_9 * (1.0 - tmpvar_16))
       + tmpvar_16) * (
        (tmpvar_14 * (1.0 - tmpvar_16))
       + tmpvar_16)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_13)), tmpvar_17) * ((tmpvar_17 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_9) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_10) * (tmpvar_3 + 
    ((1.0 - tmpvar_3) * (((
      (x_22 * x_22)
     * x_22) * x_22) * x_22))
  )));
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 6 textures, 4 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_8;
  shadowVals_8.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_8.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_8.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_8.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (shadowVals_8, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_10;
  tmpvar_10 = _LightShadowData.xxxx;
  float tmpvar_11;
  if (tmpvar_9.x) {
    tmpvar_11 = tmpvar_10.x;
  } else {
    tmpvar_11 = 1.0;
  };
  float tmpvar_12;
  if (tmpvar_9.y) {
    tmpvar_12 = tmpvar_10.y;
  } else {
    tmpvar_12 = 1.0;
  };
  float tmpvar_13;
  if (tmpvar_9.z) {
    tmpvar_13 = tmpvar_10.z;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_9.w) {
    tmpvar_14 = tmpvar_10.w;
  } else {
    tmpvar_14 = 1.0;
  };
  vec4 tmpvar_15;
  tmpvar_15.x = tmpvar_11;
  tmpvar_15.y = tmpvar_12;
  tmpvar_15.z = tmpvar_13;
  tmpvar_15.w = tmpvar_14;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_6);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_1, tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18 = (_LightColor0.xyz * (tmpvar_7.w * dot (tmpvar_15, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_19;
  viewDir_19 = -(tmpvar_2);
  float tmpvar_20;
  tmpvar_20 = (1.0 - _Glossiness);
  vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_16 + viewDir_19));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_1, viewDir_19));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_16, tmpvar_21));
  float tmpvar_24;
  tmpvar_24 = ((tmpvar_20 * tmpvar_20) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (10.0 / log2((
    ((1.0 - tmpvar_20) * 0.968)
   + 0.03)));
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  float x_27;
  x_27 = (1.0 - tmpvar_17);
  float x_28;
  x_28 = (1.0 - tmpvar_22);
  float tmpvar_29;
  tmpvar_29 = (0.5 + ((
    (2.0 * tmpvar_23)
   * tmpvar_23) * tmpvar_20));
  float x_30;
  x_30 = (1.0 - tmpvar_23);
  vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = ((tmpvar_4 * (tmpvar_18 * 
    (((1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_27 * x_27) * x_27) * x_27) * x_27)
    )) * (1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    ))) * tmpvar_17)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_17 * (1.0 - tmpvar_24))
       + tmpvar_24) * (
        (tmpvar_22 * (1.0 - tmpvar_24))
       + tmpvar_24)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_21)), tmpvar_25) * ((tmpvar_25 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_17) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_18) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_30 * x_30)
     * x_30) * x_30) * x_30))
  )));
  vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 7 textures, 4 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_9;
  shadowVals_9.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_9.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_9.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_9.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (shadowVals_9, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_11;
  tmpvar_11 = _LightShadowData.xxxx;
  float tmpvar_12;
  if (tmpvar_10.x) {
    tmpvar_12 = tmpvar_11.x;
  } else {
    tmpvar_12 = 1.0;
  };
  float tmpvar_13;
  if (tmpvar_10.y) {
    tmpvar_13 = tmpvar_11.y;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_10.z) {
    tmpvar_14 = tmpvar_11.z;
  } else {
    tmpvar_14 = 1.0;
  };
  float tmpvar_15;
  if (tmpvar_10.w) {
    tmpvar_15 = tmpvar_11.w;
  } else {
    tmpvar_15 = 1.0;
  };
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_12;
  tmpvar_16.y = tmpvar_13;
  tmpvar_16.z = tmpvar_14;
  tmpvar_16.w = tmpvar_15;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_6);
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_1, tmpvar_17));
  vec3 tmpvar_19;
  tmpvar_19 = (_LightColor0.xyz * ((tmpvar_7.w * tmpvar_8.w) * dot (tmpvar_16, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_20;
  viewDir_20 = -(tmpvar_2);
  float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_17 + viewDir_20));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_1, viewDir_20));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_17, tmpvar_22));
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_21 * tmpvar_21) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (10.0 / log2((
    ((1.0 - tmpvar_21) * 0.968)
   + 0.03)));
  tmpvar_26 = (tmpvar_27 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_18);
  float x_29;
  x_29 = (1.0 - tmpvar_23);
  float tmpvar_30;
  tmpvar_30 = (0.5 + ((
    (2.0 * tmpvar_24)
   * tmpvar_24) * tmpvar_21));
  float x_31;
  x_31 = (1.0 - tmpvar_24);
  vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = ((tmpvar_4 * (tmpvar_19 * 
    (((1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    )) * (1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_29 * x_29) * x_29) * x_29) * x_29)
    ))) * tmpvar_18)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_18 * (1.0 - tmpvar_25))
       + tmpvar_25) * (
        (tmpvar_23 * (1.0 - tmpvar_25))
       + tmpvar_25)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_22)), tmpvar_26) * ((tmpvar_26 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_18) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_19) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_31 * x_31)
     * x_31) * x_31) * x_31))
  )));
  vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 84 math, 3 textures
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_1, tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_10;
  tmpvar_10 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6 + viewDir_9));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, viewDir_9));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_6, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_10) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (10.0 / log2((
    ((1.0 - tmpvar_10) * 0.968)
   + 0.03)));
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  float x_17;
  x_17 = (1.0 - tmpvar_7);
  float x_18;
  x_18 = (1.0 - tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = (0.5 + ((
    (2.0 * tmpvar_13)
   * tmpvar_13) * tmpvar_10));
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_8 * 
    (((1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    )) * (1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    ))) * tmpvar_7)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_7 * (1.0 - tmpvar_14))
       + tmpvar_14) * (
        (tmpvar_12 * (1.0 - tmpvar_14))
       + tmpvar_14)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_11)), tmpvar_15) * ((tmpvar_15 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_7) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_8) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_20 * x_20)
     * x_20) * x_20) * x_20))
  )));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 81 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 viewDir_7;
  viewDir_7 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_8;
  tmpvar_8 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_9;
  tmpvar_9 = normalize((tmpvar_5 + viewDir_7));
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_1, viewDir_7));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_5, tmpvar_9));
  float tmpvar_12;
  tmpvar_12 = ((tmpvar_8 * tmpvar_8) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_13;
  float tmpvar_14;
  tmpvar_14 = (10.0 / log2((
    ((1.0 - tmpvar_8) * 0.968)
   + 0.03)));
  tmpvar_13 = (tmpvar_14 * tmpvar_14);
  float x_15;
  x_15 = (1.0 - tmpvar_6);
  float x_16;
  x_16 = (1.0 - tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = (0.5 + ((
    (2.0 * tmpvar_11)
   * tmpvar_11) * tmpvar_8));
  float x_18;
  x_18 = (1.0 - tmpvar_11);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (_LightColor0.xyz * 
    (((1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_15 * x_15) * x_15) * x_15) * x_15)
    )) * (1.0 + (
      (tmpvar_17 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_12))
       + tmpvar_12) * (
        (tmpvar_10 * (1.0 - tmpvar_12))
       + tmpvar_12)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_9)), tmpvar_13) * ((tmpvar_13 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * _LightColor0.xyz) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_18 * x_18)
     * x_18) * x_18) * x_18))
  )));
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 4 textures
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_1, tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_10;
  tmpvar_10 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6 + viewDir_9));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, viewDir_9));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_6, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_10) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (10.0 / log2((
    ((1.0 - tmpvar_10) * 0.968)
   + 0.03)));
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  float x_17;
  x_17 = (1.0 - tmpvar_7);
  float x_18;
  x_18 = (1.0 - tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = (0.5 + ((
    (2.0 * tmpvar_13)
   * tmpvar_13) * tmpvar_10));
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_8 * 
    (((1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    )) * (1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    ))) * tmpvar_7)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_7 * (1.0 - tmpvar_14))
       + tmpvar_14) * (
        (tmpvar_12 * (1.0 - tmpvar_14))
       + tmpvar_14)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_11)), tmpvar_15) * ((tmpvar_15 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_7) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_8) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_20 * x_20)
     * x_20) * x_20) * x_20))
  )));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 85 math, 4 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_1, tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_10;
  tmpvar_10 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6 + viewDir_9));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, viewDir_9));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_6, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_10) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (10.0 / log2((
    ((1.0 - tmpvar_10) * 0.968)
   + 0.03)));
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  float x_17;
  x_17 = (1.0 - tmpvar_7);
  float x_18;
  x_18 = (1.0 - tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = (0.5 + ((
    (2.0 * tmpvar_13)
   * tmpvar_13) * tmpvar_10));
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_8 * 
    (((1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    )) * (1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    ))) * tmpvar_7)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_7 * (1.0 - tmpvar_14))
       + tmpvar_14) * (
        (tmpvar_12 * (1.0 - tmpvar_14))
       + tmpvar_14)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_11)), tmpvar_15) * ((tmpvar_15 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_7) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_8) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_20 * x_20)
     * x_20) * x_20) * x_20))
  )));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 82 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_6;
  tmpvar_6 = normalize(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = max (0.0, dot (tmpvar_1, tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_10;
  tmpvar_10 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_6 + viewDir_9));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, viewDir_9));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_6, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_10) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (10.0 / log2((
    ((1.0 - tmpvar_10) * 0.968)
   + 0.03)));
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  float x_17;
  x_17 = (1.0 - tmpvar_7);
  float x_18;
  x_18 = (1.0 - tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = (0.5 + ((
    (2.0 * tmpvar_13)
   * tmpvar_13) * tmpvar_10));
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_8 * 
    (((1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    )) * (1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    ))) * tmpvar_7)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_7 * (1.0 - tmpvar_14))
       + tmpvar_14) * (
        (tmpvar_12 * (1.0 - tmpvar_14))
       + tmpvar_14)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_11)), tmpvar_15) * ((tmpvar_15 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_7) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_8) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_20 * x_20)
     * x_20) * x_20) * x_20))
  )));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 82 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 83 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  float tmpvar_6;
  tmpvar_6 = max (0.0, dot (tmpvar_1, tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_8;
  viewDir_8 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_9;
  tmpvar_9 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_5 + viewDir_8));
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_1, viewDir_8));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_5, tmpvar_10));
  float tmpvar_13;
  tmpvar_13 = ((tmpvar_9 * tmpvar_9) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_14;
  float tmpvar_15;
  tmpvar_15 = (10.0 / log2((
    ((1.0 - tmpvar_9) * 0.968)
   + 0.03)));
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  float x_16;
  x_16 = (1.0 - tmpvar_6);
  float x_17;
  x_17 = (1.0 - tmpvar_11);
  float tmpvar_18;
  tmpvar_18 = (0.5 + ((
    (2.0 * tmpvar_12)
   * tmpvar_12) * tmpvar_9));
  float x_19;
  x_19 = (1.0 - tmpvar_12);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_7 * 
    (((1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_16 * x_16) * x_16) * x_16) * x_16)
    )) * (1.0 + (
      (tmpvar_18 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    ))) * tmpvar_6)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_6 * (1.0 - tmpvar_13))
       + tmpvar_13) * (
        (tmpvar_11 * (1.0 - tmpvar_13))
       + tmpvar_13)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_10)), tmpvar_14) * ((tmpvar_14 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_6) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_7) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_19 * x_19)
     * x_19) * x_19) * x_19))
  )));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 91 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_9;
  tmpvar_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < tmpvar_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_7);
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_1, tmpvar_12));
  vec3 tmpvar_14;
  tmpvar_14 = (_LightColor0.xyz * (tmpvar_8.w * tmpvar_11));
  vec3 viewDir_15;
  viewDir_15 = -(tmpvar_2);
  float tmpvar_16;
  tmpvar_16 = (1.0 - tmpvar_3.y);
  vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_12 + viewDir_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_1, viewDir_15));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = ((tmpvar_16 * tmpvar_16) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = (10.0 / log2((
    ((1.0 - tmpvar_16) * 0.968)
   + 0.03)));
  tmpvar_21 = (tmpvar_22 * tmpvar_22);
  float x_23;
  x_23 = (1.0 - tmpvar_13);
  float x_24;
  x_24 = (1.0 - tmpvar_18);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((
    (2.0 * tmpvar_19)
   * tmpvar_19) * tmpvar_16));
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = ((tmpvar_5 * (tmpvar_14 * 
    (((1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    )) * (1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_20))
       + tmpvar_20) * (
        (tmpvar_18 * (1.0 - tmpvar_20))
       + tmpvar_20)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_17)), tmpvar_21) * ((tmpvar_21 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_14) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_26 * x_26)
     * x_26) * x_26) * x_26))
  )));
  vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 92 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_10;
  tmpvar_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_11;
  tmpvar_11 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_12;
  if ((tmpvar_11.x < tmpvar_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_7);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, tmpvar_13));
  vec3 tmpvar_15;
  tmpvar_15 = (_LightColor0.xyz * ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12));
  vec3 viewDir_16;
  viewDir_16 = -(tmpvar_2);
  float tmpvar_17;
  tmpvar_17 = (1.0 - tmpvar_3.y);
  vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_13 + viewDir_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_1, viewDir_16));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_17 * tmpvar_17) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (10.0 / log2((
    ((1.0 - tmpvar_17) * 0.968)
   + 0.03)));
  tmpvar_22 = (tmpvar_23 * tmpvar_23);
  float x_24;
  x_24 = (1.0 - tmpvar_14);
  float x_25;
  x_25 = (1.0 - tmpvar_19);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((
    (2.0 * tmpvar_20)
   * tmpvar_20) * tmpvar_17));
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = ((tmpvar_5 * (tmpvar_15 * 
    (((1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    )) * (1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    ))) * tmpvar_14)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_14 * (1.0 - tmpvar_21))
       + tmpvar_21) * (
        (tmpvar_19 * (1.0 - tmpvar_21))
       + tmpvar_21)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_18)), tmpvar_22) * ((tmpvar_22 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_14) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_15) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_27 * x_27)
     * x_27) * x_27) * x_27))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 8 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_6;
  vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_6.x = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[0].xyz)).x;
  shadows_6.y = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[1].xyz)).x;
  shadows_6.z = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[2].xyz)).x;
  shadows_6.w = shadow2D (_ShadowMapTexture, (tmpvar_7 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_8;
  tmpvar_8 = (_LightShadowData.xxxx + (shadows_6 * (1.0 - _LightShadowData.xxxx)));
  shadows_6 = tmpvar_8;
  vec3 tmpvar_9;
  tmpvar_9 = normalize(tmpvar_5);
  float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_1, tmpvar_9));
  vec3 tmpvar_11;
  tmpvar_11 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (tmpvar_8, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_13;
  tmpvar_13 = (1.0 - tmpvar_2.y);
  vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9 + viewDir_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_1, viewDir_12));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_9, tmpvar_14));
  float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * tmpvar_13) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (10.0 / log2((
    ((1.0 - tmpvar_13) * 0.968)
   + 0.03)));
  tmpvar_18 = (tmpvar_19 * tmpvar_19);
  float x_20;
  x_20 = (1.0 - tmpvar_10);
  float x_21;
  x_21 = (1.0 - tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (0.5 + ((
    (2.0 * tmpvar_16)
   * tmpvar_16) * tmpvar_13));
  float x_23;
  x_23 = (1.0 - tmpvar_16);
  vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = (((tmpvar_3 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_11 * 
    (((1.0 + (
      (tmpvar_22 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    )) * (1.0 + (
      (tmpvar_22 - 1.0)
     * 
      ((((x_21 * x_21) * x_21) * x_21) * x_21)
    ))) * tmpvar_10)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_10 * (1.0 - tmpvar_17))
       + tmpvar_17) * (
        (tmpvar_15 * (1.0 - tmpvar_17))
       + tmpvar_17)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_14)), tmpvar_18) * ((tmpvar_18 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_10) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_11) * (tmpvar_4 + 
    ((1.0 - tmpvar_4) * (((
      (x_23 * x_23)
     * x_23) * x_23) * x_23))
  )));
  vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures, 4 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_9;
  shadowVals_9.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_9.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_9.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_9.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (shadowVals_9, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_11;
  tmpvar_11 = _LightShadowData.xxxx;
  float tmpvar_12;
  if (tmpvar_10.x) {
    tmpvar_12 = tmpvar_11.x;
  } else {
    tmpvar_12 = 1.0;
  };
  float tmpvar_13;
  if (tmpvar_10.y) {
    tmpvar_13 = tmpvar_11.y;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_10.z) {
    tmpvar_14 = tmpvar_11.z;
  } else {
    tmpvar_14 = 1.0;
  };
  float tmpvar_15;
  if (tmpvar_10.w) {
    tmpvar_15 = tmpvar_11.w;
  } else {
    tmpvar_15 = 1.0;
  };
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_12;
  tmpvar_16.y = tmpvar_13;
  tmpvar_16.z = tmpvar_14;
  tmpvar_16.w = tmpvar_15;
  vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_7);
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_1, tmpvar_17));
  vec3 tmpvar_19;
  tmpvar_19 = (_LightColor0.xyz * (tmpvar_8.w * dot (tmpvar_16, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_20;
  viewDir_20 = -(tmpvar_2);
  float tmpvar_21;
  tmpvar_21 = (1.0 - tmpvar_3.y);
  vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_17 + viewDir_20));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_1, viewDir_20));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_17, tmpvar_22));
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_21 * tmpvar_21) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (10.0 / log2((
    ((1.0 - tmpvar_21) * 0.968)
   + 0.03)));
  tmpvar_26 = (tmpvar_27 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_18);
  float x_29;
  x_29 = (1.0 - tmpvar_23);
  float tmpvar_30;
  tmpvar_30 = (0.5 + ((
    (2.0 * tmpvar_24)
   * tmpvar_24) * tmpvar_21));
  float x_31;
  x_31 = (1.0 - tmpvar_24);
  vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = ((tmpvar_5 * (tmpvar_19 * 
    (((1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    )) * (1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_29 * x_29) * x_29) * x_29) * x_29)
    ))) * tmpvar_18)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_18 * (1.0 - tmpvar_25))
       + tmpvar_25) * (
        (tmpvar_23 * (1.0 - tmpvar_25))
       + tmpvar_25)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_22)), tmpvar_26) * ((tmpvar_26 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_18) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_19) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_31 * x_31)
     * x_31) * x_31) * x_31))
  )));
  vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 8 textures, 4 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  tmpvar_5 = (tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_10;
  shadowVals_10.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_10.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_10.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_10.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_11;
  tmpvar_11 = lessThan (shadowVals_10, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_12;
  tmpvar_12 = _LightShadowData.xxxx;
  float tmpvar_13;
  if (tmpvar_11.x) {
    tmpvar_13 = tmpvar_12.x;
  } else {
    tmpvar_13 = 1.0;
  };
  float tmpvar_14;
  if (tmpvar_11.y) {
    tmpvar_14 = tmpvar_12.y;
  } else {
    tmpvar_14 = 1.0;
  };
  float tmpvar_15;
  if (tmpvar_11.z) {
    tmpvar_15 = tmpvar_12.z;
  } else {
    tmpvar_15 = 1.0;
  };
  float tmpvar_16;
  if (tmpvar_11.w) {
    tmpvar_16 = tmpvar_12.w;
  } else {
    tmpvar_16 = 1.0;
  };
  vec4 tmpvar_17;
  tmpvar_17.x = tmpvar_13;
  tmpvar_17.y = tmpvar_14;
  tmpvar_17.z = tmpvar_15;
  tmpvar_17.w = tmpvar_16;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_7);
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_1, tmpvar_18));
  vec3 tmpvar_20;
  tmpvar_20 = (_LightColor0.xyz * ((tmpvar_8.w * tmpvar_9.w) * dot (tmpvar_17, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_21;
  viewDir_21 = -(tmpvar_2);
  float tmpvar_22;
  tmpvar_22 = (1.0 - tmpvar_3.y);
  vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_18 + viewDir_21));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_1, viewDir_21));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_18, tmpvar_23));
  float tmpvar_26;
  tmpvar_26 = ((tmpvar_22 * tmpvar_22) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = (10.0 / log2((
    ((1.0 - tmpvar_22) * 0.968)
   + 0.03)));
  tmpvar_27 = (tmpvar_28 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_19);
  float x_30;
  x_30 = (1.0 - tmpvar_24);
  float tmpvar_31;
  tmpvar_31 = (0.5 + ((
    (2.0 * tmpvar_25)
   * tmpvar_25) * tmpvar_22));
  float x_32;
  x_32 = (1.0 - tmpvar_25);
  vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_5 * (tmpvar_20 * 
    (((1.0 + (
      (tmpvar_31 - 1.0)
     * 
      ((((x_29 * x_29) * x_29) * x_29) * x_29)
    )) * (1.0 + (
      (tmpvar_31 - 1.0)
     * 
      ((((x_30 * x_30) * x_30) * x_30) * x_30)
    ))) * tmpvar_19)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_19 * (1.0 - tmpvar_26))
       + tmpvar_26) * (
        (tmpvar_24 * (1.0 - tmpvar_26))
       + tmpvar_26)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_23)), tmpvar_27) * ((tmpvar_27 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_19) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_20) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_32 * x_32)
     * x_32) * x_32) * x_32))
  )));
  vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 88 math, 2 textures
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_8;
  tmpvar_8 = normalize(tmpvar_7);
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_12;
  tmpvar_12 = (1.0 - _Glossiness);
  vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_8 + viewDir_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, viewDir_11));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_8, tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * tmpvar_12) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = (10.0 / log2((
    ((1.0 - tmpvar_12) * 0.968)
   + 0.03)));
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  float x_19;
  x_19 = (1.0 - tmpvar_9);
  float x_20;
  x_20 = (1.0 - tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((
    (2.0 * tmpvar_15)
   * tmpvar_15) * tmpvar_12));
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_10 * 
    (((1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    )) * (1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    ))) * tmpvar_9)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_9 * (1.0 - tmpvar_16))
       + tmpvar_16) * (
        (tmpvar_14 * (1.0 - tmpvar_16))
       + tmpvar_16)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_13)), tmpvar_17) * ((tmpvar_17 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_9) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_10) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_22 * x_22)
     * x_22) * x_22) * x_22))
  )));
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 85 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_1, tmpvar_7));
  vec3 viewDir_9;
  viewDir_9 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_10;
  tmpvar_10 = (1.0 - _Glossiness);
  vec3 tmpvar_11;
  tmpvar_11 = normalize((tmpvar_7 + viewDir_9));
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, viewDir_9));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_7, tmpvar_11));
  float tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_10) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_15;
  float tmpvar_16;
  tmpvar_16 = (10.0 / log2((
    ((1.0 - tmpvar_10) * 0.968)
   + 0.03)));
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  float x_17;
  x_17 = (1.0 - tmpvar_8);
  float x_18;
  x_18 = (1.0 - tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = (0.5 + ((
    (2.0 * tmpvar_13)
   * tmpvar_13) * tmpvar_10));
  float x_20;
  x_20 = (1.0 - tmpvar_13);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (_LightColor0.xyz * 
    (((1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_17 * x_17) * x_17) * x_17) * x_17)
    )) * (1.0 + (
      (tmpvar_19 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    ))) * tmpvar_8)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_8 * (1.0 - tmpvar_14))
       + tmpvar_14) * (
        (tmpvar_12 * (1.0 - tmpvar_14))
       + tmpvar_14)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_11)), tmpvar_15) * ((tmpvar_15 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_8) * unity_LightGammaCorrectionConsts.x))
   * _LightColor0.xyz) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_20 * x_20)
     * x_20) * x_20) * x_20))
  )));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_8;
  tmpvar_8 = normalize(tmpvar_7);
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_12;
  tmpvar_12 = (1.0 - _Glossiness);
  vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_8 + viewDir_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, viewDir_11));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_8, tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * tmpvar_12) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = (10.0 / log2((
    ((1.0 - tmpvar_12) * 0.968)
   + 0.03)));
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  float x_19;
  x_19 = (1.0 - tmpvar_9);
  float x_20;
  x_20 = (1.0 - tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((
    (2.0 * tmpvar_15)
   * tmpvar_15) * tmpvar_12));
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_10 * 
    (((1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    )) * (1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    ))) * tmpvar_9)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_9 * (1.0 - tmpvar_16))
       + tmpvar_16) * (
        (tmpvar_14 * (1.0 - tmpvar_16))
       + tmpvar_16)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_13)), tmpvar_17) * ((tmpvar_17 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_9) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_10) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_22 * x_22)
     * x_22) * x_22) * x_22))
  )));
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 89 math, 3 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_8;
  tmpvar_8 = normalize(tmpvar_7);
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_12;
  tmpvar_12 = (1.0 - _Glossiness);
  vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_8 + viewDir_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, viewDir_11));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_8, tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * tmpvar_12) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = (10.0 / log2((
    ((1.0 - tmpvar_12) * 0.968)
   + 0.03)));
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  float x_19;
  x_19 = (1.0 - tmpvar_9);
  float x_20;
  x_20 = (1.0 - tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((
    (2.0 * tmpvar_15)
   * tmpvar_15) * tmpvar_12));
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_10 * 
    (((1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    )) * (1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    ))) * tmpvar_9)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_9 * (1.0 - tmpvar_16))
       + tmpvar_16) * (
        (tmpvar_14 * (1.0 - tmpvar_16))
       + tmpvar_16)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_13)), tmpvar_17) * ((tmpvar_17 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_9) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_10) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_22 * x_22)
     * x_22) * x_22) * x_22))
  )));
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 86 math, 2 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_1, tmpvar_7));
  vec3 tmpvar_9;
  tmpvar_9 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_10;
  viewDir_10 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  tmpvar_12 = normalize((tmpvar_7 + viewDir_10));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_1, viewDir_10));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = ((tmpvar_11 * tmpvar_11) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_16;
  float tmpvar_17;
  tmpvar_17 = (10.0 / log2((
    ((1.0 - tmpvar_11) * 0.968)
   + 0.03)));
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  float x_18;
  x_18 = (1.0 - tmpvar_8);
  float x_19;
  x_19 = (1.0 - tmpvar_13);
  float tmpvar_20;
  tmpvar_20 = (0.5 + ((
    (2.0 * tmpvar_14)
   * tmpvar_14) * tmpvar_11));
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_9 * 
    (((1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    )) * (1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    ))) * tmpvar_8)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_8 * (1.0 - tmpvar_15))
       + tmpvar_15) * (
        (tmpvar_13 * (1.0 - tmpvar_15))
       + tmpvar_15)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_12)), tmpvar_16) * ((tmpvar_16 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_8) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_9) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_21 * x_21)
     * x_21) * x_21) * x_21))
  )));
  vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_23;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 4 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_8;
  tmpvar_8 = normalize(tmpvar_7);
  float tmpvar_9;
  tmpvar_9 = max (0.0, dot (tmpvar_1, tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_11;
  viewDir_11 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_12;
  tmpvar_12 = (1.0 - _Glossiness);
  vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_8 + viewDir_11));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_1, viewDir_11));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_8, tmpvar_13));
  float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * tmpvar_12) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = (10.0 / log2((
    ((1.0 - tmpvar_12) * 0.968)
   + 0.03)));
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  float x_19;
  x_19 = (1.0 - tmpvar_9);
  float x_20;
  x_20 = (1.0 - tmpvar_14);
  float tmpvar_21;
  tmpvar_21 = (0.5 + ((
    (2.0 * tmpvar_15)
   * tmpvar_15) * tmpvar_12));
  float x_22;
  x_22 = (1.0 - tmpvar_15);
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_10 * 
    (((1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    )) * (1.0 + (
      (tmpvar_21 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    ))) * tmpvar_9)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_9 * (1.0 - tmpvar_16))
       + tmpvar_16) * (
        (tmpvar_14 * (1.0 - tmpvar_16))
       + tmpvar_16)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_13)), tmpvar_17) * ((tmpvar_17 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_9) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_10) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_22 * x_22)
     * x_22) * x_22) * x_22))
  )));
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 86 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_1, tmpvar_7));
  vec3 tmpvar_9;
  tmpvar_9 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_10;
  viewDir_10 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  tmpvar_12 = normalize((tmpvar_7 + viewDir_10));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_1, viewDir_10));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = ((tmpvar_11 * tmpvar_11) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_16;
  float tmpvar_17;
  tmpvar_17 = (10.0 / log2((
    ((1.0 - tmpvar_11) * 0.968)
   + 0.03)));
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  float x_18;
  x_18 = (1.0 - tmpvar_8);
  float x_19;
  x_19 = (1.0 - tmpvar_13);
  float tmpvar_20;
  tmpvar_20 = (0.5 + ((
    (2.0 * tmpvar_14)
   * tmpvar_14) * tmpvar_11));
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_9 * 
    (((1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    )) * (1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    ))) * tmpvar_8)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_8 * (1.0 - tmpvar_15))
       + tmpvar_15) * (
        (tmpvar_13 * (1.0 - tmpvar_15))
       + tmpvar_15)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_12)), tmpvar_16) * ((tmpvar_16 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_8) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_9) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_21 * x_21)
     * x_21) * x_21) * x_21))
  )));
  vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_23;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 87 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  float tmpvar_8;
  tmpvar_8 = max (0.0, dot (tmpvar_1, tmpvar_7));
  vec3 tmpvar_9;
  tmpvar_9 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_10;
  viewDir_10 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_11;
  tmpvar_11 = (1.0 - _Glossiness);
  vec3 tmpvar_12;
  tmpvar_12 = normalize((tmpvar_7 + viewDir_10));
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_1, viewDir_10));
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_7, tmpvar_12));
  float tmpvar_15;
  tmpvar_15 = ((tmpvar_11 * tmpvar_11) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_16;
  float tmpvar_17;
  tmpvar_17 = (10.0 / log2((
    ((1.0 - tmpvar_11) * 0.968)
   + 0.03)));
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  float x_18;
  x_18 = (1.0 - tmpvar_8);
  float x_19;
  x_19 = (1.0 - tmpvar_13);
  float tmpvar_20;
  tmpvar_20 = (0.5 + ((
    (2.0 * tmpvar_14)
   * tmpvar_14) * tmpvar_11));
  float x_21;
  x_21 = (1.0 - tmpvar_14);
  vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_9 * 
    (((1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_18 * x_18) * x_18) * x_18) * x_18)
    )) * (1.0 + (
      (tmpvar_20 - 1.0)
     * 
      ((((x_19 * x_19) * x_19) * x_19) * x_19)
    ))) * tmpvar_8)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_8 * (1.0 - tmpvar_15))
       + tmpvar_15) * (
        (tmpvar_13 * (1.0 - tmpvar_15))
       + tmpvar_15)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_12)), tmpvar_16) * ((tmpvar_16 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_8) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_9) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_21 * x_21)
     * x_21) * x_21) * x_21))
  )));
  vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_23;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 3 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - tmpvar_7) + (tmpvar_2 * tmpvar_7));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_12;
  tmpvar_12 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_14;
  if ((tmpvar_13.x < tmpvar_12)) {
    tmpvar_14 = _LightShadowData.x;
  } else {
    tmpvar_14 = 1.0;
  };
  vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_10);
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_1, tmpvar_15));
  vec3 tmpvar_17;
  tmpvar_17 = (_LightColor0.xyz * (tmpvar_11.w * tmpvar_14));
  vec3 viewDir_18;
  viewDir_18 = -(tmpvar_4);
  float tmpvar_19;
  tmpvar_19 = (1.0 - _Glossiness);
  vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_15 + viewDir_18));
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_1, viewDir_18));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_15, tmpvar_20));
  float tmpvar_23;
  tmpvar_23 = ((tmpvar_19 * tmpvar_19) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = (10.0 / log2((
    ((1.0 - tmpvar_19) * 0.968)
   + 0.03)));
  tmpvar_24 = (tmpvar_25 * tmpvar_25);
  float x_26;
  x_26 = (1.0 - tmpvar_16);
  float x_27;
  x_27 = (1.0 - tmpvar_21);
  float tmpvar_28;
  tmpvar_28 = (0.5 + ((
    (2.0 * tmpvar_22)
   * tmpvar_22) * tmpvar_19));
  float x_29;
  x_29 = (1.0 - tmpvar_22);
  vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = ((tmpvar_8 * (tmpvar_17 * 
    (((1.0 + (
      (tmpvar_28 - 1.0)
     * 
      ((((x_26 * x_26) * x_26) * x_26) * x_26)
    )) * (1.0 + (
      (tmpvar_28 - 1.0)
     * 
      ((((x_27 * x_27) * x_27) * x_27) * x_27)
    ))) * tmpvar_16)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_16 * (1.0 - tmpvar_23))
       + tmpvar_23) * (
        (tmpvar_21 * (1.0 - tmpvar_23))
       + tmpvar_23)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_20)), tmpvar_24) * ((tmpvar_24 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_16) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_17) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_29 * x_29)
     * x_29) * x_29) * x_29))
  )));
  vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = tmpvar_9;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 96 math, 4 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - tmpvar_7) + (tmpvar_2 * tmpvar_7));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_13;
  tmpvar_13 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_15;
  if ((tmpvar_14.x < tmpvar_13)) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_10);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_1, tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18 = (_LightColor0.xyz * ((tmpvar_11.w * tmpvar_12.w) * tmpvar_15));
  vec3 viewDir_19;
  viewDir_19 = -(tmpvar_4);
  float tmpvar_20;
  tmpvar_20 = (1.0 - _Glossiness);
  vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_16 + viewDir_19));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_1, viewDir_19));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_16, tmpvar_21));
  float tmpvar_24;
  tmpvar_24 = ((tmpvar_20 * tmpvar_20) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (10.0 / log2((
    ((1.0 - tmpvar_20) * 0.968)
   + 0.03)));
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  float x_27;
  x_27 = (1.0 - tmpvar_17);
  float x_28;
  x_28 = (1.0 - tmpvar_22);
  float tmpvar_29;
  tmpvar_29 = (0.5 + ((
    (2.0 * tmpvar_23)
   * tmpvar_23) * tmpvar_20));
  float x_30;
  x_30 = (1.0 - tmpvar_23);
  vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = ((tmpvar_8 * (tmpvar_18 * 
    (((1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_27 * x_27) * x_27) * x_27) * x_27)
    )) * (1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    ))) * tmpvar_17)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_17 * (1.0 - tmpvar_24))
       + tmpvar_24) * (
        (tmpvar_22 * (1.0 - tmpvar_24))
       + tmpvar_24)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_21)), tmpvar_25) * ((tmpvar_25 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_17) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_18) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_30 * x_30)
     * x_30) * x_30) * x_30))
  )));
  vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = tmpvar_9;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_8;
  vec3 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_8.x = shadow2D (_ShadowMapTexture, (tmpvar_9 + _ShadowOffsets[0].xyz)).x;
  shadows_8.y = shadow2D (_ShadowMapTexture, (tmpvar_9 + _ShadowOffsets[1].xyz)).x;
  shadows_8.z = shadow2D (_ShadowMapTexture, (tmpvar_9 + _ShadowOffsets[2].xyz)).x;
  shadows_8.w = shadow2D (_ShadowMapTexture, (tmpvar_9 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_10;
  tmpvar_10 = (_LightShadowData.xxxx + (shadows_8 * (1.0 - _LightShadowData.xxxx)));
  shadows_8 = tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_7);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_1, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (tmpvar_10, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_1, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    (tmpvar_4 * tmpvar_6)
   * tmpvar_2) * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_5 + 
    ((1.0 - tmpvar_5) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = ((1.0 - tmpvar_6) + (tmpvar_2 * tmpvar_6));
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 103 math, 6 textures, 4 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - tmpvar_7) + (tmpvar_2 * tmpvar_7));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_12;
  shadowVals_12.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_12.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_12.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_12.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_13;
  tmpvar_13 = lessThan (shadowVals_12, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_14;
  tmpvar_14 = _LightShadowData.xxxx;
  float tmpvar_15;
  if (tmpvar_13.x) {
    tmpvar_15 = tmpvar_14.x;
  } else {
    tmpvar_15 = 1.0;
  };
  float tmpvar_16;
  if (tmpvar_13.y) {
    tmpvar_16 = tmpvar_14.y;
  } else {
    tmpvar_16 = 1.0;
  };
  float tmpvar_17;
  if (tmpvar_13.z) {
    tmpvar_17 = tmpvar_14.z;
  } else {
    tmpvar_17 = 1.0;
  };
  float tmpvar_18;
  if (tmpvar_13.w) {
    tmpvar_18 = tmpvar_14.w;
  } else {
    tmpvar_18 = 1.0;
  };
  vec4 tmpvar_19;
  tmpvar_19.x = tmpvar_15;
  tmpvar_19.y = tmpvar_16;
  tmpvar_19.z = tmpvar_17;
  tmpvar_19.w = tmpvar_18;
  vec3 tmpvar_20;
  tmpvar_20 = normalize(tmpvar_10);
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_1, tmpvar_20));
  vec3 tmpvar_22;
  tmpvar_22 = (_LightColor0.xyz * (tmpvar_11.w * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_23;
  viewDir_23 = -(tmpvar_4);
  float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  vec3 tmpvar_25;
  tmpvar_25 = normalize((tmpvar_20 + viewDir_23));
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_1, viewDir_23));
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_20, tmpvar_25));
  float tmpvar_28;
  tmpvar_28 = ((tmpvar_24 * tmpvar_24) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (10.0 / log2((
    ((1.0 - tmpvar_24) * 0.968)
   + 0.03)));
  tmpvar_29 = (tmpvar_30 * tmpvar_30);
  float x_31;
  x_31 = (1.0 - tmpvar_21);
  float x_32;
  x_32 = (1.0 - tmpvar_26);
  float tmpvar_33;
  tmpvar_33 = (0.5 + ((
    (2.0 * tmpvar_27)
   * tmpvar_27) * tmpvar_24));
  float x_34;
  x_34 = (1.0 - tmpvar_27);
  vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = ((tmpvar_8 * (tmpvar_22 * 
    (((1.0 + (
      (tmpvar_33 - 1.0)
     * 
      ((((x_31 * x_31) * x_31) * x_31) * x_31)
    )) * (1.0 + (
      (tmpvar_33 - 1.0)
     * 
      ((((x_32 * x_32) * x_32) * x_32) * x_32)
    ))) * tmpvar_21)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_21 * (1.0 - tmpvar_28))
       + tmpvar_28) * (
        (tmpvar_26 * (1.0 - tmpvar_28))
       + tmpvar_28)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_25)), tmpvar_29) * ((tmpvar_29 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_21) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_22) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_34 * x_34)
     * x_34) * x_34) * x_34))
  )));
  vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = tmpvar_9;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 7 textures, 4 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_2);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - tmpvar_7) + (tmpvar_2 * tmpvar_7));
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_13;
  shadowVals_13.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_13.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_13.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_13.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_14;
  tmpvar_14 = lessThan (shadowVals_13, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_15;
  tmpvar_15 = _LightShadowData.xxxx;
  float tmpvar_16;
  if (tmpvar_14.x) {
    tmpvar_16 = tmpvar_15.x;
  } else {
    tmpvar_16 = 1.0;
  };
  float tmpvar_17;
  if (tmpvar_14.y) {
    tmpvar_17 = tmpvar_15.y;
  } else {
    tmpvar_17 = 1.0;
  };
  float tmpvar_18;
  if (tmpvar_14.z) {
    tmpvar_18 = tmpvar_15.z;
  } else {
    tmpvar_18 = 1.0;
  };
  float tmpvar_19;
  if (tmpvar_14.w) {
    tmpvar_19 = tmpvar_15.w;
  } else {
    tmpvar_19 = 1.0;
  };
  vec4 tmpvar_20;
  tmpvar_20.x = tmpvar_16;
  tmpvar_20.y = tmpvar_17;
  tmpvar_20.z = tmpvar_18;
  tmpvar_20.w = tmpvar_19;
  vec3 tmpvar_21;
  tmpvar_21 = normalize(tmpvar_10);
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_1, tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23 = (_LightColor0.xyz * ((tmpvar_11.w * tmpvar_12.w) * dot (tmpvar_20, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_24;
  viewDir_24 = -(tmpvar_4);
  float tmpvar_25;
  tmpvar_25 = (1.0 - _Glossiness);
  vec3 tmpvar_26;
  tmpvar_26 = normalize((tmpvar_21 + viewDir_24));
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_1, viewDir_24));
  float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_21, tmpvar_26));
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_25 * tmpvar_25) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (10.0 / log2((
    ((1.0 - tmpvar_25) * 0.968)
   + 0.03)));
  tmpvar_30 = (tmpvar_31 * tmpvar_31);
  float x_32;
  x_32 = (1.0 - tmpvar_22);
  float x_33;
  x_33 = (1.0 - tmpvar_27);
  float tmpvar_34;
  tmpvar_34 = (0.5 + ((
    (2.0 * tmpvar_28)
   * tmpvar_28) * tmpvar_25));
  float x_35;
  x_35 = (1.0 - tmpvar_28);
  vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = ((tmpvar_8 * (tmpvar_23 * 
    (((1.0 + (
      (tmpvar_34 - 1.0)
     * 
      ((((x_32 * x_32) * x_32) * x_32) * x_32)
    )) * (1.0 + (
      (tmpvar_34 - 1.0)
     * 
      ((((x_33 * x_33) * x_33) * x_33) * x_33)
    ))) * tmpvar_22)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_22 * (1.0 - tmpvar_29))
       + tmpvar_29) * (
        (tmpvar_27 * (1.0 - tmpvar_29))
       + tmpvar_29)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_1, tmpvar_26)), tmpvar_30) * ((tmpvar_30 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_22) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_23) * (tmpvar_6 + 
    ((1.0 - tmpvar_6) * (((
      (x_35 * x_35)
     * x_35) * x_35) * x_35))
  )));
  vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = tmpvar_9;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 92 math, 4 textures
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 89 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_10));
  vec3 viewDir_12;
  viewDir_12 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_13;
  tmpvar_13 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_10 + viewDir_12));
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_6, viewDir_12));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_10, tmpvar_14));
  float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * tmpvar_13) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_18;
  float tmpvar_19;
  tmpvar_19 = (10.0 / log2((
    ((1.0 - tmpvar_13) * 0.968)
   + 0.03)));
  tmpvar_18 = (tmpvar_19 * tmpvar_19);
  float x_20;
  x_20 = (1.0 - tmpvar_11);
  float x_21;
  x_21 = (1.0 - tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = (0.5 + ((
    (2.0 * tmpvar_16)
   * tmpvar_16) * tmpvar_13));
  float x_23;
  x_23 = (1.0 - tmpvar_16);
  vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (_LightColor0.xyz * 
    (((1.0 + (
      (tmpvar_22 - 1.0)
     * 
      ((((x_20 * x_20) * x_20) * x_20) * x_20)
    )) * (1.0 + (
      (tmpvar_22 - 1.0)
     * 
      ((((x_21 * x_21) * x_21) * x_21) * x_21)
    ))) * tmpvar_11)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_11 * (1.0 - tmpvar_17))
       + tmpvar_17) * (
        (tmpvar_15 * (1.0 - tmpvar_17))
       + tmpvar_17)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_14)), tmpvar_18) * ((tmpvar_18 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_11) * unity_LightGammaCorrectionConsts.x))
   * _LightColor0.xyz) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_23 * x_23)
     * x_23) * x_23) * x_23))
  )));
  vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 5 textures
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 5 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_10));
  vec3 tmpvar_12;
  tmpvar_12 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_14;
  tmpvar_14 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_10 + viewDir_13));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_10, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = ((tmpvar_14 * tmpvar_14) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (10.0 / log2((
    ((1.0 - tmpvar_14) * 0.968)
   + 0.03)));
  tmpvar_19 = (tmpvar_20 * tmpvar_20);
  float x_21;
  x_21 = (1.0 - tmpvar_11);
  float x_22;
  x_22 = (1.0 - tmpvar_16);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((
    (2.0 * tmpvar_17)
   * tmpvar_17) * tmpvar_14));
  float x_24;
  x_24 = (1.0 - tmpvar_17);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_12 * 
    (((1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_21 * x_21) * x_21) * x_21) * x_21)
    )) * (1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    ))) * tmpvar_11)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_11 * (1.0 - tmpvar_18))
       + tmpvar_18) * (
        (tmpvar_16 * (1.0 - tmpvar_18))
       + tmpvar_18)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_15)), tmpvar_19) * ((tmpvar_19 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_11) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_12) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_24 * x_24)
     * x_24) * x_24) * x_24))
  )));
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = tmpvar_25.xyz;
  xlat_varoutput_26.w = 1.0;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 102 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_6, tmpvar_11));
  vec3 tmpvar_13;
  tmpvar_13 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_11 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_6, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_11, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_12);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_13 * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_12)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_12 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_12) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_13) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_10));
  vec3 tmpvar_12;
  tmpvar_12 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_14;
  tmpvar_14 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_10 + viewDir_13));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_10, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = ((tmpvar_14 * tmpvar_14) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (10.0 / log2((
    ((1.0 - tmpvar_14) * 0.968)
   + 0.03)));
  tmpvar_19 = (tmpvar_20 * tmpvar_20);
  float x_21;
  x_21 = (1.0 - tmpvar_11);
  float x_22;
  x_22 = (1.0 - tmpvar_16);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((
    (2.0 * tmpvar_17)
   * tmpvar_17) * tmpvar_14));
  float x_24;
  x_24 = (1.0 - tmpvar_17);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_12 * 
    (((1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_21 * x_21) * x_21) * x_21) * x_21)
    )) * (1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    ))) * tmpvar_11)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_11 * (1.0 - tmpvar_18))
       + tmpvar_18) * (
        (tmpvar_16 * (1.0 - tmpvar_18))
       + tmpvar_18)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_15)), tmpvar_19) * ((tmpvar_19 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_11) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_12) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_24 * x_24)
     * x_24) * x_24) * x_24))
  )));
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = tmpvar_25.xyz;
  xlat_varoutput_26.w = 1.0;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 91 math, 5 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_6, tmpvar_10));
  vec3 tmpvar_12;
  tmpvar_12 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_13;
  viewDir_13 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_14;
  tmpvar_14 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_10 + viewDir_13));
  float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_6, viewDir_13));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_10, tmpvar_15));
  float tmpvar_18;
  tmpvar_18 = ((tmpvar_14 * tmpvar_14) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (10.0 / log2((
    ((1.0 - tmpvar_14) * 0.968)
   + 0.03)));
  tmpvar_19 = (tmpvar_20 * tmpvar_20);
  float x_21;
  x_21 = (1.0 - tmpvar_11);
  float x_22;
  x_22 = (1.0 - tmpvar_16);
  float tmpvar_23;
  tmpvar_23 = (0.5 + ((
    (2.0 * tmpvar_17)
   * tmpvar_17) * tmpvar_14));
  float x_24;
  x_24 = (1.0 - tmpvar_17);
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_12 * 
    (((1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_21 * x_21) * x_21) * x_21) * x_21)
    )) * (1.0 + (
      (tmpvar_23 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    ))) * tmpvar_11)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_11 * (1.0 - tmpvar_18))
       + tmpvar_18) * (
        (tmpvar_16 * (1.0 - tmpvar_18))
       + tmpvar_18)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_15)), tmpvar_19) * ((tmpvar_19 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_11) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_12) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_24 * x_24)
     * x_24) * x_24) * x_24))
  )));
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = tmpvar_25.xyz;
  xlat_varoutput_26.w = 1.0;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 5 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  tmpvar_10 = (tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_14;
  tmpvar_14 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_16;
  if ((tmpvar_15.x < tmpvar_14)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_12);
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_6, tmpvar_17));
  vec3 tmpvar_19;
  tmpvar_19 = (_LightColor0.xyz * (tmpvar_13.w * tmpvar_16));
  vec3 viewDir_20;
  viewDir_20 = -(tmpvar_7);
  float tmpvar_21;
  tmpvar_21 = (1.0 - tmpvar_8.y);
  vec3 tmpvar_22;
  tmpvar_22 = normalize((tmpvar_17 + viewDir_20));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_6, viewDir_20));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_17, tmpvar_22));
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_21 * tmpvar_21) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (10.0 / log2((
    ((1.0 - tmpvar_21) * 0.968)
   + 0.03)));
  tmpvar_26 = (tmpvar_27 * tmpvar_27);
  float x_28;
  x_28 = (1.0 - tmpvar_18);
  float x_29;
  x_29 = (1.0 - tmpvar_23);
  float tmpvar_30;
  tmpvar_30 = (0.5 + ((
    (2.0 * tmpvar_24)
   * tmpvar_24) * tmpvar_21));
  float x_31;
  x_31 = (1.0 - tmpvar_24);
  vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = ((tmpvar_10 * (tmpvar_19 * 
    (((1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    )) * (1.0 + (
      (tmpvar_30 - 1.0)
     * 
      ((((x_29 * x_29) * x_29) * x_29) * x_29)
    ))) * tmpvar_18)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_18 * (1.0 - tmpvar_25))
       + tmpvar_25) * (
        (tmpvar_23 * (1.0 - tmpvar_25))
       + tmpvar_25)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_22)), tmpvar_26) * ((tmpvar_26 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_18) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_19) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_31 * x_31)
     * x_31) * x_31) * x_31))
  )));
  vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 6 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  tmpvar_10 = (tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_15;
  tmpvar_15 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_17;
  if ((tmpvar_16.x < tmpvar_15)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_12);
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, tmpvar_18));
  vec3 tmpvar_20;
  tmpvar_20 = (_LightColor0.xyz * ((tmpvar_13.w * tmpvar_14.w) * tmpvar_17));
  vec3 viewDir_21;
  viewDir_21 = -(tmpvar_7);
  float tmpvar_22;
  tmpvar_22 = (1.0 - tmpvar_8.y);
  vec3 tmpvar_23;
  tmpvar_23 = normalize((tmpvar_18 + viewDir_21));
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_6, viewDir_21));
  float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_18, tmpvar_23));
  float tmpvar_26;
  tmpvar_26 = ((tmpvar_22 * tmpvar_22) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = (10.0 / log2((
    ((1.0 - tmpvar_22) * 0.968)
   + 0.03)));
  tmpvar_27 = (tmpvar_28 * tmpvar_28);
  float x_29;
  x_29 = (1.0 - tmpvar_19);
  float x_30;
  x_30 = (1.0 - tmpvar_24);
  float tmpvar_31;
  tmpvar_31 = (0.5 + ((
    (2.0 * tmpvar_25)
   * tmpvar_25) * tmpvar_22));
  float x_32;
  x_32 = (1.0 - tmpvar_25);
  vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_10 * (tmpvar_20 * 
    (((1.0 + (
      (tmpvar_31 - 1.0)
     * 
      ((((x_29 * x_29) * x_29) * x_29) * x_29)
    )) * (1.0 + (
      (tmpvar_31 - 1.0)
     * 
      ((((x_30 * x_30) * x_30) * x_30) * x_30)
    ))) * tmpvar_19)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_19 * (1.0 - tmpvar_26))
       + tmpvar_26) * (
        (tmpvar_24 * (1.0 - tmpvar_26))
       + tmpvar_26)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_23)), tmpvar_27) * ((tmpvar_27 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_19) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_20) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_32 * x_32)
     * x_32) * x_32) * x_32))
  )));
  vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 108 math, 9 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_11;
  vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_11.x = shadow2D (_ShadowMapTexture, (tmpvar_12 + _ShadowOffsets[0].xyz)).x;
  shadows_11.y = shadow2D (_ShadowMapTexture, (tmpvar_12 + _ShadowOffsets[1].xyz)).x;
  shadows_11.z = shadow2D (_ShadowMapTexture, (tmpvar_12 + _ShadowOffsets[2].xyz)).x;
  shadows_11.w = shadow2D (_ShadowMapTexture, (tmpvar_12 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_13;
  tmpvar_13 = (_LightShadowData.xxxx + (shadows_11 * (1.0 - _LightShadowData.xxxx)));
  shadows_11 = tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_10);
  float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_6, tmpvar_14));
  vec3 tmpvar_16;
  tmpvar_16 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (tmpvar_13, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_17;
  viewDir_17 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_18;
  tmpvar_18 = (1.0 - tmpvar_7.y);
  vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_14 + viewDir_17));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_6, viewDir_17));
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_14, tmpvar_19));
  float tmpvar_22;
  tmpvar_22 = ((tmpvar_18 * tmpvar_18) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_23;
  float tmpvar_24;
  tmpvar_24 = (10.0 / log2((
    ((1.0 - tmpvar_18) * 0.968)
   + 0.03)));
  tmpvar_23 = (tmpvar_24 * tmpvar_24);
  float x_25;
  x_25 = (1.0 - tmpvar_15);
  float x_26;
  x_26 = (1.0 - tmpvar_20);
  float tmpvar_27;
  tmpvar_27 = (0.5 + ((
    (2.0 * tmpvar_21)
   * tmpvar_21) * tmpvar_18));
  float x_28;
  x_28 = (1.0 - tmpvar_21);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_8 * 
    (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w))
  ) * (tmpvar_16 * 
    (((1.0 + (
      (tmpvar_27 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    )) * (1.0 + (
      (tmpvar_27 - 1.0)
     * 
      ((((x_26 * x_26) * x_26) * x_26) * x_26)
    ))) * tmpvar_15)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_15 * (1.0 - tmpvar_22))
       + tmpvar_22) * (
        (tmpvar_20 * (1.0 - tmpvar_22))
       + tmpvar_22)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_19)), tmpvar_23) * ((tmpvar_23 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_15) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_16) * (tmpvar_9 + 
    ((1.0 - tmpvar_9) * (((
      (x_28 * x_28)
     * x_28) * x_28) * x_28))
  )));
  vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 107 math, 8 textures, 4 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  tmpvar_10 = (tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_14;
  shadowVals_14.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_14.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_14.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_14.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_15;
  tmpvar_15 = lessThan (shadowVals_14, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_16;
  tmpvar_16 = _LightShadowData.xxxx;
  float tmpvar_17;
  if (tmpvar_15.x) {
    tmpvar_17 = tmpvar_16.x;
  } else {
    tmpvar_17 = 1.0;
  };
  float tmpvar_18;
  if (tmpvar_15.y) {
    tmpvar_18 = tmpvar_16.y;
  } else {
    tmpvar_18 = 1.0;
  };
  float tmpvar_19;
  if (tmpvar_15.z) {
    tmpvar_19 = tmpvar_16.z;
  } else {
    tmpvar_19 = 1.0;
  };
  float tmpvar_20;
  if (tmpvar_15.w) {
    tmpvar_20 = tmpvar_16.w;
  } else {
    tmpvar_20 = 1.0;
  };
  vec4 tmpvar_21;
  tmpvar_21.x = tmpvar_17;
  tmpvar_21.y = tmpvar_18;
  tmpvar_21.z = tmpvar_19;
  tmpvar_21.w = tmpvar_20;
  vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_6, tmpvar_22));
  vec3 tmpvar_24;
  tmpvar_24 = (_LightColor0.xyz * (tmpvar_13.w * dot (tmpvar_21, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_25;
  viewDir_25 = -(tmpvar_7);
  float tmpvar_26;
  tmpvar_26 = (1.0 - tmpvar_8.y);
  vec3 tmpvar_27;
  tmpvar_27 = normalize((tmpvar_22 + viewDir_25));
  float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, viewDir_25));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_22, tmpvar_27));
  float tmpvar_30;
  tmpvar_30 = ((tmpvar_26 * tmpvar_26) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = (10.0 / log2((
    ((1.0 - tmpvar_26) * 0.968)
   + 0.03)));
  tmpvar_31 = (tmpvar_32 * tmpvar_32);
  float x_33;
  x_33 = (1.0 - tmpvar_23);
  float x_34;
  x_34 = (1.0 - tmpvar_28);
  float tmpvar_35;
  tmpvar_35 = (0.5 + ((
    (2.0 * tmpvar_29)
   * tmpvar_29) * tmpvar_26));
  float x_36;
  x_36 = (1.0 - tmpvar_29);
  vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = ((tmpvar_10 * (tmpvar_24 * 
    (((1.0 + (
      (tmpvar_35 - 1.0)
     * 
      ((((x_33 * x_33) * x_33) * x_33) * x_33)
    )) * (1.0 + (
      (tmpvar_35 - 1.0)
     * 
      ((((x_34 * x_34) * x_34) * x_34) * x_34)
    ))) * tmpvar_23)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_23 * (1.0 - tmpvar_30))
       + tmpvar_30) * (
        (tmpvar_28 * (1.0 - tmpvar_30))
       + tmpvar_30)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_27)), tmpvar_31) * ((tmpvar_31 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_23) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_24) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_36 * x_36)
     * x_36) * x_36) * x_36))
  )));
  vec4 xlat_varoutput_38;
  xlat_varoutput_38.xyz = tmpvar_37.xyz;
  xlat_varoutput_38.w = 1.0;
  gl_FragData[0] = xlat_varoutput_38;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 108 math, 9 textures, 4 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  tmpvar_10 = (tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_15;
  shadowVals_15.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_15.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_15.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_15.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_16;
  tmpvar_16 = lessThan (shadowVals_15, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_17;
  tmpvar_17 = _LightShadowData.xxxx;
  float tmpvar_18;
  if (tmpvar_16.x) {
    tmpvar_18 = tmpvar_17.x;
  } else {
    tmpvar_18 = 1.0;
  };
  float tmpvar_19;
  if (tmpvar_16.y) {
    tmpvar_19 = tmpvar_17.y;
  } else {
    tmpvar_19 = 1.0;
  };
  float tmpvar_20;
  if (tmpvar_16.z) {
    tmpvar_20 = tmpvar_17.z;
  } else {
    tmpvar_20 = 1.0;
  };
  float tmpvar_21;
  if (tmpvar_16.w) {
    tmpvar_21 = tmpvar_17.w;
  } else {
    tmpvar_21 = 1.0;
  };
  vec4 tmpvar_22;
  tmpvar_22.x = tmpvar_18;
  tmpvar_22.y = tmpvar_19;
  tmpvar_22.z = tmpvar_20;
  tmpvar_22.w = tmpvar_21;
  vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_12);
  float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_6, tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25 = (_LightColor0.xyz * ((tmpvar_13.w * tmpvar_14.w) * dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_26;
  viewDir_26 = -(tmpvar_7);
  float tmpvar_27;
  tmpvar_27 = (1.0 - tmpvar_8.y);
  vec3 tmpvar_28;
  tmpvar_28 = normalize((tmpvar_23 + viewDir_26));
  float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, viewDir_26));
  float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_23, tmpvar_28));
  float tmpvar_31;
  tmpvar_31 = ((tmpvar_27 * tmpvar_27) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = (10.0 / log2((
    ((1.0 - tmpvar_27) * 0.968)
   + 0.03)));
  tmpvar_32 = (tmpvar_33 * tmpvar_33);
  float x_34;
  x_34 = (1.0 - tmpvar_24);
  float x_35;
  x_35 = (1.0 - tmpvar_29);
  float tmpvar_36;
  tmpvar_36 = (0.5 + ((
    (2.0 * tmpvar_30)
   * tmpvar_30) * tmpvar_27));
  float x_37;
  x_37 = (1.0 - tmpvar_30);
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = ((tmpvar_10 * (tmpvar_25 * 
    (((1.0 + (
      (tmpvar_36 - 1.0)
     * 
      ((((x_34 * x_34) * x_34) * x_34) * x_34)
    )) * (1.0 + (
      (tmpvar_36 - 1.0)
     * 
      ((((x_35 * x_35) * x_35) * x_35) * x_35)
    ))) * tmpvar_24)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_24 * (1.0 - tmpvar_31))
       + tmpvar_31) * (
        (tmpvar_29 * (1.0 - tmpvar_31))
       + tmpvar_31)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_6, tmpvar_28)), tmpvar_32) * ((tmpvar_32 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_24) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_25) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_37 * x_37)
     * x_37) * x_37) * x_37))
  )));
  vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = tmpvar_38.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 96 math, 3 textures
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_8, tmpvar_13));
  vec3 tmpvar_15;
  tmpvar_15 = (_LightColor0.xyz * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w);
  vec3 viewDir_16;
  viewDir_16 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_13 + viewDir_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_8, viewDir_16));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_17 * tmpvar_17) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (10.0 / log2((
    ((1.0 - tmpvar_17) * 0.968)
   + 0.03)));
  tmpvar_22 = (tmpvar_23 * tmpvar_23);
  float x_24;
  x_24 = (1.0 - tmpvar_14);
  float x_25;
  x_25 = (1.0 - tmpvar_19);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((
    (2.0 * tmpvar_20)
   * tmpvar_20) * tmpvar_17));
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_15 * 
    (((1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    )) * (1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    ))) * tmpvar_14)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_14 * (1.0 - tmpvar_21))
       + tmpvar_21) * (
        (tmpvar_19 * (1.0 - tmpvar_21))
       + tmpvar_21)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_18)), tmpvar_22) * ((tmpvar_22 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_14) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_15) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_27 * x_27)
     * x_27) * x_27) * x_27))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_8, tmpvar_12));
  vec3 viewDir_14;
  viewDir_14 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_15;
  tmpvar_15 = (1.0 - _Glossiness);
  vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_12 + viewDir_14));
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_8, viewDir_14));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_12, tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((tmpvar_15 * tmpvar_15) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = (10.0 / log2((
    ((1.0 - tmpvar_15) * 0.968)
   + 0.03)));
  tmpvar_20 = (tmpvar_21 * tmpvar_21);
  float x_22;
  x_22 = (1.0 - tmpvar_13);
  float x_23;
  x_23 = (1.0 - tmpvar_17);
  float tmpvar_24;
  tmpvar_24 = (0.5 + ((
    (2.0 * tmpvar_18)
   * tmpvar_18) * tmpvar_15));
  float x_25;
  x_25 = (1.0 - tmpvar_18);
  vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (_LightColor0.xyz * 
    (((1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_22 * x_22) * x_22) * x_22) * x_22)
    )) * (1.0 + (
      (tmpvar_24 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_19))
       + tmpvar_19) * (
        (tmpvar_17 * (1.0 - tmpvar_19))
       + tmpvar_19)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_16)), tmpvar_20) * ((tmpvar_20 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * _LightColor0.xyz) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_25 * x_25)
     * x_25) * x_25) * x_25))
  )));
  vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 102 math, 4 textures
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_8, tmpvar_13));
  vec3 tmpvar_15;
  tmpvar_15 = (_LightColor0.xyz * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w));
  vec3 viewDir_16;
  viewDir_16 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_13 + viewDir_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_8, viewDir_16));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_17 * tmpvar_17) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (10.0 / log2((
    ((1.0 - tmpvar_17) * 0.968)
   + 0.03)));
  tmpvar_22 = (tmpvar_23 * tmpvar_23);
  float x_24;
  x_24 = (1.0 - tmpvar_14);
  float x_25;
  x_25 = (1.0 - tmpvar_19);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((
    (2.0 * tmpvar_20)
   * tmpvar_20) * tmpvar_17));
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_15 * 
    (((1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    )) * (1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    ))) * tmpvar_14)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_14 * (1.0 - tmpvar_21))
       + tmpvar_21) * (
        (tmpvar_19 * (1.0 - tmpvar_21))
       + tmpvar_21)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_18)), tmpvar_22) * ((tmpvar_22 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_14) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_15) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_27 * x_27)
     * x_27) * x_27) * x_27))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 97 math, 4 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_8, tmpvar_13));
  vec3 tmpvar_15;
  tmpvar_15 = (_LightColor0.xyz * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w));
  vec3 viewDir_16;
  viewDir_16 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_13 + viewDir_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_8, viewDir_16));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_17 * tmpvar_17) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (10.0 / log2((
    ((1.0 - tmpvar_17) * 0.968)
   + 0.03)));
  tmpvar_22 = (tmpvar_23 * tmpvar_23);
  float x_24;
  x_24 = (1.0 - tmpvar_14);
  float x_25;
  x_25 = (1.0 - tmpvar_19);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((
    (2.0 * tmpvar_20)
   * tmpvar_20) * tmpvar_17));
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_15 * 
    (((1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    )) * (1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    ))) * tmpvar_14)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_14 * (1.0 - tmpvar_21))
       + tmpvar_21) * (
        (tmpvar_19 * (1.0 - tmpvar_21))
       + tmpvar_21)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_18)), tmpvar_22) * ((tmpvar_22 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_14) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_15) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_27 * x_27)
     * x_27) * x_27) * x_27))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_8, tmpvar_12));
  vec3 tmpvar_14;
  tmpvar_14 = (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w);
  vec3 viewDir_15;
  viewDir_15 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_16;
  tmpvar_16 = (1.0 - _Glossiness);
  vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_12 + viewDir_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_8, viewDir_15));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = ((tmpvar_16 * tmpvar_16) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = (10.0 / log2((
    ((1.0 - tmpvar_16) * 0.968)
   + 0.03)));
  tmpvar_21 = (tmpvar_22 * tmpvar_22);
  float x_23;
  x_23 = (1.0 - tmpvar_13);
  float x_24;
  x_24 = (1.0 - tmpvar_18);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((
    (2.0 * tmpvar_19)
   * tmpvar_19) * tmpvar_16));
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_14 * 
    (((1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    )) * (1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_20))
       + tmpvar_20) * (
        (tmpvar_18 * (1.0 - tmpvar_20))
       + tmpvar_20)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_17)), tmpvar_21) * ((tmpvar_21 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_14) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_26 * x_26)
     * x_26) * x_26) * x_26))
  )));
  vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 106 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_8, tmpvar_13));
  vec3 tmpvar_15;
  tmpvar_15 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * (_LightShadowData.x + 
    (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))
  )));
  vec3 viewDir_16;
  viewDir_16 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_17;
  tmpvar_17 = (1.0 - _Glossiness);
  vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_13 + viewDir_16));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_8, viewDir_16));
  float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_13, tmpvar_18));
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_17 * tmpvar_17) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (10.0 / log2((
    ((1.0 - tmpvar_17) * 0.968)
   + 0.03)));
  tmpvar_22 = (tmpvar_23 * tmpvar_23);
  float x_24;
  x_24 = (1.0 - tmpvar_14);
  float x_25;
  x_25 = (1.0 - tmpvar_19);
  float tmpvar_26;
  tmpvar_26 = (0.5 + ((
    (2.0 * tmpvar_20)
   * tmpvar_20) * tmpvar_17));
  float x_27;
  x_27 = (1.0 - tmpvar_20);
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_15 * 
    (((1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    )) * (1.0 + (
      (tmpvar_26 - 1.0)
     * 
      ((((x_25 * x_25) * x_25) * x_25) * x_25)
    ))) * tmpvar_14)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_14 * (1.0 - tmpvar_21))
       + tmpvar_21) * (
        (tmpvar_19 * (1.0 - tmpvar_21))
       + tmpvar_21)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_18)), tmpvar_22) * ((tmpvar_22 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_14) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_15) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_27 * x_27)
     * x_27) * x_27) * x_27))
  )));
  vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_8, tmpvar_12));
  vec3 tmpvar_14;
  tmpvar_14 = (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x);
  vec3 viewDir_15;
  viewDir_15 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_16;
  tmpvar_16 = (1.0 - _Glossiness);
  vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_12 + viewDir_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_8, viewDir_15));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = ((tmpvar_16 * tmpvar_16) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = (10.0 / log2((
    ((1.0 - tmpvar_16) * 0.968)
   + 0.03)));
  tmpvar_21 = (tmpvar_22 * tmpvar_22);
  float x_23;
  x_23 = (1.0 - tmpvar_13);
  float x_24;
  x_24 = (1.0 - tmpvar_18);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((
    (2.0 * tmpvar_19)
   * tmpvar_19) * tmpvar_16));
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_14 * 
    (((1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    )) * (1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_20))
       + tmpvar_20) * (
        (tmpvar_18 * (1.0 - tmpvar_20))
       + tmpvar_20)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_17)), tmpvar_21) * ((tmpvar_21 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_14) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_26 * x_26)
     * x_26) * x_26) * x_26))
  )));
  vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 95 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_8, tmpvar_12));
  vec3 tmpvar_14;
  tmpvar_14 = (_LightColor0.xyz * (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x));
  vec3 viewDir_15;
  viewDir_15 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_16;
  tmpvar_16 = (1.0 - _Glossiness);
  vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_12 + viewDir_15));
  float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_8, viewDir_15));
  float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_12, tmpvar_17));
  float tmpvar_20;
  tmpvar_20 = ((tmpvar_16 * tmpvar_16) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = (10.0 / log2((
    ((1.0 - tmpvar_16) * 0.968)
   + 0.03)));
  tmpvar_21 = (tmpvar_22 * tmpvar_22);
  float x_23;
  x_23 = (1.0 - tmpvar_13);
  float x_24;
  x_24 = (1.0 - tmpvar_18);
  float tmpvar_25;
  tmpvar_25 = (0.5 + ((
    (2.0 * tmpvar_19)
   * tmpvar_19) * tmpvar_16));
  float x_26;
  x_26 = (1.0 - tmpvar_19);
  vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_14 * 
    (((1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_23 * x_23) * x_23) * x_23) * x_23)
    )) * (1.0 + (
      (tmpvar_25 - 1.0)
     * 
      ((((x_24 * x_24) * x_24) * x_24) * x_24)
    ))) * tmpvar_13)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_13 * (1.0 - tmpvar_20))
       + tmpvar_20) * (
        (tmpvar_18 * (1.0 - tmpvar_20))
       + tmpvar_20)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_17)), tmpvar_21) * ((tmpvar_21 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_13) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_14) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_26 * x_26)
     * x_26) * x_26) * x_26))
  )));
  vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 103 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_5);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - tmpvar_12) + (tmpvar_5 * tmpvar_12));
  vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_17;
  tmpvar_17 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_18;
  tmpvar_18 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_19;
  if ((tmpvar_18.x < tmpvar_17)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  vec3 tmpvar_20;
  tmpvar_20 = normalize(tmpvar_15);
  float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_8, tmpvar_20));
  vec3 tmpvar_22;
  tmpvar_22 = (_LightColor0.xyz * (tmpvar_16.w * tmpvar_19));
  vec3 viewDir_23;
  viewDir_23 = -(tmpvar_9);
  float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  vec3 tmpvar_25;
  tmpvar_25 = normalize((tmpvar_20 + viewDir_23));
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_8, viewDir_23));
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_20, tmpvar_25));
  float tmpvar_28;
  tmpvar_28 = ((tmpvar_24 * tmpvar_24) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (10.0 / log2((
    ((1.0 - tmpvar_24) * 0.968)
   + 0.03)));
  tmpvar_29 = (tmpvar_30 * tmpvar_30);
  float x_31;
  x_31 = (1.0 - tmpvar_21);
  float x_32;
  x_32 = (1.0 - tmpvar_26);
  float tmpvar_33;
  tmpvar_33 = (0.5 + ((
    (2.0 * tmpvar_27)
   * tmpvar_27) * tmpvar_24));
  float x_34;
  x_34 = (1.0 - tmpvar_27);
  vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = ((tmpvar_13 * (tmpvar_22 * 
    (((1.0 + (
      (tmpvar_33 - 1.0)
     * 
      ((((x_31 * x_31) * x_31) * x_31) * x_31)
    )) * (1.0 + (
      (tmpvar_33 - 1.0)
     * 
      ((((x_32 * x_32) * x_32) * x_32) * x_32)
    ))) * tmpvar_21)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_21 * (1.0 - tmpvar_28))
       + tmpvar_28) * (
        (tmpvar_26 * (1.0 - tmpvar_28))
       + tmpvar_28)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_25)), tmpvar_29) * ((tmpvar_29 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_21) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_22) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_34 * x_34)
     * x_34) * x_34) * x_34))
  )));
  vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = tmpvar_14;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 104 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_5);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - tmpvar_12) + (tmpvar_5 * tmpvar_12));
  vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_17;
  tmpvar_17 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_18;
  tmpvar_18 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_20;
  if ((tmpvar_19.x < tmpvar_18)) {
    tmpvar_20 = _LightShadowData.x;
  } else {
    tmpvar_20 = 1.0;
  };
  vec3 tmpvar_21;
  tmpvar_21 = normalize(tmpvar_15);
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_8, tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23 = (_LightColor0.xyz * ((tmpvar_16.w * tmpvar_17.w) * tmpvar_20));
  vec3 viewDir_24;
  viewDir_24 = -(tmpvar_9);
  float tmpvar_25;
  tmpvar_25 = (1.0 - _Glossiness);
  vec3 tmpvar_26;
  tmpvar_26 = normalize((tmpvar_21 + viewDir_24));
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_8, viewDir_24));
  float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_21, tmpvar_26));
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_25 * tmpvar_25) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = (10.0 / log2((
    ((1.0 - tmpvar_25) * 0.968)
   + 0.03)));
  tmpvar_30 = (tmpvar_31 * tmpvar_31);
  float x_32;
  x_32 = (1.0 - tmpvar_22);
  float x_33;
  x_33 = (1.0 - tmpvar_27);
  float tmpvar_34;
  tmpvar_34 = (0.5 + ((
    (2.0 * tmpvar_28)
   * tmpvar_28) * tmpvar_25));
  float x_35;
  x_35 = (1.0 - tmpvar_28);
  vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = ((tmpvar_13 * (tmpvar_23 * 
    (((1.0 + (
      (tmpvar_34 - 1.0)
     * 
      ((((x_32 * x_32) * x_32) * x_32) * x_32)
    )) * (1.0 + (
      (tmpvar_34 - 1.0)
     * 
      ((((x_33 * x_33) * x_33) * x_33) * x_33)
    ))) * tmpvar_22)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_22 * (1.0 - tmpvar_29))
       + tmpvar_29) * (
        (tmpvar_27 * (1.0 - tmpvar_29))
       + tmpvar_29)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_26)), tmpvar_30) * ((tmpvar_30 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_22) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_23) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_35 * x_35)
     * x_35) * x_35) * x_35))
  )));
  vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = tmpvar_14;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 112 math, 8 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  float tmpvar_11;
  tmpvar_11 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 shadows_13;
  vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w);
  shadows_13.x = shadow2D (_ShadowMapTexture, (tmpvar_14 + _ShadowOffsets[0].xyz)).x;
  shadows_13.y = shadow2D (_ShadowMapTexture, (tmpvar_14 + _ShadowOffsets[1].xyz)).x;
  shadows_13.z = shadow2D (_ShadowMapTexture, (tmpvar_14 + _ShadowOffsets[2].xyz)).x;
  shadows_13.w = shadow2D (_ShadowMapTexture, (tmpvar_14 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_15;
  tmpvar_15 = (_LightShadowData.xxxx + (shadows_13 * (1.0 - _LightShadowData.xxxx)));
  shadows_13 = tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_12);
  float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_8, tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18 = (_LightColor0.xyz * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w)
   * texture2D (_LightTextureB0, vec2(
    dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz)
  )).w) * dot (tmpvar_15, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_19;
  viewDir_19 = -(normalize(xlv_TEXCOORD1));
  float tmpvar_20;
  tmpvar_20 = (1.0 - _Glossiness);
  vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_16 + viewDir_19));
  float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_8, viewDir_19));
  float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_16, tmpvar_21));
  float tmpvar_24;
  tmpvar_24 = ((tmpvar_20 * tmpvar_20) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = (10.0 / log2((
    ((1.0 - tmpvar_20) * 0.968)
   + 0.03)));
  tmpvar_25 = (tmpvar_26 * tmpvar_26);
  float x_27;
  x_27 = (1.0 - tmpvar_17);
  float x_28;
  x_28 = (1.0 - tmpvar_22);
  float tmpvar_29;
  tmpvar_29 = (0.5 + ((
    (2.0 * tmpvar_23)
   * tmpvar_23) * tmpvar_20));
  float x_30;
  x_30 = (1.0 - tmpvar_23);
  vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((
    (tmpvar_9 * tmpvar_11)
   * tmpvar_5) * (tmpvar_18 * 
    (((1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_27 * x_27) * x_27) * x_27) * x_27)
    )) * (1.0 + (
      (tmpvar_29 - 1.0)
     * 
      ((((x_28 * x_28) * x_28) * x_28) * x_28)
    ))) * tmpvar_17)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_17 * (1.0 - tmpvar_24))
       + tmpvar_24) * (
        (tmpvar_22 * (1.0 - tmpvar_24))
       + tmpvar_24)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_21)), tmpvar_25) * ((tmpvar_25 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_17) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_18) * (tmpvar_10 + 
    ((1.0 - tmpvar_10) * (((
      (x_30 * x_30)
     * x_30) * x_30) * x_30))
  )));
  vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = ((1.0 - tmpvar_11) + (tmpvar_5 * tmpvar_11));
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 111 math, 7 textures, 4 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_5);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - tmpvar_12) + (tmpvar_5 * tmpvar_12));
  vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 shadowVals_17;
  shadowVals_17.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_17.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_17.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_17.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_18;
  tmpvar_18 = lessThan (shadowVals_17, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_19;
  tmpvar_19 = _LightShadowData.xxxx;
  float tmpvar_20;
  if (tmpvar_18.x) {
    tmpvar_20 = tmpvar_19.x;
  } else {
    tmpvar_20 = 1.0;
  };
  float tmpvar_21;
  if (tmpvar_18.y) {
    tmpvar_21 = tmpvar_19.y;
  } else {
    tmpvar_21 = 1.0;
  };
  float tmpvar_22;
  if (tmpvar_18.z) {
    tmpvar_22 = tmpvar_19.z;
  } else {
    tmpvar_22 = 1.0;
  };
  float tmpvar_23;
  if (tmpvar_18.w) {
    tmpvar_23 = tmpvar_19.w;
  } else {
    tmpvar_23 = 1.0;
  };
  vec4 tmpvar_24;
  tmpvar_24.x = tmpvar_20;
  tmpvar_24.y = tmpvar_21;
  tmpvar_24.z = tmpvar_22;
  tmpvar_24.w = tmpvar_23;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(tmpvar_15);
  float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_8, tmpvar_25));
  vec3 tmpvar_27;
  tmpvar_27 = (_LightColor0.xyz * (tmpvar_16.w * dot (tmpvar_24, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_28;
  viewDir_28 = -(tmpvar_9);
  float tmpvar_29;
  tmpvar_29 = (1.0 - _Glossiness);
  vec3 tmpvar_30;
  tmpvar_30 = normalize((tmpvar_25 + viewDir_28));
  float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_8, viewDir_28));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_25, tmpvar_30));
  float tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * tmpvar_29) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = (10.0 / log2((
    ((1.0 - tmpvar_29) * 0.968)
   + 0.03)));
  tmpvar_34 = (tmpvar_35 * tmpvar_35);
  float x_36;
  x_36 = (1.0 - tmpvar_26);
  float x_37;
  x_37 = (1.0 - tmpvar_31);
  float tmpvar_38;
  tmpvar_38 = (0.5 + ((
    (2.0 * tmpvar_32)
   * tmpvar_32) * tmpvar_29));
  float x_39;
  x_39 = (1.0 - tmpvar_32);
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = ((tmpvar_13 * (tmpvar_27 * 
    (((1.0 + (
      (tmpvar_38 - 1.0)
     * 
      ((((x_36 * x_36) * x_36) * x_36) * x_36)
    )) * (1.0 + (
      (tmpvar_38 - 1.0)
     * 
      ((((x_37 * x_37) * x_37) * x_37) * x_37)
    ))) * tmpvar_26)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_26 * (1.0 - tmpvar_33))
       + tmpvar_33) * (
        (tmpvar_31 * (1.0 - tmpvar_33))
       + tmpvar_33)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_30)), tmpvar_34) * ((tmpvar_34 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_26) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_27) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_39 * x_39)
     * x_39) * x_39) * x_39))
  )));
  vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = tmpvar_14;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 112 math, 8 textures, 4 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = (tmpvar_6.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform vec4 unity_LightGammaCorrectionConsts;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.xy = (normal_7.xy * _BumpScale);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_8;
  tmpvar_8 = normalize((normal_7 * tmpvar_4));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_5);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - tmpvar_12) + (tmpvar_5 * tmpvar_12));
  vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_17;
  tmpvar_17 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  vec4 shadowVals_18;
  shadowVals_18.x = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, 0.0078125, 0.0078125))).x;
  shadowVals_18.y = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, -0.0078125, 0.0078125))).x;
  shadowVals_18.z = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(-0.0078125, 0.0078125, -0.0078125))).x;
  shadowVals_18.w = textureCube (_ShadowMapTexture, (xlv_TEXCOORD6 + vec3(0.0078125, -0.0078125, -0.0078125))).x;
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (shadowVals_18, vec4(((
    sqrt(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_20;
  tmpvar_20 = _LightShadowData.xxxx;
  float tmpvar_21;
  if (tmpvar_19.x) {
    tmpvar_21 = tmpvar_20.x;
  } else {
    tmpvar_21 = 1.0;
  };
  float tmpvar_22;
  if (tmpvar_19.y) {
    tmpvar_22 = tmpvar_20.y;
  } else {
    tmpvar_22 = 1.0;
  };
  float tmpvar_23;
  if (tmpvar_19.z) {
    tmpvar_23 = tmpvar_20.z;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_19.w) {
    tmpvar_24 = tmpvar_20.w;
  } else {
    tmpvar_24 = 1.0;
  };
  vec4 tmpvar_25;
  tmpvar_25.x = tmpvar_21;
  tmpvar_25.y = tmpvar_22;
  tmpvar_25.z = tmpvar_23;
  tmpvar_25.w = tmpvar_24;
  vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_15);
  float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_8, tmpvar_26));
  vec3 tmpvar_28;
  tmpvar_28 = (_LightColor0.xyz * ((tmpvar_16.w * tmpvar_17.w) * dot (tmpvar_25, vec4(0.25, 0.25, 0.25, 0.25))));
  vec3 viewDir_29;
  viewDir_29 = -(tmpvar_9);
  float tmpvar_30;
  tmpvar_30 = (1.0 - _Glossiness);
  vec3 tmpvar_31;
  tmpvar_31 = normalize((tmpvar_26 + viewDir_29));
  float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_8, viewDir_29));
  float tmpvar_33;
  tmpvar_33 = max (0.0, dot (tmpvar_26, tmpvar_31));
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * tmpvar_30) * unity_LightGammaCorrectionConsts.w);
  float tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = (10.0 / log2((
    ((1.0 - tmpvar_30) * 0.968)
   + 0.03)));
  tmpvar_35 = (tmpvar_36 * tmpvar_36);
  float x_37;
  x_37 = (1.0 - tmpvar_27);
  float x_38;
  x_38 = (1.0 - tmpvar_32);
  float tmpvar_39;
  tmpvar_39 = (0.5 + ((
    (2.0 * tmpvar_33)
   * tmpvar_33) * tmpvar_30));
  float x_40;
  x_40 = (1.0 - tmpvar_33);
  vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = ((tmpvar_13 * (tmpvar_28 * 
    (((1.0 + (
      (tmpvar_39 - 1.0)
     * 
      ((((x_37 * x_37) * x_37) * x_37) * x_37)
    )) * (1.0 + (
      (tmpvar_39 - 1.0)
     * 
      ((((x_38 * x_38) * x_38) * x_38) * x_38)
    ))) * tmpvar_27)
  )) + ((
    max (0.0, (((
      (1.0/((((
        (tmpvar_27 * (1.0 - tmpvar_34))
       + tmpvar_34) * (
        (tmpvar_32 * (1.0 - tmpvar_34))
       + tmpvar_34)) + 0.0001)))
     * 
      (pow (max (0.0, dot (tmpvar_8, tmpvar_31)), tmpvar_35) * ((tmpvar_35 + 1.0) * unity_LightGammaCorrectionConsts.y))
    ) * tmpvar_27) * unity_LightGammaCorrectionConsts.x))
   * tmpvar_28) * (tmpvar_11 + 
    ((1.0 - tmpvar_11) * (((
      (x_40 * x_40)
     * x_40) * x_40) * x_40))
  )));
  vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = tmpvar_41.xyz;
  xlat_varoutput_42.w = tmpvar_14;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
}
 }


 // Stats for Vertex shader:
 //      opengl : 4 avg math (1..8), 1 avg texture (0..3), 0 avg branch (0..1)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 172554
Program "vp" {
SubProgram "opengl " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform mat4 unity_MatrixVP;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (_Object2World * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = _World2Object[0].x;
    v_5.y = _World2Object[1].x;
    v_5.z = _World2Object[2].x;
    v_5.w = _World2Object[3].x;
    vec4 v_6;
    v_6.x = _World2Object[0].y;
    v_6.y = _World2Object[1].y;
    v_6.z = _World2Object[2].y;
    v_6.w = _World2Object[3].y;
    vec4 v_7;
    v_7.x = _World2Object[0].z;
    v_7.y = _World2Object[1].z;
    v_7.z = _World2Object[2].z;
    v_7.w = _World2Object[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "opengl " {
// Stats: 3 math
Keywords { "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  xlv_TEXCOORD0 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  gl_FragData[0] = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "opengl " {
// Stats: 6 math, 3 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform mat4 unity_MatrixVP;
uniform vec4 _MainTex_ST;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (_Object2World * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = _World2Object[0].x;
    v_5.y = _World2Object[1].x;
    v_5.z = _World2Object[2].x;
    v_5.w = _World2Object[3].x;
    vec4 v_6;
    v_6.x = _World2Object[0].y;
    v_6.y = _World2Object[1].y;
    v_6.z = _World2Object[2].y;
    v_6.w = _World2Object[3].y;
    vec4 v_7;
    v_7.x = _World2Object[0].z;
    v_7.y = _World2Object[1].z;
    v_7.z = _World2Object[2].z;
    v_7.w = _World2Object[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler3D _DitherMaskLOD;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1.xy = (gl_FragCoord.xy * 0.25);
  tmpvar_1.z = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) * 0.9375);
  float x_2;
  x_2 = (texture3D (_DitherMaskLOD, tmpvar_1).w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "opengl " {
// Stats: 8 math, 3 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform vec4 _MainTex_ST;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  xlv_TEXCOORD0 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler3D _DitherMaskLOD;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1.xy = (gl_FragCoord.xy * 0.25);
  tmpvar_1.z = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) * 0.9375);
  float x_2;
  x_2 = (texture3D (_DitherMaskLOD, tmpvar_1).w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
}
 }


 // Stats for Vertex shader:
 //      opengl : 93 avg math (88..100), 4 avg texture (4..6), 9 branch
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 219066
Program "vp" {
SubProgram "opengl " {
// Stats: 90 math, 4 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3.x = _Metallic;
  tmpvar_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_1;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  float x_38;
  x_38 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_6 * tmpvar_10) + (tmpvar_11 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_38 * x_38) * x_38) * x_38) * x_38)
  ))));
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_6;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_7;
  tmpvar_41.w = tmpvar_4;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = exp2(-(tmpvar_39.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 5 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_3.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_1;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - tmpvar_3.y), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - tmpvar_3.y), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  float x_38;
  x_38 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_6 * tmpvar_10) + (tmpvar_11 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_38 * x_38) * x_38) * x_38) * x_38)
  ))));
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_6;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_7;
  tmpvar_41.w = tmpvar_4;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = exp2(-(tmpvar_39.xyz));
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 92 math, 4 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3.x = _Metallic;
  tmpvar_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_5 * tmpvar_8) * (cse_6.w * _Color.w));
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_11 = (tmpvar_11 * tmpvar_10);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_10);
  float x_39;
  x_39 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = ((tmpvar_9 * tmpvar_11) + (tmpvar_12 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_39 * x_39) * x_39) * x_39) * x_39)
  ))));
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_7;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = exp2(-(tmpvar_40.xyz));
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 6 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  float tmpvar_9;
  tmpvar_9 = tmpvar_8.y;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_8.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_6;
  vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_15 = (xlv_TEXCOORD5.xyz + x1_18);
  tmpvar_15 = (tmpvar_15 * tmpvar_14);
  vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldNormal_20;
  worldNormal_20 = tmpvar_19;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_19);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    vec3 tmpvar_28;
    tmpvar_28 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_20 = (((
      (tmpvar_28 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_21 * 
      min (min (tmpvar_25, tmpvar_26), tmpvar_27)
    )) - tmpvar_28);
  };
  vec4 tmpvar_29;
  tmpvar_29.xyz = worldNormal_20;
  tmpvar_29.w = (pow ((1.0 - tmpvar_8.y), 0.75) * 7.0);
  vec4 tmpvar_30;
  tmpvar_30 = textureCubeLod (unity_SpecCube0, worldNormal_20, tmpvar_29.w);
  vec3 tmpvar_31;
  tmpvar_31 = ((unity_SpecCube0_HDR.x * pow (tmpvar_30.w, unity_SpecCube0_HDR.y)) * tmpvar_30.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_32;
    worldNormal_32 = tmpvar_19;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(tmpvar_19);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      vec3 tmpvar_40;
      tmpvar_40 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_32 = (((
        (tmpvar_40 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_33 * 
        min (min (tmpvar_37, tmpvar_38), tmpvar_39)
      )) - tmpvar_40);
    };
    vec4 tmpvar_41;
    tmpvar_41.xyz = worldNormal_32;
    tmpvar_41.w = (pow ((1.0 - tmpvar_8.y), 0.75) * 7.0);
    vec4 tmpvar_42;
    tmpvar_42 = textureCubeLod (unity_SpecCube1, worldNormal_32, tmpvar_41.w);
    tmpvar_16 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_42.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_42.xyz), tmpvar_31, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_16 = tmpvar_31;
  };
  tmpvar_16 = (tmpvar_16 * tmpvar_14);
  float x_43;
  x_43 = (1.0 - max (0.0, dot (tmpvar_6, 
    -(tmpvar_7)
  )));
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = ((tmpvar_11 * tmpvar_15) + (tmpvar_16 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_43 * x_43) * x_43) * x_43) * x_43)
  ))));
  vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_11;
  tmpvar_45.w = tmpvar_14;
  vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_12;
  tmpvar_46.w = tmpvar_9;
  vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_6 * 0.5) + 0.5);
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = exp2(-(tmpvar_44.xyz));
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = tmpvar_47;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 100 math, 5 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8.x = _Metallic;
  tmpvar_8.y = _Glossiness;
  float tmpvar_9;
  tmpvar_9 = tmpvar_8.y;
  vec3 tmpvar_10;
  vec4 cse_11;
  cse_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_10 = (_Color.xyz * cse_11.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_13) * (cse_11.w * _Color.w));
  float tmpvar_15;
  tmpvar_15 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_6;
  vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_16 = (xlv_TEXCOORD5.xyz + x1_19);
  tmpvar_16 = (tmpvar_16 * tmpvar_15);
  vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldNormal_21;
  worldNormal_21 = tmpvar_20;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_22;
    tmpvar_22 = normalize(tmpvar_20);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_22);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_22);
    bvec3 tmpvar_25;
    tmpvar_25 = greaterThan (tmpvar_22, vec3(0.0, 0.0, 0.0));
    float tmpvar_26;
    if (tmpvar_25.x) {
      tmpvar_26 = tmpvar_23.x;
    } else {
      tmpvar_26 = tmpvar_24.x;
    };
    float tmpvar_27;
    if (tmpvar_25.y) {
      tmpvar_27 = tmpvar_23.y;
    } else {
      tmpvar_27 = tmpvar_24.y;
    };
    float tmpvar_28;
    if (tmpvar_25.z) {
      tmpvar_28 = tmpvar_23.z;
    } else {
      tmpvar_28 = tmpvar_24.z;
    };
    vec3 tmpvar_29;
    tmpvar_29 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_21 = (((
      (tmpvar_29 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_22 * 
      min (min (tmpvar_26, tmpvar_27), tmpvar_28)
    )) - tmpvar_29);
  };
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_21;
  tmpvar_30.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldNormal_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_33;
    worldNormal_33 = tmpvar_20;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_34;
      tmpvar_34 = normalize(tmpvar_20);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_34);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_34);
      bvec3 tmpvar_37;
      tmpvar_37 = greaterThan (tmpvar_34, vec3(0.0, 0.0, 0.0));
      float tmpvar_38;
      if (tmpvar_37.x) {
        tmpvar_38 = tmpvar_35.x;
      } else {
        tmpvar_38 = tmpvar_36.x;
      };
      float tmpvar_39;
      if (tmpvar_37.y) {
        tmpvar_39 = tmpvar_35.y;
      } else {
        tmpvar_39 = tmpvar_36.y;
      };
      float tmpvar_40;
      if (tmpvar_37.z) {
        tmpvar_40 = tmpvar_35.z;
      } else {
        tmpvar_40 = tmpvar_36.z;
      };
      vec3 tmpvar_41;
      tmpvar_41 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_33 = (((
        (tmpvar_41 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_34 * 
        min (min (tmpvar_38, tmpvar_39), tmpvar_40)
      )) - tmpvar_41);
    };
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldNormal_33;
    tmpvar_42.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldNormal_33, tmpvar_42.w);
    tmpvar_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_17 = tmpvar_32;
  };
  tmpvar_17 = (tmpvar_17 * tmpvar_15);
  float x_44;
  x_44 = (1.0 - max (0.0, dot (tmpvar_6, 
    -(tmpvar_7)
  )));
  vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = ((tmpvar_14 * tmpvar_16) + (tmpvar_17 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_44 * x_44) * x_44) * x_44) * x_44)
  ))));
  vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_14;
  tmpvar_46.w = tmpvar_15;
  vec4 tmpvar_47;
  tmpvar_47.xyz = tmpvar_12;
  tmpvar_47.w = tmpvar_9;
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = ((tmpvar_6 * 0.5) + 0.5);
  vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = exp2(-(tmpvar_45.xyz));
  gl_FragData[0] = tmpvar_46;
  gl_FragData[1] = tmpvar_47;
  gl_FragData[2] = tmpvar_48;
  gl_FragData[3] = tmpvar_49;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 88 math, 4 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3.x = _Metallic;
  tmpvar_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_1;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  float x_38;
  x_38 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_6 * tmpvar_10) + (tmpvar_11 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_38 * x_38) * x_38) * x_38) * x_38)
  ))));
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_6;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_7;
  tmpvar_41.w = tmpvar_4;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = tmpvar_39.xyz;
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 88 math, 5 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_6;
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, tmpvar_3.xxx);
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = tmpvar_1;
  vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  tmpvar_10 = (xlv_TEXCOORD5.xyz + x1_13);
  tmpvar_10 = (tmpvar_10 * tmpvar_9);
  vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_15;
  worldNormal_15 = tmpvar_14;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_16;
    tmpvar_16 = normalize(tmpvar_14);
    vec3 tmpvar_17;
    tmpvar_17 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_16);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_16);
    bvec3 tmpvar_19;
    tmpvar_19 = greaterThan (tmpvar_16, vec3(0.0, 0.0, 0.0));
    float tmpvar_20;
    if (tmpvar_19.x) {
      tmpvar_20 = tmpvar_17.x;
    } else {
      tmpvar_20 = tmpvar_18.x;
    };
    float tmpvar_21;
    if (tmpvar_19.y) {
      tmpvar_21 = tmpvar_17.y;
    } else {
      tmpvar_21 = tmpvar_18.y;
    };
    float tmpvar_22;
    if (tmpvar_19.z) {
      tmpvar_22 = tmpvar_17.z;
    } else {
      tmpvar_22 = tmpvar_18.z;
    };
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_15 = (((
      (tmpvar_23 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_16 * 
      min (min (tmpvar_20, tmpvar_21), tmpvar_22)
    )) - tmpvar_23);
  };
  vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_15;
  tmpvar_24.w = (pow ((1.0 - tmpvar_3.y), 0.75) * 7.0);
  vec4 tmpvar_25;
  tmpvar_25 = textureCubeLod (unity_SpecCube0, worldNormal_15, tmpvar_24.w);
  vec3 tmpvar_26;
  tmpvar_26 = ((unity_SpecCube0_HDR.x * pow (tmpvar_25.w, unity_SpecCube0_HDR.y)) * tmpvar_25.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_27;
    worldNormal_27 = tmpvar_14;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_28;
      tmpvar_28 = normalize(tmpvar_14);
      vec3 tmpvar_29;
      tmpvar_29 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_28);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_28);
      bvec3 tmpvar_31;
      tmpvar_31 = greaterThan (tmpvar_28, vec3(0.0, 0.0, 0.0));
      float tmpvar_32;
      if (tmpvar_31.x) {
        tmpvar_32 = tmpvar_29.x;
      } else {
        tmpvar_32 = tmpvar_30.x;
      };
      float tmpvar_33;
      if (tmpvar_31.y) {
        tmpvar_33 = tmpvar_29.y;
      } else {
        tmpvar_33 = tmpvar_30.y;
      };
      float tmpvar_34;
      if (tmpvar_31.z) {
        tmpvar_34 = tmpvar_29.z;
      } else {
        tmpvar_34 = tmpvar_30.z;
      };
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_27 = (((
        (tmpvar_35 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_28 * 
        min (min (tmpvar_32, tmpvar_33), tmpvar_34)
      )) - tmpvar_35);
    };
    vec4 tmpvar_36;
    tmpvar_36.xyz = worldNormal_27;
    tmpvar_36.w = (pow ((1.0 - tmpvar_3.y), 0.75) * 7.0);
    vec4 tmpvar_37;
    tmpvar_37 = textureCubeLod (unity_SpecCube1, worldNormal_27, tmpvar_36.w);
    tmpvar_11 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_37.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_37.xyz), tmpvar_26, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_11 = tmpvar_26;
  };
  tmpvar_11 = (tmpvar_11 * tmpvar_9);
  float x_38;
  x_38 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_6 * tmpvar_10) + (tmpvar_11 * mix (tmpvar_7, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_38 * x_38) * x_38) * x_38) * x_38)
  ))));
  vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_6;
  tmpvar_40.w = tmpvar_9;
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_7;
  tmpvar_41.w = tmpvar_4;
  vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = tmpvar_39.xyz;
  gl_FragData[0] = tmpvar_40;
  gl_FragData[1] = tmpvar_41;
  gl_FragData[2] = tmpvar_42;
  gl_FragData[3] = tmpvar_43;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 90 math, 4 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_15;
  vec3 x2_16;
  vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_17);
  x2_16.y = dot (unity_SHBg, tmpvar_17);
  x2_16.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_6.xyz = (x2_16 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_3;
  tmpvar_3.x = _Metallic;
  tmpvar_3.y = _Glossiness;
  float tmpvar_4;
  tmpvar_4 = tmpvar_3.y;
  vec3 tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_8;
  tmpvar_8 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_5 * tmpvar_8) * (cse_6.w * _Color.w));
  float tmpvar_10;
  tmpvar_10 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1;
  vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  tmpvar_11 = (xlv_TEXCOORD5.xyz + x1_14);
  tmpvar_11 = (tmpvar_11 * tmpvar_10);
  vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 - (2.0 * (
    dot (tmpvar_1, tmpvar_2)
   * tmpvar_1)));
  vec3 worldNormal_16;
  worldNormal_16 = tmpvar_15;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_17;
    tmpvar_17 = normalize(tmpvar_15);
    vec3 tmpvar_18;
    tmpvar_18 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_17);
    vec3 tmpvar_19;
    tmpvar_19 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_17);
    bvec3 tmpvar_20;
    tmpvar_20 = greaterThan (tmpvar_17, vec3(0.0, 0.0, 0.0));
    float tmpvar_21;
    if (tmpvar_20.x) {
      tmpvar_21 = tmpvar_18.x;
    } else {
      tmpvar_21 = tmpvar_19.x;
    };
    float tmpvar_22;
    if (tmpvar_20.y) {
      tmpvar_22 = tmpvar_18.y;
    } else {
      tmpvar_22 = tmpvar_19.y;
    };
    float tmpvar_23;
    if (tmpvar_20.z) {
      tmpvar_23 = tmpvar_18.z;
    } else {
      tmpvar_23 = tmpvar_19.z;
    };
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_16 = (((
      (tmpvar_24 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_17 * 
      min (min (tmpvar_21, tmpvar_22), tmpvar_23)
    )) - tmpvar_24);
  };
  vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_16;
  tmpvar_25.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_26;
  tmpvar_26 = textureCubeLod (unity_SpecCube0, worldNormal_16, tmpvar_25.w);
  vec3 tmpvar_27;
  tmpvar_27 = ((unity_SpecCube0_HDR.x * pow (tmpvar_26.w, unity_SpecCube0_HDR.y)) * tmpvar_26.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_28;
    worldNormal_28 = tmpvar_15;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_29;
      tmpvar_29 = normalize(tmpvar_15);
      vec3 tmpvar_30;
      tmpvar_30 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_29);
      vec3 tmpvar_31;
      tmpvar_31 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_29);
      bvec3 tmpvar_32;
      tmpvar_32 = greaterThan (tmpvar_29, vec3(0.0, 0.0, 0.0));
      float tmpvar_33;
      if (tmpvar_32.x) {
        tmpvar_33 = tmpvar_30.x;
      } else {
        tmpvar_33 = tmpvar_31.x;
      };
      float tmpvar_34;
      if (tmpvar_32.y) {
        tmpvar_34 = tmpvar_30.y;
      } else {
        tmpvar_34 = tmpvar_31.y;
      };
      float tmpvar_35;
      if (tmpvar_32.z) {
        tmpvar_35 = tmpvar_30.z;
      } else {
        tmpvar_35 = tmpvar_31.z;
      };
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_28 = (((
        (tmpvar_36 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_29 * 
        min (min (tmpvar_33, tmpvar_34), tmpvar_35)
      )) - tmpvar_36);
    };
    vec4 tmpvar_37;
    tmpvar_37.xyz = worldNormal_28;
    tmpvar_37.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_38;
    tmpvar_38 = textureCubeLod (unity_SpecCube1, worldNormal_28, tmpvar_37.w);
    tmpvar_12 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_38.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_38.xyz), tmpvar_27, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_12 = tmpvar_27;
  };
  tmpvar_12 = (tmpvar_12 * tmpvar_10);
  float x_39;
  x_39 = (1.0 - max (0.0, dot (tmpvar_1, 
    -(tmpvar_2)
  )));
  vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = ((tmpvar_9 * tmpvar_11) + (tmpvar_12 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_8)), 0.0, 1.0)
  ), vec3(
    ((((x_39 * x_39) * x_39) * x_39) * x_39)
  ))));
  vec4 tmpvar_41;
  tmpvar_41.xyz = tmpvar_9;
  tmpvar_41.w = tmpvar_10;
  vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_7;
  tmpvar_42.w = tmpvar_4;
  vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_1 * 0.5) + 0.5);
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = tmpvar_40.xyz;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = tmpvar_43;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 96 math, 6 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  float tmpvar_9;
  tmpvar_9 = tmpvar_8.y;
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, tmpvar_8.xxx);
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_11 = (tmpvar_10 * tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_6;
  vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_15 = (xlv_TEXCOORD5.xyz + x1_18);
  tmpvar_15 = (tmpvar_15 * tmpvar_14);
  vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldNormal_20;
  worldNormal_20 = tmpvar_19;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_21;
    tmpvar_21 = normalize(tmpvar_19);
    vec3 tmpvar_22;
    tmpvar_22 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_21);
    bvec3 tmpvar_24;
    tmpvar_24 = greaterThan (tmpvar_21, vec3(0.0, 0.0, 0.0));
    float tmpvar_25;
    if (tmpvar_24.x) {
      tmpvar_25 = tmpvar_22.x;
    } else {
      tmpvar_25 = tmpvar_23.x;
    };
    float tmpvar_26;
    if (tmpvar_24.y) {
      tmpvar_26 = tmpvar_22.y;
    } else {
      tmpvar_26 = tmpvar_23.y;
    };
    float tmpvar_27;
    if (tmpvar_24.z) {
      tmpvar_27 = tmpvar_22.z;
    } else {
      tmpvar_27 = tmpvar_23.z;
    };
    vec3 tmpvar_28;
    tmpvar_28 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_20 = (((
      (tmpvar_28 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_21 * 
      min (min (tmpvar_25, tmpvar_26), tmpvar_27)
    )) - tmpvar_28);
  };
  vec4 tmpvar_29;
  tmpvar_29.xyz = worldNormal_20;
  tmpvar_29.w = (pow ((1.0 - tmpvar_8.y), 0.75) * 7.0);
  vec4 tmpvar_30;
  tmpvar_30 = textureCubeLod (unity_SpecCube0, worldNormal_20, tmpvar_29.w);
  vec3 tmpvar_31;
  tmpvar_31 = ((unity_SpecCube0_HDR.x * pow (tmpvar_30.w, unity_SpecCube0_HDR.y)) * tmpvar_30.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_32;
    worldNormal_32 = tmpvar_19;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_33;
      tmpvar_33 = normalize(tmpvar_19);
      vec3 tmpvar_34;
      tmpvar_34 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_33);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_33);
      bvec3 tmpvar_36;
      tmpvar_36 = greaterThan (tmpvar_33, vec3(0.0, 0.0, 0.0));
      float tmpvar_37;
      if (tmpvar_36.x) {
        tmpvar_37 = tmpvar_34.x;
      } else {
        tmpvar_37 = tmpvar_35.x;
      };
      float tmpvar_38;
      if (tmpvar_36.y) {
        tmpvar_38 = tmpvar_34.y;
      } else {
        tmpvar_38 = tmpvar_35.y;
      };
      float tmpvar_39;
      if (tmpvar_36.z) {
        tmpvar_39 = tmpvar_34.z;
      } else {
        tmpvar_39 = tmpvar_35.z;
      };
      vec3 tmpvar_40;
      tmpvar_40 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_32 = (((
        (tmpvar_40 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_33 * 
        min (min (tmpvar_37, tmpvar_38), tmpvar_39)
      )) - tmpvar_40);
    };
    vec4 tmpvar_41;
    tmpvar_41.xyz = worldNormal_32;
    tmpvar_41.w = (pow ((1.0 - tmpvar_8.y), 0.75) * 7.0);
    vec4 tmpvar_42;
    tmpvar_42 = textureCubeLod (unity_SpecCube1, worldNormal_32, tmpvar_41.w);
    tmpvar_16 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_42.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_42.xyz), tmpvar_31, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_16 = tmpvar_31;
  };
  tmpvar_16 = (tmpvar_16 * tmpvar_14);
  float x_43;
  x_43 = (1.0 - max (0.0, dot (tmpvar_6, 
    -(tmpvar_7)
  )));
  vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = ((tmpvar_11 * tmpvar_15) + (tmpvar_16 * mix (tmpvar_12, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_43 * x_43) * x_43) * x_43) * x_43)
  ))));
  vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_11;
  tmpvar_45.w = tmpvar_14;
  vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_12;
  tmpvar_46.w = tmpvar_9;
  vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_6 * 0.5) + 0.5);
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = tmpvar_44.xyz;
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = tmpvar_47;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 98 math, 5 textures, 9 branches
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec3 tmpvar_8;
  tmpvar_8 = tmpvar_7.xyz;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_10;
  texcoord_10.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_1;
  } else {
    tmpvar_11 = tmpvar_2;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * gl_Normal.x)
   + 
    (v_13.xyz * gl_Normal.y)
  ) + (v_14.xyz * gl_Normal.z)));
  mat3 tmpvar_16;
  tmpvar_16[0] = _Object2World[0].xyz;
  tmpvar_16[1] = _Object2World[1].xyz;
  tmpvar_16[2] = _Object2World[2].xyz;
  vec4 tmpvar_17;
  tmpvar_17.xyz = normalize((tmpvar_16 * TANGENT.xyz));
  tmpvar_17.w = TANGENT.w;
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  tmpvar_18 = tmpvar_17.xyz;
  tmpvar_19 = (((tmpvar_15.yzx * tmpvar_17.zxy) - (tmpvar_15.zxy * tmpvar_17.yzx)) * TANGENT.www);
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  vec3 tmpvar_22;
  tmpvar_20.x = tmpvar_18.x;
  tmpvar_20.y = tmpvar_19.x;
  tmpvar_20.z = tmpvar_15.x;
  tmpvar_21.x = tmpvar_18.y;
  tmpvar_21.y = tmpvar_19.y;
  tmpvar_21.z = tmpvar_15.y;
  tmpvar_22.x = tmpvar_18.z;
  tmpvar_22.y = tmpvar_19.z;
  tmpvar_22.z = tmpvar_15.z;
  vec3 v_23;
  v_23.x = tmpvar_20.x;
  v_23.y = tmpvar_21.x;
  v_23.z = tmpvar_22.x;
  tmpvar_3.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_20.y;
  v_24.y = tmpvar_21.y;
  v_24.z = tmpvar_22.y;
  tmpvar_4.xyz = v_24;
  vec3 v_25;
  v_25.x = tmpvar_20.z;
  v_25.y = tmpvar_21.z;
  v_25.z = tmpvar_22.z;
  tmpvar_5.xyz = v_25;
  vec3 x2_26;
  vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_15.xyzz * tmpvar_15.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_27);
  x2_26.y = dot (unity_SHBg, tmpvar_27);
  x2_26.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_6.xyz = (x2_26 + (unity_SHC.xyz * (
    (tmpvar_15.x * tmpvar_15.x)
   - 
    (tmpvar_15.y * tmpvar_15.y)
  )));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = (tmpvar_7.xyz - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
uniform vec4 unity_SpecCube0_BoxMax;
uniform vec4 unity_SpecCube0_BoxMin;
uniform vec4 unity_SpecCube0_ProbePosition;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_SpecCube1_BoxMax;
uniform vec4 unity_SpecCube1_BoxMin;
uniform vec4 unity_SpecCube1_ProbePosition;
uniform vec4 unity_SpecCube1_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _BumpScale;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform float _OcclusionStrength;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.xy = (normal_5.xy * _BumpScale);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_6;
  tmpvar_6 = normalize((normal_5 * tmpvar_4));
  vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD1);
  vec2 tmpvar_8;
  tmpvar_8.x = _Metallic;
  tmpvar_8.y = _Glossiness;
  float tmpvar_9;
  tmpvar_9 = tmpvar_8.y;
  vec3 tmpvar_10;
  vec4 cse_11;
  cse_11 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_10 = (_Color.xyz * cse_11.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_13;
  tmpvar_13 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_14;
  tmpvar_14 = ((tmpvar_10 * tmpvar_13) * (cse_11.w * _Color.w));
  float tmpvar_15;
  tmpvar_15 = ((1.0 - _OcclusionStrength) + (texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y * _OcclusionStrength));
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_17 = vec3(0.0, 0.0, 0.0);
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_6;
  vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_16 = (xlv_TEXCOORD5.xyz + x1_19);
  tmpvar_16 = (tmpvar_16 * tmpvar_15);
  vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_7 - (2.0 * (
    dot (tmpvar_6, tmpvar_7)
   * tmpvar_6)));
  vec3 worldNormal_21;
  worldNormal_21 = tmpvar_20;
  if ((unity_SpecCube0_ProbePosition.w > 0.0)) {
    vec3 tmpvar_22;
    tmpvar_22 = normalize(tmpvar_20);
    vec3 tmpvar_23;
    tmpvar_23 = ((unity_SpecCube0_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_22);
    vec3 tmpvar_24;
    tmpvar_24 = ((unity_SpecCube0_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_22);
    bvec3 tmpvar_25;
    tmpvar_25 = greaterThan (tmpvar_22, vec3(0.0, 0.0, 0.0));
    float tmpvar_26;
    if (tmpvar_25.x) {
      tmpvar_26 = tmpvar_23.x;
    } else {
      tmpvar_26 = tmpvar_24.x;
    };
    float tmpvar_27;
    if (tmpvar_25.y) {
      tmpvar_27 = tmpvar_23.y;
    } else {
      tmpvar_27 = tmpvar_24.y;
    };
    float tmpvar_28;
    if (tmpvar_25.z) {
      tmpvar_28 = tmpvar_23.z;
    } else {
      tmpvar_28 = tmpvar_24.z;
    };
    vec3 tmpvar_29;
    tmpvar_29 = ((unity_SpecCube0_BoxMax.xyz + unity_SpecCube0_BoxMin.xyz) * 0.5);
    worldNormal_21 = (((
      (tmpvar_29 - unity_SpecCube0_ProbePosition.xyz)
     + xlv_TEXCOORD6) + (tmpvar_22 * 
      min (min (tmpvar_26, tmpvar_27), tmpvar_28)
    )) - tmpvar_29);
  };
  vec4 tmpvar_30;
  tmpvar_30.xyz = worldNormal_21;
  tmpvar_30.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
  vec4 tmpvar_31;
  tmpvar_31 = textureCubeLod (unity_SpecCube0, worldNormal_21, tmpvar_30.w);
  vec3 tmpvar_32;
  tmpvar_32 = ((unity_SpecCube0_HDR.x * pow (tmpvar_31.w, unity_SpecCube0_HDR.y)) * tmpvar_31.xyz);
  if ((unity_SpecCube0_BoxMin.w < 0.99999)) {
    vec3 worldNormal_33;
    worldNormal_33 = tmpvar_20;
    if ((unity_SpecCube1_ProbePosition.w > 0.0)) {
      vec3 tmpvar_34;
      tmpvar_34 = normalize(tmpvar_20);
      vec3 tmpvar_35;
      tmpvar_35 = ((unity_SpecCube1_BoxMax.xyz - xlv_TEXCOORD6) / tmpvar_34);
      vec3 tmpvar_36;
      tmpvar_36 = ((unity_SpecCube1_BoxMin.xyz - xlv_TEXCOORD6) / tmpvar_34);
      bvec3 tmpvar_37;
      tmpvar_37 = greaterThan (tmpvar_34, vec3(0.0, 0.0, 0.0));
      float tmpvar_38;
      if (tmpvar_37.x) {
        tmpvar_38 = tmpvar_35.x;
      } else {
        tmpvar_38 = tmpvar_36.x;
      };
      float tmpvar_39;
      if (tmpvar_37.y) {
        tmpvar_39 = tmpvar_35.y;
      } else {
        tmpvar_39 = tmpvar_36.y;
      };
      float tmpvar_40;
      if (tmpvar_37.z) {
        tmpvar_40 = tmpvar_35.z;
      } else {
        tmpvar_40 = tmpvar_36.z;
      };
      vec3 tmpvar_41;
      tmpvar_41 = ((unity_SpecCube1_BoxMax.xyz + unity_SpecCube1_BoxMin.xyz) * 0.5);
      worldNormal_33 = (((
        (tmpvar_41 - unity_SpecCube1_ProbePosition.xyz)
       + xlv_TEXCOORD6) + (tmpvar_34 * 
        min (min (tmpvar_38, tmpvar_39), tmpvar_40)
      )) - tmpvar_41);
    };
    vec4 tmpvar_42;
    tmpvar_42.xyz = worldNormal_33;
    tmpvar_42.w = (pow ((1.0 - _Glossiness), 0.75) * 7.0);
    vec4 tmpvar_43;
    tmpvar_43 = textureCubeLod (unity_SpecCube1, worldNormal_33, tmpvar_42.w);
    tmpvar_17 = mix (((unity_SpecCube1_HDR.x * 
      pow (tmpvar_43.w, unity_SpecCube1_HDR.y)
    ) * tmpvar_43.xyz), tmpvar_32, unity_SpecCube0_BoxMin.www);
  } else {
    tmpvar_17 = tmpvar_32;
  };
  tmpvar_17 = (tmpvar_17 * tmpvar_15);
  float x_44;
  x_44 = (1.0 - max (0.0, dot (tmpvar_6, 
    -(tmpvar_7)
  )));
  vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = ((tmpvar_14 * tmpvar_16) + (tmpvar_17 * mix (tmpvar_12, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_13)), 0.0, 1.0)
  ), vec3(
    ((((x_44 * x_44) * x_44) * x_44) * x_44)
  ))));
  vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_14;
  tmpvar_46.w = tmpvar_15;
  vec4 tmpvar_47;
  tmpvar_47.xyz = tmpvar_12;
  tmpvar_47.w = tmpvar_9;
  vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = ((tmpvar_6 * 0.5) + 0.5);
  vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = tmpvar_45.xyz;
  gl_FragData[0] = tmpvar_46;
  gl_FragData[1] = tmpvar_47;
  gl_FragData[2] = tmpvar_48;
  gl_FragData[3] = tmpvar_49;
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }


 // Stats for Vertex shader:
 //      opengl : 50 avg math (47..55), 5 avg texture (4..7)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 361229
Program "vp" {
SubProgram "opengl " {
// Stats: 47 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_8;
  vec3 I_9;
  vec3 cse_10;
  cse_10 = -(xlv_TEXCOORD1);
  I_9 = -(cse_10);
  vec4 tmpvar_11;
  tmpvar_11.xyz = (I_9 - (2.0 * (
    dot (tmpvar_2, I_9)
   * tmpvar_2)));
  float cse_12;
  cse_12 = (1.0 - _Glossiness);
  tmpvar_11.w = (cse_12 * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_11.xyz, tmpvar_11.w);
  tmpvar_8 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_8 = (tmpvar_8 * tmpvar_7.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_10 - (2.0 * 
    (dot (tmpvar_2, cse_10) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_10), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = cse_12;
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_4 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_5)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_7.y)
   * tmpvar_4)) + (tmpvar_8 * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_8;
  vec3 I_9;
  vec3 cse_10;
  cse_10 = -(xlv_TEXCOORD1);
  I_9 = -(cse_10);
  vec4 tmpvar_11;
  tmpvar_11.xyz = (I_9 - (2.0 * (
    dot (tmpvar_2, I_9)
   * tmpvar_2)));
  float cse_12;
  cse_12 = (1.0 - _Glossiness);
  tmpvar_11.w = (cse_12 * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_11.xyz, tmpvar_11.w);
  tmpvar_8 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_8 = (tmpvar_8 * tmpvar_7.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_10 - (2.0 * 
    (dot (tmpvar_2, cse_10) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_10), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = cse_12;
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_4 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_5)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_7.y)
   * tmpvar_4)) + (tmpvar_8 * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 47 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_22;
  tmpvar_22 = (((tmpvar_19 * tmpvar_19) + (tmpvar_20 * tmpvar_20)) + (tmpvar_21 * tmpvar_21));
  vec4 tmpvar_23;
  tmpvar_23 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_19 * tmpvar_14.x) + (tmpvar_20 * tmpvar_14.y)) + (tmpvar_21 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_22)
  )) * (1.0/((1.0 + 
    (tmpvar_22 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_23.x) + (unity_LightColor[1].xyz * tmpvar_23.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_23.z)
  ) + (unity_LightColor[3].xyz * tmpvar_23.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_8;
  vec3 I_9;
  vec3 cse_10;
  cse_10 = -(xlv_TEXCOORD1);
  I_9 = -(cse_10);
  vec4 tmpvar_11;
  tmpvar_11.xyz = (I_9 - (2.0 * (
    dot (tmpvar_2, I_9)
   * tmpvar_2)));
  float cse_12;
  cse_12 = (1.0 - _Glossiness);
  tmpvar_11.w = (cse_12 * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_11.xyz, tmpvar_11.w);
  tmpvar_8 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_8 = (tmpvar_8 * tmpvar_7.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_10 - (2.0 * 
    (dot (tmpvar_2, cse_10) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_10), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = cse_12;
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_4 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_5)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_7.y)
   * tmpvar_4)) + (tmpvar_8 * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_25;
  tmpvar_25 = (((tmpvar_22 * tmpvar_22) + (tmpvar_23 * tmpvar_23)) + (tmpvar_24 * tmpvar_24));
  vec4 tmpvar_26;
  tmpvar_26 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_22 * tmpvar_14.x) + (tmpvar_23 * tmpvar_14.y)) + (tmpvar_24 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_25)
  )) * (1.0/((1.0 + 
    (tmpvar_25 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_26.x) + (unity_LightColor[1].xyz * tmpvar_26.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_26.z)
  ) + (unity_LightColor[3].xyz * tmpvar_26.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  float tmpvar_6;
  tmpvar_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_4 = (tmpvar_3 * tmpvar_6);
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_8;
  vec3 I_9;
  vec3 cse_10;
  cse_10 = -(xlv_TEXCOORD1);
  I_9 = -(cse_10);
  vec4 tmpvar_11;
  tmpvar_11.xyz = (I_9 - (2.0 * (
    dot (tmpvar_2, I_9)
   * tmpvar_2)));
  float cse_12;
  cse_12 = (1.0 - _Glossiness);
  tmpvar_11.w = (cse_12 * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_11.xyz, tmpvar_11.w);
  tmpvar_8 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_8 = (tmpvar_8 * tmpvar_7.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_10 - (2.0 * 
    (dot (tmpvar_2, cse_10) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_10), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = cse_12;
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_4 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_5)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_7.y)
   * tmpvar_4)) + (tmpvar_8 * mix (tmpvar_5, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_6)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_9;
  vec3 I_10;
  vec3 cse_11;
  cse_11 = -(xlv_TEXCOORD1);
  I_10 = -(cse_11);
  vec4 tmpvar_12;
  tmpvar_12.xyz = (I_10 - (2.0 * (
    dot (tmpvar_2, I_10)
   * tmpvar_2)));
  tmpvar_12.w = ((1.0 - tmpvar_3.y) * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_12.xyz, tmpvar_12.w);
  tmpvar_9 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_9 = (tmpvar_9 * tmpvar_8.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_11 - (2.0 * 
    (dot (tmpvar_2, cse_11) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_11), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (1.0 - tmpvar_3.y);
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_5 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_6)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_8.y)
   * tmpvar_5)) + (tmpvar_9 * mix (tmpvar_6, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 49 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_9;
  vec3 I_10;
  vec3 cse_11;
  cse_11 = -(xlv_TEXCOORD1);
  I_10 = -(cse_11);
  vec4 tmpvar_12;
  tmpvar_12.xyz = (I_10 - (2.0 * (
    dot (tmpvar_2, I_10)
   * tmpvar_2)));
  tmpvar_12.w = ((1.0 - tmpvar_3.y) * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_12.xyz, tmpvar_12.w);
  tmpvar_9 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_9 = (tmpvar_9 * tmpvar_8.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_11 - (2.0 * 
    (dot (tmpvar_2, cse_11) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_11), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (1.0 - tmpvar_3.y);
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_5 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_6)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_8.y)
   * tmpvar_5)) + (tmpvar_9 * mix (tmpvar_6, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_22;
  tmpvar_22 = (((tmpvar_19 * tmpvar_19) + (tmpvar_20 * tmpvar_20)) + (tmpvar_21 * tmpvar_21));
  vec4 tmpvar_23;
  tmpvar_23 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_19 * tmpvar_14.x) + (tmpvar_20 * tmpvar_14.y)) + (tmpvar_21 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_22)
  )) * (1.0/((1.0 + 
    (tmpvar_22 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_23.x) + (unity_LightColor[1].xyz * tmpvar_23.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_23.z)
  ) + (unity_LightColor[3].xyz * tmpvar_23.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_9;
  vec3 I_10;
  vec3 cse_11;
  cse_11 = -(xlv_TEXCOORD1);
  I_10 = -(cse_11);
  vec4 tmpvar_12;
  tmpvar_12.xyz = (I_10 - (2.0 * (
    dot (tmpvar_2, I_10)
   * tmpvar_2)));
  tmpvar_12.w = ((1.0 - tmpvar_3.y) * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_12.xyz, tmpvar_12.w);
  tmpvar_9 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_9 = (tmpvar_9 * tmpvar_8.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_11 - (2.0 * 
    (dot (tmpvar_2, cse_11) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_11), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (1.0 - tmpvar_3.y);
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_5 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_6)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_8.y)
   * tmpvar_5)) + (tmpvar_9 * mix (tmpvar_6, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 49 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_25;
  tmpvar_25 = (((tmpvar_22 * tmpvar_22) + (tmpvar_23 * tmpvar_23)) + (tmpvar_24 * tmpvar_24));
  vec4 tmpvar_26;
  tmpvar_26 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_22 * tmpvar_14.x) + (tmpvar_23 * tmpvar_14.y)) + (tmpvar_24 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_25)
  )) * (1.0/((1.0 + 
    (tmpvar_25 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_26.x) + (unity_LightColor[1].xyz * tmpvar_26.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_26.z)
  ) + (unity_LightColor[3].xyz * tmpvar_26.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_3;
  tmpvar_3 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, tmpvar_3.xxx);
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_3.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_9;
  vec3 I_10;
  vec3 cse_11;
  cse_11 = -(xlv_TEXCOORD1);
  I_10 = -(cse_11);
  vec4 tmpvar_12;
  tmpvar_12.xyz = (I_10 - (2.0 * (
    dot (tmpvar_2, I_10)
   * tmpvar_2)));
  tmpvar_12.w = ((1.0 - tmpvar_3.y) * 7.0);
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (unity_SpecCube0, tmpvar_12.xyz, tmpvar_12.w);
  tmpvar_9 = ((unity_SpecCube0_HDR.x * pow (tmpvar_13.w, unity_SpecCube0_HDR.y)) * tmpvar_13.xyz);
  tmpvar_9 = (tmpvar_9 * tmpvar_8.y);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((cse_11 - (2.0 * 
    (dot (tmpvar_2, cse_11) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_2, cse_11), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15 = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14);
  vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (1.0 - tmpvar_3.y);
  vec3 tmpvar_17;
  tmpvar_17 = (((
    ((tmpvar_5 + ((texture2D (unity_NHxRoughness, tmpvar_16).w * 16.0) * tmpvar_6)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_8.y)
   * tmpvar_5)) + (tmpvar_9 * mix (tmpvar_6, vec3(
    clamp ((tmpvar_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_15.yyy)));
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  c_1.w = tmpvar_18.w;
  c_1.xyz = tmpvar_17;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = c_1.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  vec4 tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_10;
  vec3 I_11;
  vec3 cse_12;
  cse_12 = -(xlv_TEXCOORD1);
  I_11 = -(cse_12);
  vec4 tmpvar_13;
  tmpvar_13.xyz = (I_11 - (2.0 * (
    dot (tmpvar_2, I_11)
   * tmpvar_2)));
  float cse_14;
  cse_14 = (1.0 - _Glossiness);
  tmpvar_13.w = (cse_14 * 7.0);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (unity_SpecCube0, tmpvar_13.xyz, tmpvar_13.w);
  tmpvar_10 = ((unity_SpecCube0_HDR.x * pow (tmpvar_15.w, unity_SpecCube0_HDR.y)) * tmpvar_15.xyz);
  tmpvar_10 = (tmpvar_10 * tmpvar_9.y);
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((cse_12 - (2.0 * 
    (dot (tmpvar_2, cse_12) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_2, cse_12), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = (((tmpvar_16 * tmpvar_16) * tmpvar_16) * tmpvar_16);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = cse_14;
  vec3 tmpvar_19;
  tmpvar_19 = (((
    ((tmpvar_8 + ((texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0) * tmpvar_6)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9.y)
   * tmpvar_8)) + (tmpvar_10 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_17.yyy)));
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_19;
  c_1.w = tmpvar_20.w;
  c_1.xyz = tmpvar_19;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = c_1.xyz;
  xlat_varoutput_21.w = tmpvar_3;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 49 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  vec4 tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_10;
  vec3 I_11;
  vec3 cse_12;
  cse_12 = -(xlv_TEXCOORD1);
  I_11 = -(cse_12);
  vec4 tmpvar_13;
  tmpvar_13.xyz = (I_11 - (2.0 * (
    dot (tmpvar_2, I_11)
   * tmpvar_2)));
  float cse_14;
  cse_14 = (1.0 - _Glossiness);
  tmpvar_13.w = (cse_14 * 7.0);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (unity_SpecCube0, tmpvar_13.xyz, tmpvar_13.w);
  tmpvar_10 = ((unity_SpecCube0_HDR.x * pow (tmpvar_15.w, unity_SpecCube0_HDR.y)) * tmpvar_15.xyz);
  tmpvar_10 = (tmpvar_10 * tmpvar_9.y);
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((cse_12 - (2.0 * 
    (dot (tmpvar_2, cse_12) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_2, cse_12), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = (((tmpvar_16 * tmpvar_16) * tmpvar_16) * tmpvar_16);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = cse_14;
  vec3 tmpvar_19;
  tmpvar_19 = (((
    ((tmpvar_8 + ((texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0) * tmpvar_6)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9.y)
   * tmpvar_8)) + (tmpvar_10 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_17.yyy)));
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_19;
  c_1.w = tmpvar_20.w;
  c_1.xyz = tmpvar_19;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = c_1.xyz;
  xlat_varoutput_21.w = tmpvar_3;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 48 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_14;
  vec3 x2_16;
  vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_15);
  x1_17.y = dot (unity_SHAg, tmpvar_15);
  x1_17.z = dot (unity_SHAb, tmpvar_15);
  vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_6.xyz = ((x2_16 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_17);
  vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_22;
  tmpvar_22 = (((tmpvar_19 * tmpvar_19) + (tmpvar_20 * tmpvar_20)) + (tmpvar_21 * tmpvar_21));
  vec4 tmpvar_23;
  tmpvar_23 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_19 * tmpvar_14.x) + (tmpvar_20 * tmpvar_14.y)) + (tmpvar_21 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_22)
  )) * (1.0/((1.0 + 
    (tmpvar_22 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_23.x) + (unity_LightColor[1].xyz * tmpvar_23.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_23.z)
  ) + (unity_LightColor[3].xyz * tmpvar_23.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  vec4 tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_10;
  vec3 I_11;
  vec3 cse_12;
  cse_12 = -(xlv_TEXCOORD1);
  I_11 = -(cse_12);
  vec4 tmpvar_13;
  tmpvar_13.xyz = (I_11 - (2.0 * (
    dot (tmpvar_2, I_11)
   * tmpvar_2)));
  float cse_14;
  cse_14 = (1.0 - _Glossiness);
  tmpvar_13.w = (cse_14 * 7.0);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (unity_SpecCube0, tmpvar_13.xyz, tmpvar_13.w);
  tmpvar_10 = ((unity_SpecCube0_HDR.x * pow (tmpvar_15.w, unity_SpecCube0_HDR.y)) * tmpvar_15.xyz);
  tmpvar_10 = (tmpvar_10 * tmpvar_9.y);
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((cse_12 - (2.0 * 
    (dot (tmpvar_2, cse_12) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_2, cse_12), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = (((tmpvar_16 * tmpvar_16) * tmpvar_16) * tmpvar_16);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = cse_14;
  vec3 tmpvar_19;
  tmpvar_19 = (((
    ((tmpvar_8 + ((texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0) * tmpvar_6)) * _LightColor0.xyz)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9.y)
   * tmpvar_8)) + (tmpvar_10 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_17.yyy)));
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_19;
  c_1.w = tmpvar_20.w;
  c_1.xyz = tmpvar_19;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = c_1.xyz;
  xlat_varoutput_21.w = tmpvar_3;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 49 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  tmpvar_3.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_5.xyz = tmpvar_14;
  vec4 o_15;
  vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_8 * 0.5);
  vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_8.zw;
  vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_14;
  vec3 x2_19;
  vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_18);
  x1_20.y = dot (unity_SHAg, tmpvar_18);
  x1_20.z = dot (unity_SHAb, tmpvar_18);
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_6.xyz = ((x2_19 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_20);
  vec4 tmpvar_22;
  tmpvar_22 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_25;
  tmpvar_25 = (((tmpvar_22 * tmpvar_22) + (tmpvar_23 * tmpvar_23)) + (tmpvar_24 * tmpvar_24));
  vec4 tmpvar_26;
  tmpvar_26 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_22 * tmpvar_14.x) + (tmpvar_23 * tmpvar_14.y)) + (tmpvar_24 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_25)
  )) * (1.0/((1.0 + 
    (tmpvar_25 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_26.x) + (unity_LightColor[1].xyz * tmpvar_26.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_26.z)
  ) + (unity_LightColor[3].xyz * tmpvar_26.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_15;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_3;
  vec4 cse_4;
  cse_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_3 = (cse_4.w * _Color.w);
  vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * cse_4.xyz);
  vec3 tmpvar_6;
  tmpvar_6 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  float tmpvar_7;
  tmpvar_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_5 * tmpvar_7) * tmpvar_3);
  vec4 tmpvar_9;
  tmpvar_9 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_10;
  vec3 I_11;
  vec3 cse_12;
  cse_12 = -(xlv_TEXCOORD1);
  I_11 = -(cse_12);
  vec4 tmpvar_13;
  tmpvar_13.xyz = (I_11 - (2.0 * (
    dot (tmpvar_2, I_11)
   * tmpvar_2)));
  float cse_14;
  cse_14 = (1.0 - _Glossiness);
  tmpvar_13.w = (cse_14 * 7.0);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (unity_SpecCube0, tmpvar_13.xyz, tmpvar_13.w);
  tmpvar_10 = ((unity_SpecCube0_HDR.x * pow (tmpvar_15.w, unity_SpecCube0_HDR.y)) * tmpvar_15.xyz);
  tmpvar_10 = (tmpvar_10 * tmpvar_9.y);
  vec2 tmpvar_16;
  tmpvar_16.x = dot ((cse_12 - (2.0 * 
    (dot (tmpvar_2, cse_12) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_2, cse_12), 0.0, 1.0));
  vec2 tmpvar_17;
  tmpvar_17 = (((tmpvar_16 * tmpvar_16) * tmpvar_16) * tmpvar_16);
  vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = cse_14;
  vec3 tmpvar_19;
  tmpvar_19 = (((
    ((tmpvar_8 + ((texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0) * tmpvar_6)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9.y)
   * tmpvar_8)) + (tmpvar_10 * mix (tmpvar_6, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), tmpvar_17.yyy)));
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_19;
  c_1.w = tmpvar_20.w;
  c_1.xyz = tmpvar_19;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = c_1.xyz;
  xlat_varoutput_21.w = tmpvar_3;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 54 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_14;
  vec3 x2_26;
  vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_25);
  x1_27.y = dot (unity_SHAg, tmpvar_25);
  x1_27.z = dot (unity_SHAb, tmpvar_25);
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  tmpvar_6.xyz = ((x2_26 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_27);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 n_7;
  n_7 = (normal_6 * tmpvar_5);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_10 = (tmpvar_9 * tmpvar_12);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_14;
  vec3 I_15;
  vec3 cse_16;
  cse_16 = -(xlv_TEXCOORD1);
  I_15 = -(cse_16);
  vec4 tmpvar_17;
  tmpvar_17.xyz = (I_15 - (2.0 * (
    dot (n_7, I_15)
   * n_7)));
  tmpvar_17.w = ((1.0 - tmpvar_8.y) * 7.0);
  vec4 tmpvar_18;
  tmpvar_18 = textureCube (unity_SpecCube0, tmpvar_17.xyz, tmpvar_17.w);
  tmpvar_14 = ((unity_SpecCube0_HDR.x * pow (tmpvar_18.w, unity_SpecCube0_HDR.y)) * tmpvar_18.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_13.y);
  vec2 tmpvar_19;
  tmpvar_19.x = dot ((cse_16 - (2.0 * 
    (dot (n_7, cse_16) * n_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_19.y = (1.0 - clamp (dot (n_7, cse_16), 0.0, 1.0));
  vec2 tmpvar_20;
  tmpvar_20 = (((tmpvar_19 * tmpvar_19) * tmpvar_19) * tmpvar_19);
  vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (1.0 - tmpvar_8.y);
  vec3 tmpvar_22;
  tmpvar_22 = (((
    ((tmpvar_10 + ((texture2D (unity_NHxRoughness, tmpvar_21).w * 16.0) * tmpvar_11)) * _LightColor0.xyz)
   * 
    clamp (dot (n_7, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_13.y)
   * tmpvar_10)) + (tmpvar_14 * mix (tmpvar_11, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_20.yyy)));
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_22;
  c_1.w = tmpvar_23.w;
  c_1.xyz = tmpvar_22;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = c_1.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 o_25;
  vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * 0.5);
  vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
  o_25.xy = (tmpvar_27 + tmpvar_26.w);
  o_25.zw = tmpvar_8.zw;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_14;
  vec3 x2_29;
  vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_28);
  x1_30.y = dot (unity_SHAg, tmpvar_28);
  x1_30.z = dot (unity_SHAb, tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  tmpvar_6.xyz = ((x2_29 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_30);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_25;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 n_7;
  n_7 = (normal_6 * tmpvar_5);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_10 = (tmpvar_9 * tmpvar_12);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_14;
  vec3 I_15;
  vec3 cse_16;
  cse_16 = -(xlv_TEXCOORD1);
  I_15 = -(cse_16);
  vec4 tmpvar_17;
  tmpvar_17.xyz = (I_15 - (2.0 * (
    dot (n_7, I_15)
   * n_7)));
  tmpvar_17.w = ((1.0 - tmpvar_8.y) * 7.0);
  vec4 tmpvar_18;
  tmpvar_18 = textureCube (unity_SpecCube0, tmpvar_17.xyz, tmpvar_17.w);
  tmpvar_14 = ((unity_SpecCube0_HDR.x * pow (tmpvar_18.w, unity_SpecCube0_HDR.y)) * tmpvar_18.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_13.y);
  vec2 tmpvar_19;
  tmpvar_19.x = dot ((cse_16 - (2.0 * 
    (dot (n_7, cse_16) * n_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_19.y = (1.0 - clamp (dot (n_7, cse_16), 0.0, 1.0));
  vec2 tmpvar_20;
  tmpvar_20 = (((tmpvar_19 * tmpvar_19) * tmpvar_19) * tmpvar_19);
  vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (1.0 - tmpvar_8.y);
  vec3 tmpvar_22;
  tmpvar_22 = (((
    ((tmpvar_10 + ((texture2D (unity_NHxRoughness, tmpvar_21).w * 16.0) * tmpvar_11)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (n_7, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_13.y)
   * tmpvar_10)) + (tmpvar_14 * mix (tmpvar_11, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_20.yyy)));
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_22;
  c_1.w = tmpvar_23.w;
  c_1.xyz = tmpvar_22;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = c_1.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 54 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_14;
  vec3 x2_26;
  vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_25);
  x1_27.y = dot (unity_SHAg, tmpvar_25);
  x1_27.z = dot (unity_SHAb, tmpvar_25);
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  tmpvar_6.xyz = ((x2_26 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_27);
  vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * tmpvar_14.x) + (tmpvar_30 * tmpvar_14.y)) + (tmpvar_31 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_33.x) + (unity_LightColor[1].xyz * tmpvar_33.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_33.z)
  ) + (unity_LightColor[3].xyz * tmpvar_33.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 n_7;
  n_7 = (normal_6 * tmpvar_5);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_10 = (tmpvar_9 * tmpvar_12);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_14;
  vec3 I_15;
  vec3 cse_16;
  cse_16 = -(xlv_TEXCOORD1);
  I_15 = -(cse_16);
  vec4 tmpvar_17;
  tmpvar_17.xyz = (I_15 - (2.0 * (
    dot (n_7, I_15)
   * n_7)));
  tmpvar_17.w = ((1.0 - tmpvar_8.y) * 7.0);
  vec4 tmpvar_18;
  tmpvar_18 = textureCube (unity_SpecCube0, tmpvar_17.xyz, tmpvar_17.w);
  tmpvar_14 = ((unity_SpecCube0_HDR.x * pow (tmpvar_18.w, unity_SpecCube0_HDR.y)) * tmpvar_18.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_13.y);
  vec2 tmpvar_19;
  tmpvar_19.x = dot ((cse_16 - (2.0 * 
    (dot (n_7, cse_16) * n_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_19.y = (1.0 - clamp (dot (n_7, cse_16), 0.0, 1.0));
  vec2 tmpvar_20;
  tmpvar_20 = (((tmpvar_19 * tmpvar_19) * tmpvar_19) * tmpvar_19);
  vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (1.0 - tmpvar_8.y);
  vec3 tmpvar_22;
  tmpvar_22 = (((
    ((tmpvar_10 + ((texture2D (unity_NHxRoughness, tmpvar_21).w * 16.0) * tmpvar_11)) * _LightColor0.xyz)
   * 
    clamp (dot (n_7, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_13.y)
   * tmpvar_10)) + (tmpvar_14 * mix (tmpvar_11, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_20.yyy)));
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_22;
  c_1.w = tmpvar_23.w;
  c_1.xyz = tmpvar_22;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = c_1.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 o_25;
  vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * 0.5);
  vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
  o_25.xy = (tmpvar_27 + tmpvar_26.w);
  o_25.zw = tmpvar_8.zw;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_14;
  vec3 x2_29;
  vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_28);
  x1_30.y = dot (unity_SHAg, tmpvar_28);
  x1_30.z = dot (unity_SHAb, tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  tmpvar_6.xyz = ((x2_29 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_30);
  vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_32 * tmpvar_14.x) + (tmpvar_33 * tmpvar_14.y)) + (tmpvar_34 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_35)
  )) * (1.0/((1.0 + 
    (tmpvar_35 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_36.z)
  ) + (unity_LightColor[3].xyz * tmpvar_36.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_25;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (
    dot (normal_6.xy, normal_6.xy)
  , 0.0, 1.0)));
  vec3 n_7;
  n_7 = (normal_6 * tmpvar_5);
  vec2 tmpvar_8;
  tmpvar_8 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, tmpvar_8.xxx);
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (tmpvar_8.x * unity_ColorSpaceDielectricSpec.w));
  tmpvar_10 = (tmpvar_9 * tmpvar_12);
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_14;
  vec3 I_15;
  vec3 cse_16;
  cse_16 = -(xlv_TEXCOORD1);
  I_15 = -(cse_16);
  vec4 tmpvar_17;
  tmpvar_17.xyz = (I_15 - (2.0 * (
    dot (n_7, I_15)
   * n_7)));
  tmpvar_17.w = ((1.0 - tmpvar_8.y) * 7.0);
  vec4 tmpvar_18;
  tmpvar_18 = textureCube (unity_SpecCube0, tmpvar_17.xyz, tmpvar_17.w);
  tmpvar_14 = ((unity_SpecCube0_HDR.x * pow (tmpvar_18.w, unity_SpecCube0_HDR.y)) * tmpvar_18.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_13.y);
  vec2 tmpvar_19;
  tmpvar_19.x = dot ((cse_16 - (2.0 * 
    (dot (n_7, cse_16) * n_7)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_19.y = (1.0 - clamp (dot (n_7, cse_16), 0.0, 1.0));
  vec2 tmpvar_20;
  tmpvar_20 = (((tmpvar_19 * tmpvar_19) * tmpvar_19) * tmpvar_19);
  vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (1.0 - tmpvar_8.y);
  vec3 tmpvar_22;
  tmpvar_22 = (((
    ((tmpvar_10 + ((texture2D (unity_NHxRoughness, tmpvar_21).w * 16.0) * tmpvar_11)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (n_7, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_13.y)
   * tmpvar_10)) + (tmpvar_14 * mix (tmpvar_11, vec3(
    clamp ((tmpvar_8.y + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_20.yyy)));
  vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_22;
  c_1.w = tmpvar_23.w;
  c_1.xyz = tmpvar_22;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = c_1.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 54 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_14;
  vec3 x2_26;
  vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_25);
  x1_27.y = dot (unity_SHAg, tmpvar_25);
  x1_27.z = dot (unity_SHAb, tmpvar_25);
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  tmpvar_6.xyz = ((x2_26 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_27);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 n_9;
  n_9 = (normal_8 * tmpvar_5);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_6);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_15;
  vec3 I_16;
  vec3 cse_17;
  cse_17 = -(xlv_TEXCOORD1);
  I_16 = -(cse_17);
  vec4 tmpvar_18;
  tmpvar_18.xyz = (I_16 - (2.0 * (
    dot (n_9, I_16)
   * n_9)));
  float cse_19;
  cse_19 = (1.0 - _Glossiness);
  tmpvar_18.w = (cse_19 * 7.0);
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (unity_SpecCube0, tmpvar_18.xyz, tmpvar_18.w);
  tmpvar_15 = ((unity_SpecCube0_HDR.x * pow (tmpvar_20.w, unity_SpecCube0_HDR.y)) * tmpvar_20.xyz);
  tmpvar_15 = (tmpvar_15 * tmpvar_14.y);
  vec2 tmpvar_21;
  tmpvar_21.x = dot ((cse_17 - (2.0 * 
    (dot (n_9, cse_17) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_21.y = (1.0 - clamp (dot (n_9, cse_17), 0.0, 1.0));
  vec2 tmpvar_22;
  tmpvar_22 = (((tmpvar_21 * tmpvar_21) * tmpvar_21) * tmpvar_21);
  vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = cse_19;
  vec3 tmpvar_24;
  tmpvar_24 = (((
    ((tmpvar_13 + ((texture2D (unity_NHxRoughness, tmpvar_23).w * 16.0) * tmpvar_11)) * _LightColor0.xyz)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_14.y)
   * tmpvar_13)) + (tmpvar_15 * mix (tmpvar_11, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_22.yyy)));
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  c_1.w = tmpvar_25.w;
  c_1.xyz = tmpvar_24;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = tmpvar_6;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 o_25;
  vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * 0.5);
  vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
  o_25.xy = (tmpvar_27 + tmpvar_26.w);
  o_25.zw = tmpvar_8.zw;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_14;
  vec3 x2_29;
  vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_28);
  x1_30.y = dot (unity_SHAg, tmpvar_28);
  x1_30.z = dot (unity_SHAb, tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  tmpvar_6.xyz = ((x2_29 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_30);
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_25;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 n_9;
  n_9 = (normal_8 * tmpvar_5);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_6);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_15;
  vec3 I_16;
  vec3 cse_17;
  cse_17 = -(xlv_TEXCOORD1);
  I_16 = -(cse_17);
  vec4 tmpvar_18;
  tmpvar_18.xyz = (I_16 - (2.0 * (
    dot (n_9, I_16)
   * n_9)));
  float cse_19;
  cse_19 = (1.0 - _Glossiness);
  tmpvar_18.w = (cse_19 * 7.0);
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (unity_SpecCube0, tmpvar_18.xyz, tmpvar_18.w);
  tmpvar_15 = ((unity_SpecCube0_HDR.x * pow (tmpvar_20.w, unity_SpecCube0_HDR.y)) * tmpvar_20.xyz);
  tmpvar_15 = (tmpvar_15 * tmpvar_14.y);
  vec2 tmpvar_21;
  tmpvar_21.x = dot ((cse_17 - (2.0 * 
    (dot (n_9, cse_17) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_21.y = (1.0 - clamp (dot (n_9, cse_17), 0.0, 1.0));
  vec2 tmpvar_22;
  tmpvar_22 = (((tmpvar_21 * tmpvar_21) * tmpvar_21) * tmpvar_21);
  vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = cse_19;
  vec3 tmpvar_24;
  tmpvar_24 = (((
    ((tmpvar_13 + ((texture2D (unity_NHxRoughness, tmpvar_23).w * 16.0) * tmpvar_11)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_14.y)
   * tmpvar_13)) + (tmpvar_15 * mix (tmpvar_11, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_22.yyy)));
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  c_1.w = tmpvar_25.w;
  c_1.xyz = tmpvar_24;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = tmpvar_6;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 54 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_14;
  vec3 x2_26;
  vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_25);
  x1_27.y = dot (unity_SHAg, tmpvar_25);
  x1_27.z = dot (unity_SHAb, tmpvar_25);
  vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  tmpvar_6.xyz = ((x2_26 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_27);
  vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * tmpvar_14.x) + (tmpvar_30 * tmpvar_14.y)) + (tmpvar_31 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_33.x) + (unity_LightColor[1].xyz * tmpvar_33.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_33.z)
  ) + (unity_LightColor[3].xyz * tmpvar_33.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 n_9;
  n_9 = (normal_8 * tmpvar_5);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_6);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_15;
  vec3 I_16;
  vec3 cse_17;
  cse_17 = -(xlv_TEXCOORD1);
  I_16 = -(cse_17);
  vec4 tmpvar_18;
  tmpvar_18.xyz = (I_16 - (2.0 * (
    dot (n_9, I_16)
   * n_9)));
  float cse_19;
  cse_19 = (1.0 - _Glossiness);
  tmpvar_18.w = (cse_19 * 7.0);
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (unity_SpecCube0, tmpvar_18.xyz, tmpvar_18.w);
  tmpvar_15 = ((unity_SpecCube0_HDR.x * pow (tmpvar_20.w, unity_SpecCube0_HDR.y)) * tmpvar_20.xyz);
  tmpvar_15 = (tmpvar_15 * tmpvar_14.y);
  vec2 tmpvar_21;
  tmpvar_21.x = dot ((cse_17 - (2.0 * 
    (dot (n_9, cse_17) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_21.y = (1.0 - clamp (dot (n_9, cse_17), 0.0, 1.0));
  vec2 tmpvar_22;
  tmpvar_22 = (((tmpvar_21 * tmpvar_21) * tmpvar_21) * tmpvar_21);
  vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = cse_19;
  vec3 tmpvar_24;
  tmpvar_24 = (((
    ((tmpvar_13 + ((texture2D (unity_NHxRoughness, tmpvar_23).w * 16.0) * tmpvar_11)) * _LightColor0.xyz)
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_14.y)
   * tmpvar_13)) + (tmpvar_15 * mix (tmpvar_11, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_22.yyy)));
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  c_1.w = tmpvar_25.w;
  c_1.xyz = tmpvar_24;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = tmpvar_6;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform vec4 unity_4LightAtten0;
uniform vec4 unity_LightColor[8];
uniform vec4 unity_SHAr;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHC;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (_Object2World * gl_Vertex);
  vec4 tmpvar_8;
  tmpvar_8 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_9;
  texcoord_9.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_10;
  if ((_UVSec == 0.0)) {
    tmpvar_10 = tmpvar_1;
  } else {
    tmpvar_10 = tmpvar_2;
  };
  texcoord_9.zw = ((tmpvar_10 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * gl_Normal.x)
   + 
    (v_12.xyz * gl_Normal.y)
  ) + (v_13.xyz * gl_Normal.z)));
  mat3 tmpvar_15;
  tmpvar_15[0] = _Object2World[0].xyz;
  tmpvar_15[1] = _Object2World[1].xyz;
  tmpvar_15[2] = _Object2World[2].xyz;
  vec4 tmpvar_16;
  tmpvar_16.xyz = normalize((tmpvar_15 * TANGENT.xyz));
  tmpvar_16.w = TANGENT.w;
  vec3 tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_17 = tmpvar_16.xyz;
  tmpvar_18 = (((tmpvar_14.yzx * tmpvar_16.zxy) - (tmpvar_14.zxy * tmpvar_16.yzx)) * TANGENT.www);
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_14.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_14.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_14.z;
  vec3 v_22;
  v_22.x = tmpvar_19.x;
  v_22.y = tmpvar_20.x;
  v_22.z = tmpvar_21.x;
  tmpvar_3.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_19.y;
  v_23.y = tmpvar_20.y;
  v_23.z = tmpvar_21.y;
  tmpvar_4.xyz = v_23;
  vec3 v_24;
  v_24.x = tmpvar_19.z;
  v_24.y = tmpvar_20.z;
  v_24.z = tmpvar_21.z;
  tmpvar_5.xyz = v_24;
  vec4 o_25;
  vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * 0.5);
  vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
  o_25.xy = (tmpvar_27 + tmpvar_26.w);
  o_25.zw = tmpvar_8.zw;
  vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = tmpvar_14;
  vec3 x2_29;
  vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_28);
  x1_30.y = dot (unity_SHAg, tmpvar_28);
  x1_30.z = dot (unity_SHAb, tmpvar_28);
  vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_14.xyzz * tmpvar_14.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  tmpvar_6.xyz = ((x2_29 + (unity_SHC.xyz * 
    ((tmpvar_14.x * tmpvar_14.x) - (tmpvar_14.y * tmpvar_14.y))
  )) + x1_30);
  vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_7.x);
  vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_7.y);
  vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_7.z);
  vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_32 * tmpvar_14.x) + (tmpvar_33 * tmpvar_14.y)) + (tmpvar_34 * tmpvar_14.z))
   * 
    inversesqrt(tmpvar_35)
  )) * (1.0/((1.0 + 
    (tmpvar_35 * unity_4LightAtten0)
  ))));
  tmpvar_6.xyz = (tmpvar_6.xyz + ((
    ((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_36.z)
  ) + (unity_LightColor[3].xyz * tmpvar_36.w)));
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = texcoord_9;
  xlv_TEXCOORD1 = normalize((tmpvar_7.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = o_25;
}


#endif
#ifdef FRAGMENT
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube unity_SpecCube0;
uniform vec4 unity_SpecCube0_HDR;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 c_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD2.xyz;
  tmpvar_3 = xlv_TEXCOORD2_1.xyz;
  tmpvar_4 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_2.x;
  tmpvar_5[0].y = tmpvar_3.x;
  tmpvar_5[0].z = tmpvar_4.x;
  tmpvar_5[1].x = tmpvar_2.y;
  tmpvar_5[1].y = tmpvar_3.y;
  tmpvar_5[1].z = tmpvar_4.y;
  tmpvar_5[2].x = tmpvar_2.z;
  tmpvar_5[2].y = tmpvar_3.z;
  tmpvar_5[2].z = tmpvar_4.z;
  float tmpvar_6;
  vec4 cse_7;
  cse_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_6 = (cse_7.w * _Color.w);
  vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (
    dot (normal_8.xy, normal_8.xy)
  , 0.0, 1.0)));
  vec3 n_9;
  n_9 = (normal_8 * tmpvar_5);
  vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * cse_7.xyz);
  vec3 tmpvar_11;
  tmpvar_11 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_10, vec3(_Metallic));
  float tmpvar_12;
  tmpvar_12 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  vec3 tmpvar_13;
  tmpvar_13 = ((tmpvar_10 * tmpvar_12) * tmpvar_6);
  vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  vec3 tmpvar_15;
  vec3 I_16;
  vec3 cse_17;
  cse_17 = -(xlv_TEXCOORD1);
  I_16 = -(cse_17);
  vec4 tmpvar_18;
  tmpvar_18.xyz = (I_16 - (2.0 * (
    dot (n_9, I_16)
   * n_9)));
  float cse_19;
  cse_19 = (1.0 - _Glossiness);
  tmpvar_18.w = (cse_19 * 7.0);
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (unity_SpecCube0, tmpvar_18.xyz, tmpvar_18.w);
  tmpvar_15 = ((unity_SpecCube0_HDR.x * pow (tmpvar_20.w, unity_SpecCube0_HDR.y)) * tmpvar_20.xyz);
  tmpvar_15 = (tmpvar_15 * tmpvar_14.y);
  vec2 tmpvar_21;
  tmpvar_21.x = dot ((cse_17 - (2.0 * 
    (dot (n_9, cse_17) * n_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_21.y = (1.0 - clamp (dot (n_9, cse_17), 0.0, 1.0));
  vec2 tmpvar_22;
  tmpvar_22 = (((tmpvar_21 * tmpvar_21) * tmpvar_21) * tmpvar_21);
  vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = cse_19;
  vec3 tmpvar_24;
  tmpvar_24 = (((
    ((tmpvar_13 + ((texture2D (unity_NHxRoughness, tmpvar_23).w * 16.0) * tmpvar_11)) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x))
   * 
    clamp (dot (n_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_14.y)
   * tmpvar_13)) + (tmpvar_15 * mix (tmpvar_11, vec3(
    clamp ((_Glossiness + (1.0 - tmpvar_12)), 0.0, 1.0)
  ), tmpvar_22.yyy)));
  vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  c_1.w = tmpvar_25.w;
  c_1.xyz = tmpvar_24;
  c_1.xyz = c_1.xyz;
  vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = tmpvar_6;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
}
 }


 // Stats for Vertex shader:
 //      opengl : 35 avg math (28..47), 4 avg texture (2..7), 0 avg branch (0..1)
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 413967
Program "vp" {
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w)) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 28 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * _LightColor0.xyz) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 4 textures
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  )) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 4 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  )) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w)) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 40 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  )) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x)) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  tmpvar_3.x = xlv_TEXCOORD2.w;
  tmpvar_3.y = xlv_TEXCOORD2_1.w;
  tmpvar_3.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_4;
  viewDir_4 = -(xlv_TEXCOORD1);
  vec2 tmpvar_5;
  tmpvar_5.x = dot ((viewDir_4 - (2.0 * 
    (dot (tmpvar_1, viewDir_4) * tmpvar_1)
  )), tmpvar_3);
  tmpvar_5.y = (1.0 - clamp (dot (tmpvar_1, viewDir_4), 0.0, 1.0));
  vec2 tmpvar_6;
  tmpvar_6.x = (((tmpvar_5 * tmpvar_5) * tmpvar_5) * tmpvar_5).x;
  tmpvar_6.y = (1.0 - _Glossiness);
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((
    (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_6).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  )) * clamp (dot (tmpvar_1, tmpvar_3), 0.0, 1.0));
  vec4 xlat_varoutput_8;
  xlat_varoutput_8.xyz = tmpvar_7.xyz;
  xlat_varoutput_8.w = 1.0;
  gl_FragData[0] = xlat_varoutput_8;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  tmpvar_3 = (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_7;
  tmpvar_7 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_9;
  if ((tmpvar_8.x < tmpvar_7)) {
    tmpvar_9 = _LightShadowData.x;
  } else {
    tmpvar_9 = 1.0;
  };
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((tmpvar_3 + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * tmpvar_4)
  ) * (_LightColor0.xyz * 
    (tmpvar_6.w * tmpvar_9)
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec3 tmpvar_2;
  tmpvar_2 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_2, vec3(_Metallic));
  tmpvar_3 = (tmpvar_2 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_8;
  tmpvar_8 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_10;
  if ((tmpvar_9.x < tmpvar_8)) {
    tmpvar_10 = _LightShadowData.x;
  } else {
    tmpvar_10 = 1.0;
  };
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((tmpvar_3 + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * tmpvar_4)
  ) * (_LightColor0.xyz * 
    ((tmpvar_6.w * tmpvar_7.w) * tmpvar_10)
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 4 textures
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w)) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 28 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * _LightColor0.xyz) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 5 textures
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  )) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 5 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  )) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w)) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 40 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  )) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x)) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 5 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_5;
  viewDir_5 = -(xlv_TEXCOORD1);
  vec2 tmpvar_6;
  tmpvar_6.x = dot ((viewDir_5 - (2.0 * 
    (dot (tmpvar_1, viewDir_5) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_6.y = (1.0 - clamp (dot (tmpvar_1, viewDir_5), 0.0, 1.0));
  vec2 tmpvar_7;
  tmpvar_7.x = (((tmpvar_6 * tmpvar_6) * tmpvar_6) * tmpvar_6).x;
  tmpvar_7.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_7).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  )) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  vec4 xlat_varoutput_9;
  xlat_varoutput_9.xyz = tmpvar_8.xyz;
  xlat_varoutput_9.w = 1.0;
  gl_FragData[0] = xlat_varoutput_9;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 5 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_8;
  tmpvar_8 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_10;
  if ((tmpvar_9.x < tmpvar_8)) {
    tmpvar_10 = _LightShadowData.x;
  } else {
    tmpvar_10 = 1.0;
  };
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((tmpvar_4 + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * tmpvar_5)
  ) * (_LightColor0.xyz * 
    (tmpvar_7.w * tmpvar_10)
  )) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 6 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  vec2 tmpvar_2;
  tmpvar_2 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, tmpvar_2.xxx);
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_2.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_8;
  tmpvar_8 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_9;
  tmpvar_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < tmpvar_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec2 tmpvar_13;
  tmpvar_13.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_1, viewDir_12) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_13.y = (1.0 - clamp (dot (tmpvar_1, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_14;
  tmpvar_14.x = (((tmpvar_13 * tmpvar_13) * tmpvar_13) * tmpvar_13).x;
  tmpvar_14.y = (1.0 - tmpvar_2.y);
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((tmpvar_4 + 
    ((texture2D (unity_NHxRoughness, tmpvar_14).w * 16.0) * tmpvar_5)
  ) * (_LightColor0.xyz * 
    ((tmpvar_7.w * tmpvar_8.w) * tmpvar_11)
  )) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 3 textures
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w)) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 29 math, 2 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * _LightColor0.xyz) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 4 textures
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 32 math, 4 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w)) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 41 math, 5 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 30 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x)) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 31 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5.x = xlv_TEXCOORD2.w;
  tmpvar_5.y = xlv_TEXCOORD2_1.w;
  tmpvar_5.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_5);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  vec2 tmpvar_8;
  tmpvar_8.x = (((tmpvar_7 * tmpvar_7) * tmpvar_7) * tmpvar_7).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (((
    ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_2)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_8).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  )) * clamp (dot (tmpvar_1, tmpvar_5), 0.0, 1.0));
  vec4 xlat_varoutput_10;
  xlat_varoutput_10.xyz = tmpvar_9.xyz;
  xlat_varoutput_10.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_10;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 4 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_2);
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_9;
  tmpvar_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_10;
  tmpvar_10 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_11;
  if ((tmpvar_10.x < tmpvar_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  vec3 viewDir_12;
  viewDir_12 = -(xlv_TEXCOORD1);
  vec2 tmpvar_13;
  tmpvar_13.x = dot ((viewDir_12 - (2.0 * 
    (dot (tmpvar_1, viewDir_12) * tmpvar_1)
  )), tmpvar_7);
  tmpvar_13.y = (1.0 - clamp (dot (tmpvar_1, viewDir_12), 0.0, 1.0));
  vec2 tmpvar_14;
  tmpvar_14.x = (((tmpvar_13 * tmpvar_13) * tmpvar_13) * tmpvar_13).x;
  tmpvar_14.y = (1.0 - _Glossiness);
  vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((tmpvar_6 + 
    ((texture2D (unity_NHxRoughness, tmpvar_14).w * 16.0) * tmpvar_5)
  ) * (_LightColor0.xyz * 
    (tmpvar_8.w * tmpvar_11)
  )) * clamp (dot (tmpvar_1, tmpvar_7), 0.0, 1.0));
  vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 39 math, 5 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  float tmpvar_2;
  vec4 cse_3;
  cse_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_2 = (cse_3.w * _Color.w);
  vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * cse_3.xyz);
  vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_4 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_2);
  vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_10;
  tmpvar_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_11;
  tmpvar_11 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_12;
  if ((tmpvar_11.x < tmpvar_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_1, viewDir_13) * tmpvar_1)
  )), tmpvar_7);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_1, viewDir_13), 0.0, 1.0));
  vec2 tmpvar_15;
  tmpvar_15.x = (((tmpvar_14 * tmpvar_14) * tmpvar_14) * tmpvar_14).x;
  tmpvar_15.y = (1.0 - _Glossiness);
  vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = (((tmpvar_6 + 
    ((texture2D (unity_NHxRoughness, tmpvar_15).w * 16.0) * tmpvar_5)
  ) * (_LightColor0.xyz * 
    ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12)
  )) * clamp (dot (tmpvar_1, tmpvar_7), 0.0, 1.0));
  vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = tmpvar_2;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 5 textures
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w)) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 34 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * _LightColor0.xyz) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 42 math, 6 textures
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  )) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  )) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 35 math, 5 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w)) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 46 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  )) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 35 math, 5 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x)) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 6 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (n_6, viewDir_10) * n_6)
  )), tmpvar_9);
  tmpvar_11.y = (1.0 - clamp (dot (n_6, viewDir_10), 0.0, 1.0));
  vec2 tmpvar_12;
  tmpvar_12.x = (((tmpvar_11 * tmpvar_11) * tmpvar_11) * tmpvar_11).x;
  tmpvar_12.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  )) * clamp (dot (n_6, tmpvar_9), 0.0, 1.0));
  vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 43 math, 6 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  tmpvar_9 = (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_13;
  tmpvar_13 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_15;
  if ((tmpvar_14.x < tmpvar_13)) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  vec2 tmpvar_17;
  tmpvar_17.x = dot ((viewDir_16 - (2.0 * 
    (dot (n_6, viewDir_16) * n_6)
  )), tmpvar_11);
  tmpvar_17.y = (1.0 - clamp (dot (n_6, viewDir_16), 0.0, 1.0));
  vec2 tmpvar_18;
  tmpvar_18.x = (((tmpvar_17 * tmpvar_17) * tmpvar_17) * tmpvar_17).x;
  tmpvar_18.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((tmpvar_9 + 
    ((texture2D (unity_NHxRoughness, tmpvar_18).w * 16.0) * tmpvar_10)
  ) * (_LightColor0.xyz * 
    (tmpvar_12.w * tmpvar_15)
  )) * clamp (dot (n_6, tmpvar_11), 0.0, 1.0));
  vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 44 math, 7 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MetallicGlossMap;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (
    dot (normal_5.xy, normal_5.xy)
  , 0.0, 1.0)));
  vec3 n_6;
  n_6 = (normal_5 * tmpvar_4);
  vec2 tmpvar_7;
  tmpvar_7 = texture2D (_MetallicGlossMap, xlv_TEXCOORD0.xy).xw;
  vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * texture2D (_MainTex, xlv_TEXCOORD0.xy).xyz);
  vec3 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_8, tmpvar_7.xxx);
  tmpvar_9 = (tmpvar_8 * (unity_ColorSpaceDielectricSpec.w - (tmpvar_7.x * unity_ColorSpaceDielectricSpec.w)));
  vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_13;
  tmpvar_13 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_14;
  tmpvar_14 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_16;
  if ((tmpvar_15.x < tmpvar_14)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  vec2 tmpvar_18;
  tmpvar_18.x = dot ((viewDir_17 - (2.0 * 
    (dot (n_6, viewDir_17) * n_6)
  )), tmpvar_11);
  tmpvar_18.y = (1.0 - clamp (dot (n_6, viewDir_17), 0.0, 1.0));
  vec2 tmpvar_19;
  tmpvar_19.x = (((tmpvar_18 * tmpvar_18) * tmpvar_18) * tmpvar_18).x;
  tmpvar_19.y = (1.0 - tmpvar_7.y);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_9 + 
    ((texture2D (unity_NHxRoughness, tmpvar_19).w * 16.0) * tmpvar_10)
  ) * (_LightColor0.xyz * 
    ((tmpvar_12.w * tmpvar_13.w) * tmpvar_16)
  )) * clamp (dot (n_6, tmpvar_11), 0.0, 1.0));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 4 textures
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, vec2(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  )).w)) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 35 math, 3 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * _LightColor0.xyz) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 43 math, 5 textures
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex));
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    ((float((xlv_TEXCOORD5.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w)
  )) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 38 math, 5 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5))).w * textureCube (_LightTexture0, xlv_TEXCOORD5).w)
  )) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 4 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2D (_LightTexture0, xlv_TEXCOORD5).w)) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 47 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25);
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_25);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (((float(
      (xlv_TEXCOORD5.z > 0.0)
    ) * texture2D (_LightTexture0, (
      (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w)
     + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x * (1.0 - _LightShadowData.x))))
  )) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 36 math, 4 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec4 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x)) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 37 math, 5 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec4 o_24;
  vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * 0.5);
  vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_25.x;
  tmpvar_26.y = (tmpvar_25.y * _ProjectionParams.x);
  o_24.xy = (tmpvar_26 + tmpvar_25.w);
  o_24.zw = tmpvar_7.zw;
  vec3 tmpvar_27;
  tmpvar_27 = (_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w));
  tmpvar_3.w = tmpvar_27.x;
  tmpvar_4.w = tmpvar_27.y;
  tmpvar_5.w = tmpvar_27.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD6 = o_24;
}


#endif
#ifdef FRAGMENT
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec2 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (n_8, viewDir_11) * n_8)
  )), tmpvar_10);
  tmpvar_12.y = (1.0 - clamp (dot (n_8, viewDir_11), 0.0, 1.0));
  vec2 tmpvar_13;
  tmpvar_13.x = (((tmpvar_12 * tmpvar_12) * tmpvar_12) * tmpvar_12).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w))) * tmpvar_5)
   + 
    ((texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic)))
  ) * (_LightColor0.xyz * 
    (texture2D (_LightTexture0, xlv_TEXCOORD5).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x)
  )) * clamp (dot (n_8, tmpvar_10), 0.0, 1.0));
  vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 44 math, 5 textures, 1 branches
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_5);
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  float tmpvar_14;
  tmpvar_14 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_16;
  if ((tmpvar_15.x < tmpvar_14)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  vec2 tmpvar_18;
  tmpvar_18.x = dot ((viewDir_17 - (2.0 * 
    (dot (n_8, viewDir_17) * n_8)
  )), tmpvar_12);
  tmpvar_18.y = (1.0 - clamp (dot (n_8, viewDir_17), 0.0, 1.0));
  vec2 tmpvar_19;
  tmpvar_19.x = (((tmpvar_18 * tmpvar_18) * tmpvar_18) * tmpvar_18).x;
  tmpvar_19.y = (1.0 - _Glossiness);
  vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = (((tmpvar_11 + 
    ((texture2D (unity_NHxRoughness, tmpvar_19).w * 16.0) * tmpvar_10)
  ) * (_LightColor0.xyz * 
    (tmpvar_13.w * tmpvar_16)
  )) * clamp (dot (n_8, tmpvar_12), 0.0, 1.0));
  vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "opengl " {
// Stats: 45 math, 6 textures, 1 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 _MainTex_ST;
uniform vec4 _DetailAlbedoMap_ST;
uniform float _UVSec;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec2 tmpvar_1;
  tmpvar_1 = gl_MultiTexCoord0.xy;
  vec2 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord1.xy;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  vec4 tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = (_Object2World * gl_Vertex);
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 texcoord_8;
  texcoord_8.xy = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * gl_Normal.x)
   + 
    (v_11.xyz * gl_Normal.y)
  ) + (v_12.xyz * gl_Normal.z)));
  mat3 tmpvar_14;
  tmpvar_14[0] = _Object2World[0].xyz;
  tmpvar_14[1] = _Object2World[1].xyz;
  tmpvar_14[2] = _Object2World[2].xyz;
  vec4 tmpvar_15;
  tmpvar_15.xyz = normalize((tmpvar_14 * TANGENT.xyz));
  tmpvar_15.w = TANGENT.w;
  vec3 tmpvar_16;
  vec3 tmpvar_17;
  tmpvar_16 = tmpvar_15.xyz;
  tmpvar_17 = (((tmpvar_13.yzx * tmpvar_15.zxy) - (tmpvar_13.zxy * tmpvar_15.yzx)) * TANGENT.www);
  vec3 tmpvar_18;
  vec3 tmpvar_19;
  vec3 tmpvar_20;
  tmpvar_18.x = tmpvar_16.x;
  tmpvar_18.y = tmpvar_17.x;
  tmpvar_18.z = tmpvar_13.x;
  tmpvar_19.x = tmpvar_16.y;
  tmpvar_19.y = tmpvar_17.y;
  tmpvar_19.z = tmpvar_13.y;
  tmpvar_20.x = tmpvar_16.z;
  tmpvar_20.y = tmpvar_17.z;
  tmpvar_20.z = tmpvar_13.z;
  vec3 v_21;
  v_21.x = tmpvar_18.x;
  v_21.y = tmpvar_19.x;
  v_21.z = tmpvar_20.x;
  tmpvar_3.xyz = v_21;
  vec3 v_22;
  v_22.x = tmpvar_18.y;
  v_22.y = tmpvar_19.y;
  v_22.z = tmpvar_20.y;
  tmpvar_4.xyz = v_22;
  vec3 v_23;
  v_23.x = tmpvar_18.z;
  v_23.y = tmpvar_19.z;
  v_23.z = tmpvar_20.z;
  tmpvar_5.xyz = v_23;
  vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_6.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_3.w = tmpvar_24.x;
  tmpvar_4.w = tmpvar_24.y;
  tmpvar_5.w = tmpvar_24.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_8;
  xlv_TEXCOORD1 = normalize((tmpvar_6.xyz - _WorldSpaceCameraPos));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD2_1 = tmpvar_4;
  xlv_TEXCOORD2_2 = tmpvar_5;
  vec4 cse_25;
  cse_25 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * cse_25).xyz;
  xlv_TEXCOORD6 = (cse_25.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform vec4 unity_ColorSpaceDielectricSpec;
uniform vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform float _Metallic;
uniform float _Glossiness;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD2_1;
varying vec4 xlv_TEXCOORD2_2;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_1 = xlv_TEXCOORD2.xyz;
  tmpvar_2 = xlv_TEXCOORD2_1.xyz;
  tmpvar_3 = xlv_TEXCOORD2_2.xyz;
  mat3 tmpvar_4;
  tmpvar_4[0].x = tmpvar_1.x;
  tmpvar_4[0].y = tmpvar_2.x;
  tmpvar_4[0].z = tmpvar_3.x;
  tmpvar_4[1].x = tmpvar_1.y;
  tmpvar_4[1].y = tmpvar_2.y;
  tmpvar_4[1].z = tmpvar_3.y;
  tmpvar_4[2].x = tmpvar_1.z;
  tmpvar_4[2].y = tmpvar_2.z;
  tmpvar_4[2].z = tmpvar_3.z;
  float tmpvar_5;
  vec4 cse_6;
  cse_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tmpvar_5 = (cse_6.w * _Color.w);
  vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (
    dot (normal_7.xy, normal_7.xy)
  , 0.0, 1.0)));
  vec3 n_8;
  n_8 = (normal_7 * tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * cse_6.xyz);
  vec3 tmpvar_10;
  tmpvar_10 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_9, vec3(_Metallic));
  vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9 * (unity_ColorSpaceDielectricSpec.w - 
    (_Metallic * unity_ColorSpaceDielectricSpec.w)
  )) * tmpvar_5);
  vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD5, xlv_TEXCOORD5)));
  vec4 tmpvar_14;
  tmpvar_14 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  float tmpvar_15;
  tmpvar_15 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, xlv_TEXCOORD6);
  float tmpvar_17;
  if ((tmpvar_16.x < tmpvar_15)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  vec3 viewDir_18;
  viewDir_18 = -(xlv_TEXCOORD1);
  vec2 tmpvar_19;
  tmpvar_19.x = dot ((viewDir_18 - (2.0 * 
    (dot (n_8, viewDir_18) * n_8)
  )), tmpvar_12);
  tmpvar_19.y = (1.0 - clamp (dot (n_8, viewDir_18), 0.0, 1.0));
  vec2 tmpvar_20;
  tmpvar_20.x = (((tmpvar_19 * tmpvar_19) * tmpvar_19) * tmpvar_19).x;
  tmpvar_20.y = (1.0 - _Glossiness);
  vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_11 + 
    ((texture2D (unity_NHxRoughness, tmpvar_20).w * 16.0) * tmpvar_10)
  ) * (_LightColor0.xyz * 
    ((tmpvar_13.w * tmpvar_14.w) * tmpvar_17)
  )) * clamp (dot (n_8, tmpvar_12), 0.0, 1.0));
  vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = tmpvar_5;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_METALLICGLOSSMAP" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" "_NORMALMAP" }
"!!GLSL"
}
}
 }


 // Stats for Vertex shader:
 //      opengl : 3 avg math (1..6), 1 avg texture (0..2), 0 avg branch (0..1)
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 505763
Program "vp" {
SubProgram "opengl " {
// Stats: 1 math
Keywords { "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform mat4 unity_MatrixVP;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (_Object2World * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = _World2Object[0].x;
    v_5.y = _World2Object[1].x;
    v_5.z = _World2Object[2].x;
    v_5.w = _World2Object[3].x;
    vec4 v_6;
    v_6.x = _World2Object[0].y;
    v_6.y = _World2Object[1].y;
    v_6.z = _World2Object[2].y;
    v_6.w = _World2Object[3].y;
    vec4 v_7;
    v_7.x = _World2Object[0].z;
    v_7.y = _World2Object[1].z;
    v_7.z = _World2Object[2].z;
    v_7.w = _World2Object[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "opengl " {
// Stats: 3 math
Keywords { "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  xlv_TEXCOORD0 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
varying vec3 xlv_TEXCOORD0;
void main ()
{
  gl_FragData[0] = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
}


#endif
"
}
SubProgram "opengl " {
// Stats: 4 math, 2 textures, 1 branches
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_LightShadowBias;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform mat4 unity_MatrixVP;
uniform vec4 _MainTex_ST;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  vec3 vertex_1;
  vertex_1 = gl_Vertex.xyz;
  vec4 clipPos_2;
  if ((unity_LightShadowBias.z != 0.0)) {
    vec4 tmpvar_3;
    tmpvar_3.w = 1.0;
    tmpvar_3.xyz = vertex_1;
    vec3 tmpvar_4;
    tmpvar_4 = (_Object2World * tmpvar_3).xyz;
    vec4 v_5;
    v_5.x = _World2Object[0].x;
    v_5.y = _World2Object[1].x;
    v_5.z = _World2Object[2].x;
    v_5.w = _World2Object[3].x;
    vec4 v_6;
    v_6.x = _World2Object[0].y;
    v_6.y = _World2Object[1].y;
    v_6.z = _World2Object[2].y;
    v_6.w = _World2Object[3].y;
    vec4 v_7;
    v_7.x = _World2Object[0].z;
    v_7.y = _World2Object[1].z;
    v_7.z = _World2Object[2].z;
    v_7.w = _World2Object[3].z;
    vec3 tmpvar_8;
    tmpvar_8 = normalize(((
      (v_5.xyz * gl_Normal.x)
     + 
      (v_6.xyz * gl_Normal.y)
    ) + (v_7.xyz * gl_Normal.z)));
    float tmpvar_9;
    tmpvar_9 = dot (tmpvar_8, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_4 * _WorldSpaceLightPos0.w)
    )));
    vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (tmpvar_4 - (tmpvar_8 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_9 * tmpvar_9)))
    )));
    clipPos_2 = (unity_MatrixVP * tmpvar_10);
  } else {
    vec4 tmpvar_11;
    tmpvar_11.w = 1.0;
    tmpvar_11.xyz = vertex_1;
    clipPos_2 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  };
  vec4 clipPos_12;
  clipPos_12.xyw = clipPos_2.xyw;
  clipPos_12.z = (clipPos_2.z + clamp ((unity_LightShadowBias.x / clipPos_2.w), 0.0, 1.0));
  clipPos_12.z = mix (clipPos_12.z, max (clipPos_12.z, -(clipPos_2.w)), unity_LightShadowBias.y);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = clipPos_12;
}


#endif
#ifdef FRAGMENT
uniform vec4 _Color;
uniform float _Cutoff;
uniform sampler2D _MainTex;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "opengl " {
// Stats: 6 math, 2 textures, 1 branches
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform vec4 _MainTex_ST;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  xlv_TEXCOORD0 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((gl_MultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
}


#endif
#ifdef FRAGMENT
uniform vec4 _LightPositionRange;
uniform vec4 _Color;
uniform float _Cutoff;
uniform sampler2D _MainTex;
varying vec3 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD1;
void main ()
{
  float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w));
}


#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_DEPTH" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
SubProgram "opengl " {
Keywords { "SHADOWS_CUBE" "_ALPHAPREMULTIPLY_ON" }
"!!GLSL"
}
}
 }
 
Pass {



}
 
}
Fallback "VertexLit"
}